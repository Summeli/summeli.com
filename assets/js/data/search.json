[ { "title": "Danske Bank&#39;s Revelation of Backend Frameworks and Dependencies", "url": "/posts/danskebank-just-disclosed-banking-backend/", "categories": "reverse-engineering", "tags": "DanskeBank", "date": "2023-06-20 00:00:00 +0300", "snippet": "In my previous post I complained about DanskeBank’s oss licence violations. Their newest version of the mobile app fixes this issue, but it also leaks a lot of information about their mobile banking backend. You can see that they are running the backend with Ruby on Rais on AWS, and what depencendies (with version infromation) they have in the mobile backend.Disclosing this information was not required, since it’s not part of the binary which is deliverd to users via appstore.This accidental exposure instantly provided potential attackers with valuable insights into the bank’s infrastructure, creating a dangerous scenario for both the bank and its customers.The Risks of Exposing Server Backend Dependencies Targeted Exploits:By openly revealing their server backend dependencies, Danske Bank inadvertently provided a roadmap for attackers to identify potential vulnerabilities and weak points in their system. Armed with this information, malicious actors can specifically tailor their attacks, increasing the likelihood of successfully breaching the bank’s security measures. Known Vulnerabilities:Exposing specific versions of server backend dependencies enables attackers to cross-reference them with publicly known vulnerabilities. Even if the bank promptly patches any identified security flaws, attackers can exploit unpatched systems that might still be in use, posing a significant risk to customer data and the bank’s reputation. Increased Attack Surface:Sharing detailed information about server backend dependencies unnecessarily expands the attack surface. With specific versions and frameworks readily available, potential attackers have a better understanding of the bank’s technological infrastructure, increasing the chances of finding exploitable vulnerabilities. Best PracticesDanskeBank should create a process how to use Open Source software inside the company, and what information they should disclose to the users.I would also like to have a method for officially reporting the bugs to the team. I can not get these messages through customer service. No one seems to be listening. If you’re working at Danske, and you are fixing these license issues, please also create an email address for sending bug reports." }, { "title": "pfSense &amp; Lancache 2023 update", "url": "/posts/pfsense-lancache-2023-update/", "categories": "pfSense", "tags": "pfsense", "date": "2023-05-19 00:00:00 +0300", "snippet": "Minor 2023 update to my pfSense &amp;amp; Lancache configs. I migrated the ethernet ports for Lancache and pfSense in Proxmox, so I got one more ethernet port for Internet accesss. This could be used as a quick adhock connection with Android phone as it turns out that ethernet tethering is working pretty well on Android phones.The odd / even config is still running smoothly." }, { "title": "Reverse engineering DanskeBank&#39;s mobile app for oss-license violations", "url": "/posts/reverse-engineering-danske/", "categories": "reverse-engineering, Android", "tags": "DanskeBank, Reverse-engineering, Android, Developement", "date": "2023-02-04 00:00:00 +0200", "snippet": "This all started when I opened up the DanskeBank’s mobileapp and I wanted to see what kind of opensource software they are using. I saw that they have software with BSD3-Clause, MIT and ICS-lisences. However, those links only led to SPDX-license boilerplate site. They don’t list the author’s whose software they are using!Reverse engineering the mobile clientI have never reverse-engineered Android software, but I’m curious about whose software they are using whithout giving the proper credit to the authors. I downloaded Android Studio, and opened APK in there and… voilà. There’s a lot of open source software packaged within this 60MB mobile app.It seems that they are using a lot of native code with oss licenses, and a lot more! On the JAVA-side they seem to be using a lot of opensource software as well that is not mentioned in the lisenses section. okhttp, shotcutbadger etc.React nativeThe most interesting part about Danske’s mobile app seems that it’s been build with react native. Maybe they should also have read the lisence in react native: https://github.com/facebook/react-native/blob/main/LICENSE OSS Software in Danske’s mobileappIt’s pretty clear that this software is build on top of oss components and you should include the original license as part of the software itself.Software with debug-symbols.I find it very odd that they have few libraries with debug symbols still on them. You would think that a bank would remove those from production build.lib-hermes-executor-debugThis one was probably due to the bug in react-native. See https://github.com/software-mansion/react-native-reanimated/issues/3952. Other than this are probaby due to incompetence.SecretsIt’s starting to get boring to just see what OSS is inside the app. Let’s see if we can find any secrets. Just be searching the word “secret” you’ll find these.clientSecretapiConnectXIbmClientIdapiConnectXIbmClientSecretreactnativepushnotificationsecretYou can find the values pretty easiy to all of these. Some of them are obfuscated, but at least prodEnvironmentObfuscationConfig.java is pretty easy to read (that’s another story). I wonder if it makes a lot of sense to use IBM api connection product and then create such a shitty app.ConnectionsLet’s see where the client takes connections. It seems that they are making connections to the “apiebank3.danskebank.com”and they are pinning the Globalsign’s root certificate (which is already trusted by platfom). This really doesn’t help you that much. If the root is compromized, then your whole app is.new-instance v0, Lokhttp3/CertificatePinner$Builder;invoke-direct {v0}, Lokhttp3/CertificatePinner$Builder;-&amp;gt;&amp;lt;init&amp;gt;()Vconst-string v1, &quot;sha256/cGuxAXyFXFkWm61cF4HPWX8S0srS9j0aSqN0k4AP+4A=&quot;filled-new-array {v1}, [Ljava/lang/String;move-result-object v1const-string v2, &quot;apiebank3.danskebank.com&quot;CrashlogsIt seems that they are sending the program crash logs into https://danskebank.tpa.io. There’s no certificate pinning, and that site seems to be accepting connections with TSL 1.0 and 1.1. It’s really not following the best practises. Well, those are only crash logs.Decompiling the codeThe code could also be decompilet into easily human readable format with jd-gui. I used jd-gui plugin for IntteliJ. It seems that Danske is still using JAVA 6 to compile their sources (bytecode version 50). WTF are they doing?ConclusionsFor me it seems that Danske does not care much about their mobile app. It’s a big mess. I would like to ask them to update the app to include the open source licenses, but it seems that they have even bigger issues with the development." }, { "title": "Pfsense multiwan rules based on odd / even IP", "url": "/posts/pfsense-odd-and-even-rules/", "categories": "pfSense", "tags": "pfsense", "date": "2022-10-17 00:00:00 +0300", "snippet": "In this case we’re having two WAN connections that could be shared to the LAN. Insted of setting weight etc on gatewaygroups we’re load balancing the traffic based on the user’s IP (odd/even). One of be benefits of this setup is, that it’s easy to debug if someone is having a bad Internet connection.We’re also adding upload / download limits per user to keep both of the connections working for everyone.Setting aliases for odd and even IPsLet’s go to Firewall-&amp;gt;Aliases and set aliases for both odd, and even LAN ips. Let’s add all odd and even ips which are in our dhcp ip range.Routing based on the aliasesNow we can set the routing based on alias. Go to Firewall-&amp;gt;Rules, and set routing rules for odd, and even ip’s. Note that the lancache has own WAN.Addling lmitters to FW rulesSelect Firewall/Traffic Shaper and Limitters.Create network limitters for upload and downloadThen go to Firewall / Rules. Select a rule, and click advancedadd upload and download rules to in / out pipesResultsWriting static routes to pfSense seems to be working a lot better than any load balancing strategy." }, { "title": "Hacking my baby", "url": "/posts/hacking-my-baby/", "categories": "random", "tags": "baby", "date": "2022-09-11 00:00:00 +0300", "snippet": "Finnish maternetity clinics gives these smiley face posters to every family. The idea is to put the poster next to the baby threatment table, so the baby would focus to the smiley face and relax.I was wondering why the smiley face is so good, so I draw my own and made some experimentsThe experimentI swapped colors to something else than yellow and red. I had all kinds of nice pastel colors which would calm an adult. I also tested black and white, which was not as good as the original yellow and red.Here’s some colors that I tried. ResultsI’m pretty sure that there’s a lot of research about what babies really can see. I have heard that babies should see in black &amp;amp; white. In my experience this is probably not true. I changed colors and they made a clear impact on my baby. The pastels did not work at all. It seems to me that the baby can not even see the picture. I guess that there’s a reason why prime colors are so dominant in toys made for little babies.Bright yellow and red were really good colors. In my case the baby only liked an image if it had either yellow or red on it. Hard to tell which one was more important. It feels safe to say that having both yellow and red in same image can’t be bad.Do you want to try it? You can donwload smiley_face.pdf" }, { "title": "Creating a Wordpress plugin with react", "url": "/posts/creating-wp-plugin-with-react/", "categories": "wordpress", "tags": "wordpress, wordpressplugin, php, react", "date": "2022-07-30 00:00:00 +0300", "snippet": "This is a quick description how to create a wordpress plugin with create react-appI divided the plugin in two parts, the plugin, and the react-app. The react-app is copyed from build directory into the wordpress plugin.Create Wordpress plugin&amp;lt;?php/** * Plugin Name: Myapp React Plugin * Description: Experimental wordpress plugin withg react * Version: 1.0.0 */function myapp_shortcode() { return &#39;&amp;lt;div id=&quot;myapp-react&quot; &amp;gt;&amp;lt;/div&amp;gt;&#39;;}add_shortcode(&#39;myapp-react&#39;, &#39;myapp_shortcode&#39;);function myapp_load_assets() { $react_app_js = plugin_dir_url( __FILE__ ) . &#39;app/static/js/myapp.js&#39;; $react_app_css = plugin_dir_url( __FILE__ ) . &#39;app/static/css/myapp.css&#39;; // time stops stylesheet/js caching while in development, might want to remove later $version = time(); wp_enqueue_script( &#39;myapp-react&#39;, $react_app_js, array(), $version, true ); wp_enqueue_style( &#39;myapp-react&#39;, $react_app_css, array(), $version );}add_action( &#39;wp_enqueue_scripts&#39;, &#39;myapp_load_assets&#39; );?&amp;gt;Create React appJust run create react-app with your own style:yarn create react-app my-app --template typescriptconfiguring the app with cracoIn the plugin above we’re using div ‘myapp-react’, and we should use the same in the react-app.So let’s change the index.tsx to the followingconst root = ReactDOM.createRoot( document.getElementById(&#39;myapp-react&#39;) as HTMLElement);root.render( &amp;lt;React.StrictMode&amp;gt; &amp;lt;App /&amp;gt; &amp;lt;/React.StrictMode&amp;gt;);We can also change the root-div from index.html if we also want to run the app in the “normal developement mode”.Building the app as single fileIn wp plugin we used the myapp.js and myapp.css files, so we should make the build produce only these two files to keep the wordpress development easy, and simple.In this example I’m using craco (Create React App Configuration Override)Add craco to the project:yarn add @craco/craco Afer installation let’s create craco.confix.js// craco.config.jsmodule.exports = { webpack: { configure: { output: { filename: &quot;static/js/myapp.js&quot;, }, optimization: { runtimeChunk: false, splitChunks: { chunks(chunk) { return false; }, }, }, }, }, plugins: [ { plugin: { overrideWebpackConfig: ({ webpackConfig }) =&amp;gt; { webpackConfig.plugins[5].options.filename = &quot;static/css/myapp.css&quot;; return webpackConfig; }, }, options: {}, }, ], };then we can just add a new build target to the package.json like this: &quot;scripts&quot;: { &quot;start&quot;: &quot;react-scripts start&quot;, &quot;build&quot;: &quot;react-scripts build&quot;, &quot;build:wp&quot;: &quot;craco build&quot;Now runningyarn build:wp will build the app as two files myapp.js, and myapp.css. We can later copy them into the wordpress directory to get the app to bind with new plugin.Running itNow we can just add the plugin in wordpress admin console, and use the shorcode to add the app into a wordpress page. Enjoy!Load the component with wordpressThe react-app can be now loaded from wordpress with shorcode ‘myapp-react’Developing the appWe can still develop the app with normal react way, by running yarn start, and writing some code.Rerenceshttps://www.green-box.co.uk/create-a-wordpress-plugin-that-uses-a-react-app/" }, { "title": "Implementing Wordpress related posts funciton", "url": "/posts/implementing-wp-related-function/", "categories": "wordpress", "tags": "wordpress, wordpresstheme, php", "date": "2022-07-26 00:00:00 +0300", "snippet": "I’m running a corporate blog with only one category for blog-posts. Other categories are used for other stuff, and they are rendered in different way. The blog’s parent theme has its own implementation of related posts, but it produces pretty weak results with our current amount of posts.The related posts should be found inside same category, with similar tags. If similar tags are not found, then we just return the lates post (which is usually interesting).Writing related post support into Wordpress themeThe related posts function will be called from single-post php file. Just after the post we can call the ci_get_related_posts to get related blog-posts. $related = ci_get_related_posts( get_the_ID(), 3 );Then we can write the related post function into our functions.php file. The function combines results from several wordpress queries, so it’s far from ‘fast implementation’. But it really doesn’t matter, since the results are cached with CDN anyway.function ci_get_related_posts( $post_id, $related_count, $args = array() ) { //get categories $categories = get_the_terms( $post_id, &#39;category&#39; ); if ( empty( $categories ) ) $categories = array(); $category_list = wp_list_pluck( $categories, &#39;slug&#39; ); //get tags $post_tags = get_the_terms( $post_id, &#39;post_tag&#39; ); if ( empty( $post_tags ) ) $post_tags = array(); $tag_list = wp_list_pluck( $post_tags, &#39;slug&#39; ); $related_args = array( &#39;post_type&#39; =&amp;gt; &#39;post&#39;, &#39;posts_per_page&#39; =&amp;gt; $related_count, &#39;post_status&#39; =&amp;gt; &#39;publish&#39;, &#39;post__not_in&#39; =&amp;gt; array( $post_id ), &#39;order&#39;=&amp;gt;&#39;DESC&#39;, &#39;orderby&#39;=&amp;gt;&#39;ID&#39;, &#39;tax_query&#39; =&amp;gt; array( &#39;relation&#39; =&amp;gt; &#39;AND&#39;, array( &#39;taxonomy&#39; =&amp;gt; &#39;post_tag&#39;, &#39;field&#39; =&amp;gt; &#39;slug&#39;, &#39;terms&#39; =&amp;gt; $tag_list, &#39;compare&#39; =&amp;gt; &#39;IN&#39; ), array( &#39;taxonomy&#39; =&amp;gt; &#39;category&#39;, &#39;field&#39; =&amp;gt; &#39;slug&#39;, &#39;terms&#39; =&amp;gt; $category_list ) ) ); $wp_query = new WP_Query( $related_args ); //if we didn&#39;t get enough, create a new query with results from the first one if( $wp_query-&amp;gt;post_count &amp;lt; $related_count){ $my_post_ids = wp_list_pluck( $wp_query-&amp;gt;posts, &#39;ID&#39; ); $ignore = $my_post_ids; array_push($ignore,$post_id); //get remaining posts, with category search $remaining_arg = array( &#39;post_type&#39; =&amp;gt; &#39;post&#39;, &#39;posts_per_page&#39; =&amp;gt; $related_count - count($my_post_ids), &#39;post_status&#39; =&amp;gt; &#39;publish&#39;, &#39;post__not_in&#39; =&amp;gt; $ignore, &#39;order&#39;=&amp;gt;&#39;DESC&#39;, &#39;orderby&#39;=&amp;gt;&#39;ID&#39;, &#39;tax_query&#39; =&amp;gt; array( array( &#39;taxonomy&#39; =&amp;gt; &#39;category&#39;, &#39;field&#39; =&amp;gt; &#39;slug&#39;, &#39;terms&#39; =&amp;gt; $category_list ) ) ); $wp_remaining_ids_query = new WP_Query( $remaining_arg ); array_push($my_post_ids, ...wp_list_pluck( $wp_remaining_ids_query-&amp;gt;posts, &#39;ID&#39; )); //combine it all into single query with ids $new_args = array( &#39;post_type&#39; =&amp;gt; &#39;post&#39;, &#39;post_status&#39; =&amp;gt; &#39;publish&#39;, &#39;post__in&#39; =&amp;gt; $my_post_ids, &#39;order&#39;=&amp;gt;&#39;DESC&#39;, &#39;orderby&#39;=&amp;gt; &#39;post__in&#39;, ); //return a query with posts with same tags, and then newest from same category return new WP_Query( $new_args ); } return $wp_query;}" }, { "title": "Running Lancache with pfSense in 2022", "url": "/posts/running-lancache-with-pfsense/", "categories": "pfSense", "tags": "pfsense, lancache", "date": "2022-05-23 00:00:00 +0300", "snippet": "We started the pfSense journey with SteamCache and pfSense. Few years ago we upgraded into lancache , which is caching Origin, Battle.net, Windows update in addition to Steam.ConfigurationWe’re running three consumer grade mobile internet routers as WAN’s on pfsense, and we’re routing the LAN into these hotspots. See my other post about the configuration.pfSense 2.6.0 UpdateRouting was completely broken for me after upgrading from 2.5.2 into 2.6.0. I fixed this by going into interfaces / WAN, and uncheckin Block bogon networks on the bottom of the page. It’s just a random thing I found from netgate forumsLancacheLancache is running on 192.168.0.2, and we’re routing all connection from lancache into the internet via WAN2.Players on networkAll users get ips starting from 192.168.0.10, and we’re routing them to the Internet via Gateway group with WAN1 and WAN3.Making changes to the configurationIn every LAN party our mobile internet providers are serving with different quality. Sometimes one connection works poorly, and it’s important to be able to prioritize traffic into that WAN.After changing the routing rules (new priorization), it seems that we have to restart the lancache docker. Without the restart the connection doesn’t seem to be working as expected. sudo docker-compose down sudo docker-compose up -d --remove-orphansIt’s all about dnsIf we don’t restart the lanche after changing the pfSense routing schemes, we’re going to end up with broken dns. Even after rebooting, we’re seeing few dns resolve timeouts. Maybe there’s not enough bandwidth for dns queries? The error log in /logs/error.log if full of these if we don’t make the restart. Maybe some of these connections are still open though different WANs thant the pfSense would like to use, and those connections will fail.2022/05/21 11:51:07 [error] 1996#1996: *409 clientconfig.akamai.steamstatic.com could not be resolved (110: Operation timed out), client: 192.168.0.10, server: , request: &quot;GET /appinfo/440900/sha/50c5ab81a6599dbf1d0ce1e2e341d59d9b2adc67.txt.gz HTTP/1.1&quot;, host: &quot;clientconfig.akamai.steamstatic.com&quot;EA’s originTo get LanCache working with Origin users must remember to disable safe downloads (downloads with TLS) to get the local lancache working.Random restarts requiredThe Inernet connection seems to be stuck for many at some point, and I have no idea why. Reconfiguring pfSense (with same config) and restarting the lancache docker seems to be solving everything." }, { "title": "Migrating from Wordpress to Jekyll", "url": "/posts/migrating-from-wp-to-jekyll/", "categories": "wordpres, jekyll", "tags": "porting, wordpress, jekyll, webdev", "date": "2022-05-14 00:00:00 +0300", "snippet": "I’ve been running this blog since 2008, but I haven’t been updating the blog for a while. I’ve been too busy doing other things. The problem is that Wordpress needs constant care to keep it running well.Trapped in Wordpress ecosystemI also felt trapped in Wordpress ecosystem. Some plugins stopped working when the authors don’t update them anymore, or they just go behind subscription fees, which is ok, but I don’t want to go all through that, since I only want to write a blog post now and then.I also have been jumping between different web hotels (running since 2008) and I have been swichting over different cloud vendors to run wordpress on docker container. Hosting a blog is still quite a bit of work, and those servers are not free.Jekyll to the rescueThe Jekyll seems like an optimal product for me. Blogging with Markdown documents, and running them on Github for free. This all sounds too good to be true.Before migrating into Jekyll, I read some blogs post about it “I’ve been using wordpress for three months and it was not for me. Here’s how I migrated into Jekyll”. Well. I have been running this blog since 2008, and I have 180 post. I wonder how easy this is going to be…Migration to JekyllI installed Wordpress to Jekyll wordpress plugin and started my jorney. The idea was that I would get nice Markdown documents from the old blog those files would be an easy task for me to maintain them in the future.Fix your wordpress pluginsThe export-jekyll pluging failed with broken zip-files. I was really wondering if the zip-code in the plugin is broken, and I tried to make some fixes into it.However, it turned out that one of my own plugins was breaking the zip-files. I had an empty line after closing php-tags in one of my own plugins. I really don’t maintain my own stuff that well. The plugin ended up putting some empty space after everything –&amp;gt; zip-files were broken.Lesson learned. Remember not to leave this empty line after closing the tags.Not even knowing what’s broken during the past decadeI have been running wordpress from 2008. In the way I have had multiple broken plugins, different wp-themes, a lot of security holes etc. There’s a lot of broken things at this point.It feels that the easiest way of fixing this is to migrate to Jekyll and go though all Markdown files with search-tool on Visual Studio Code. Fixing stuff withing static files after the migration sounds like a solid plan.Runing the blog in few different domainsI have been running the blog in few diffrent domains: “koti.kapsi.fi/summeli”, “summeli.fi” and now “summeli.com”. These migrations have also left a mark. I stil had some of my old domain names used in internal links somewhere in the old posts. This was an easy thing to fix once I got to the Markdown.Broken linksNot using relative urls. This was a mistake, and I regret it. The Github workflow has a static check for links, which is very good verifying that those links / files are found in the site. So I had to fix all links to my blog by hand.All my images are brokenWordpress migration left same wordpress tags in md-files. Now I have every image with and all kinds of wordpress gallery related html-tags from the past decade, which are not working with Jekyll. So I need to clean up all references to images by hand.Sis files are scatter inside wp-installationI had lost some of my old symbian downloas while using different versions of the Download-Monitor wp-plugin, and uploading the sis files into various locations of the wp-structure. I manually searched for earch sis-file and fixed the links. So now all of my symbian sis files (which I have ever served here) can be found!What about commentsMoving the coments into Discuss seemed an easy way of keeping them, so I just signed in to Discuss, and migrated my comments into the service, and configured them back on into Jekyll site. This was the easies part of the whole migration.Everything is fixedNICE! I can finally blog with Jekyll and MD files. I love it." }, { "title": "Routing Steam traffic into sigle WAN (of three)", "url": "/14746/", "categories": "pfSense", "tags": "pfsense", "date": "2021-11-13 00:16:25 +0200", "snippet": "The newest update for keeping the gaming performance in good shape with pfsense is to put steam-related traffic into the lowest priority, or maybe just put it into single WAN.This can be done with simple rules. The same rules can be used for tagging the traffic, and prioritizing them down in the QoS side (or we could even put a network limitter for steam traffic)." }, { "title": "Updated the LAN routing machine", "url": "/14735/", "categories": "pfSense", "tags": "pfsense", "date": "2021-11-03 11:58:41 +0200", "snippet": "My old esxi was intalled on single USB dongle, which died (I failed). So I upgraded everything. Changed old HDD’s into SSD and upgraded all software tooEverything is not hosted on Proxmox instead of Esxi. Steamcache is not upgraded into lancache (http://lancache.net/)pfsense is just newer versionHere’s the upgraded network diagram: At times like thes are pretty nice to have a blog to keep track of things to be done. My old multirouting post still seems to be a good example how to do this.Lancache.netThe new version is being run by docker-compose.´´´ $ git clone https://github.com/lancachenet/docker-compose lancache~ $ cd lancache~/lancache $ nano .env~/lancache $ sudo docker-compose up -d# =&amp;gt; Configure your router to serve ONLY lancache-dns´´´Reading the caches:tail -100f lancache/logs/access.log" }, { "title": "Preventing your site from idling out with Cloudflare workers", "url": "/14726/", "categories": "Azure, Cloud", "tags": "azure, cloudflare", "date": "2021-04-06 12:41:51 +0300", "snippet": "Azure might just put your app into idle state if it’s inactive for too long. The always on feature is available only for higher app plans.However, the same functionality can be achieved by just making http calls with cloudflare workers.Let’s just create a simple listener:addEventListener(&quot;scheduled&quot;, event =&amp;gt; { event.waitUntil(handleScheduled(event))})async function handleScheduled(event) { await fetch(&quot;https://summeli.com&quot;)}And then we just add a cron trigger to launch fetch request every 30 minutes." }, { "title": "Hardening poorly configured services with Cloudflare workers", "url": "/14722/", "categories": "Azure, Cloud", "tags": "asp.net, azure, cloudflare, php", "date": "2021-03-19 10:18:57 +0200", "snippet": "It seems that Azure is sending x-powered-by header from asp.net, and also the php version. Removing the asp.net header is easy with web.config changes, but the php is tricker. I decided to remove these unwanted header with cloudflare worker-script.Here’s a simple workes which will remove the x-powered-by headers from your responses.```addEventListener(&#39;fetch&#39;, event =&amp;gt; { event.respondWith(handleRequest(event.request))})/** * Respond to the request * @param {Request} request */async function handleRequest(request) { const response = await fetch(request), newheaders = new Headers(response.headers); newheaders.delete(&quot;x-powered-by&quot;); return new Response(response.body , { status: response.status, statusText: response.statusText, headers: newheaders })}```" }, { "title": "Blog and Symbian downloads are working again", "url": "/14678/", "categories": "Apps, Symbian", "tags": "download, sis, Symbian", "date": "2021-03-16 19:26:30 +0200", "snippet": "They have been long gone, but today I finally fixed everything. If you still need these files (surprisingly many people still asks for these) then they are working again." }, { "title": "Configuring Mime types for Azure and WordPress", "url": "/14674/", "categories": "Azure, Cloud, Dev Talk", "tags": "azure, cloud, wordpress", "date": "2021-03-16 19:12:39 +0200", "snippet": "My blog has been not working so well for quite some time. The Symbian sis file downloads were broken due to broken theme and plugins. After I got the blog working again I wanted to move it into cloud.I chose Azure, since I haven’t been using that before.Configuring MIME types in AzureFirst we must teach Azure about Symbian installer files, and debian packages. Go to your App Service in Azure Portal, and look for App Service Editor (Preview). Then we can edit web.config and add the new MIME types to the Azure.MIME Types in WordPressThen it’s time to set MIME types right in WordPress. I did this by installing the WP Extra File Types Plugin. And I added the file types in there...And now the jorney contines in Azure." }, { "title": "Serving static pages with a custom domain with Cloudflare and github pages", "url": "/14648/", "categories": "Web Development", "tags": "cloudflare, github, html", "date": "2020-01-15 14:32:51 +0200", "snippet": "The idea is pretty cool. You can serve static web-pages for free with your own domain with Cloudflare and Github Pages. The Cloudflare is handling the DNS, page caching, and the TSL certificate. The the pages itself are hosted by github. Here’s a quick tutorial how to do it.CloudflareSet the DNS to point into Github Pages (https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site)185.199.108.153185.199.109.153185.199.110.153185.199.111.153GithubI basically made simple html pages without jekyll.First add the CNAME file into the root of your github project for your own domain:www.finice2020.comAfter the initial commit I noticed that my images are not found from the server. It turns out that you have to add an empty file named as “.nojekyll” to bypass the jekyll, so the github will know to publish everything under your domain.See my example project at: https://github.com/Summeli/finice2020.github.ioMailGunYou can also get free email routes from mailgun. Setting the account for that is also quite simple. Just follow the mailgun tutorial, for dns etc.One of the benefits is that you can create rules for forwarding emails like info@mydomain.com and forward those emails for everyone involved in “info”.Mailgun no longer supports the email routing for free plans, so I moved into forwardmail.netForwardmail.nethttps://forwardemail.net/ is a much easier service. Just write the forwarding rules into the dns records and you’re good to go. Even better service than mailgun!" }, { "title": "pfSense Traffic Shaper for prioritizing gaming traffic", "url": "/13446/", "categories": "pfSense", "tags": "gaming, pfsense, qos, traffic shaper", "date": "2019-10-30 10:49:36 +0200", "snippet": "This a lot easier, than I originally though it would be. Works really well on my multiWAN setup too! I did everything with the Wizard, that can be found under firewall/traffic shaper.The WizardWhy even post steps about a traffic shaper wizard? Well, it’s pretty easy to use, so maybe there’s no point. However I tend to forget easy things, like choosing the correct wizard (traffic_shaper_wizard_multi_all.xml), and using high enough connection speed (the first image). Everything else is really simple.At the first step we just add the upload / download speed limits. You should use some value that is actually pretty close to the maximum value, since the penaltyBox feature in the next still will only accept persentage of the connection speed, which will be calculated from these values.The Scheduler PRIQ means that each packed is placed on separate queue, and the prioritized packets (games) will pass through first.Penalty BoxIn the next step we can add a penaltybox to drop traffic from certain PCs. In a LAN party we might have someone who is draining a lot more bandwidth than everyone else would accept. In this case we can just put that user (IP) into the penaltybox to stop him draining our bandwidth. I used firewall alias penaltyBox for this purpose. The alias penaltyBox can be edited under Firewall/Aliases.Prioritize gaming trafficAfter this the wizard is pretty straightforward: just prioritize gaming traffic, and put HTTP, and P2P traffic into lower priority.Finding the worst offender to the penalty boxYou can see the realtime data in the Status / Traffic Graph menu. If you’re seeing someone downloading too much, and the rules won’t bite well enough, then you could also add these ips into the penalty box." }, { "title": "Realtime clock data from Alge-timing system", "url": "/13423/", "categories": "Google Appengine, Web Development", "tags": "alge-timing, appengine, jquery, webapp, websocket", "date": "2019-04-04 14:25:23 +0300", "snippet": "I made all of this stuff into the Finice 2019 ice climbing competition (www.finice2019.com). The idea is to send the clock timing events into web, so we could use them in the results-office, or we could insert the clock into the video stream during the competition. There’s always some delay in the video stream, so we need a way to add custom delay into the clock. The data is good, but we have to remember to add some delay so the clock and video will be on sync. It would look stupid if the climber get to the top, and the clock has already stopped a few seconds ago.Here’s a short video about how all of it works: alge-timing system, and the interface to the PC via Timy (USB) device. Then the PC read the USB, and sends that data into the webserver. The PC software is on my github: https://github.com/Summeli/algetiming-streamer The web server part. The very simple logic for handling websockets https://github.com/Summeli/Streaming-clock The web page to show the clock signal (this is included in the webserver project)." }, { "title": "Configuring SyntaxHighlighter plugin to StripBrs", "url": "/12035/", "categories": "Web Development, WordPress", "tags": "javascript, php, wordpress, wp", "date": "2018-12-03 10:21:35 +0200", "snippet": "I had way too much trouble with the new version of the SyntaxHighlighter Evolved plugin. The default configuration page is missing the option to StripBrs. A quick and dirty solution was to write a plugin to configure the other plugin.The SyntaxHighlighter configuration is easy. The plugin is running on JavaScript, so all we have to do is toSyntaxHighlighter.config.stripBrs = true;SyntaxHighlighter.all();To get there I wrote a simple plugin that add the new js after WordPress js scripts. Here’s how it’s done:function add_js_config() { wp_register_script( &#39;syntaxhighlighter_config&#39;, plugins_url(&#39;syntaxhighlightstripbrs.js&#39;,__FILE__), array(&#39;jquery&#39;,&#39;syntaxhighlighter&#39;), &#39;1.0&#39;, true); wp_enqueue_script(&#39;syntaxhighlighter_config&#39;);}add_action( &#39;wp_enqueue_scripts&#39;, &#39;add_js_config&#39; );The plugin can be found from github: https://github.com/Summeli/SyntaxHighlight-StripBrs" }, { "title": "Updated my pfSense for LAN-parties", "url": "/11756/", "categories": "pfSense", "tags": "lan, pfsense, router, routing, wan", "date": "2018-11-13 18:24:11 +0200", "snippet": "Update to my previous postI added a new WAN port for my pfSensebox. Now we can have a mobile 4G connection shared into LAN from all three Finnish networks (DNA, Telia, Elisa). This is pretty rad." }, { "title": "Routing multi-WAN in pfSense", "url": "/11741/", "categories": "pfSense", "tags": "devops, gateway, lan, networking, party, pfsense, routing", "date": "2018-11-13 18:16:48 +0200", "snippet": "I just added a third WAN connection into my pfSensebox for LAN parties. However the configuration was pretty tricky and I forgot most of the settings, so I wrote this quick guide to follow for the future (if I have to do it again..)Configure WANsThe fist step is to configure WANs. Just configure DHCP and internetsettings separably to each WAN.Create Routing GatewaysGo to System-&amp;gt;Routing-&amp;gt;Gateway Groups, and add new in Settings I did set Tier 1 for each connection, so all of them will be used. We’ll set the weights for each gateway later…&amp;lt;figcaption&amp;gt;Set all gateways into Tier 1Setting Weight for each gatewaygo to Settings-&amp;gt;Routing-&amp;gt;Gateways and select a gateway to edit. Select a gateway, and click advanced The Weight should be configured in the way that the best connection has most weight (more traffic goes into that one). I guess that pfsense is using the weighted round robin algoritm for routing. you can see on the wikipedia page how the weight should affect the traffic routing https://en.wikipedia.org/wiki/Weighted_round_robinConfigure the LAN-&amp;gt;Gateway Group bindingThe Gateway group can be taken into use in Firewall settings. Go into Firewall-&amp;gt;Rules-&amp;gt;LAN Select advanced in the IPv4 settings. Choose the gateway group that we just made in the 1stStep.Traffic ShaperThe trafic shaper is very easy to configure with multilan, thanks to the new traffic shaper wizard (under firewall/traffic shaper). It basically contains settings for prioritizing games, and detecting game downloads (steam etc), so we can put downloads into lower priority than games." }, { "title": "Building a router for LAN party with pfSense and Steam cache", "url": "/11214/", "categories": "DevOps", "tags": "devops, esxi, firewall, linux, pfsense, router, ubuntu", "date": "2017-12-12 18:58:23 +0200", "snippet": "We have small LAN-party for about 30 people twice a year. The party takes a place far away from good internet connections. We have to manage with only 4G connections in here. Currently it get really troublesome if we get some game updates to steam etc. since we’re only having one 4G connection witch is shared with 30 people.Hardware Dell R210-IIAfter lurking a while in the reddit/r/homelab , I decided to buy a cheap Dell R210-II from ebay. The reasoning was; The physical size is decent (I have limited storage space). CPU has a support for virtualization. Dell provides the customized esxi images, so the installation should be easy 1 PCI-express slot for new NIC, and enough space to run 2 HDDs in RAID-mode.I also purchased a 1gigabit 4 port Intel NIC from ebay. Those things are also really cheap. They might be Chinese pirate-cards? (the price is incredibly low), but they still do the work.Network ConfigurationVmWare ESXiInstalling the ESXi was pretty easy. I found a ESXi 6.5 image from DELL website. It wasn’t officially supported, but it seems to working just fine with my hardware. According to the reddit’s r/homelab I should also be able to run this thing with a VmWare esxi free license (some enterprise features are missing then). The only limitation is that you can use only one core per VM. However the esxi seems to be only using the 60 day trial period while the machine is ON, so it seems that i’ll get 60 days of LAN usage for free. Should be enough.Steam cacheThe Steam cache is just a big cache for steam games and windows updates. The basic idea is that we have to download this stuff only once, and after that it just comes from the cache. Installing it is really fast with docker. It’s basically just “docker run steam-cache”. I pretty much followed these instructions for steam cache https://arstechnica.com/gaming/2017/01/building-a-local-steam-caching-server-to-ease-the-bandwidth-blues/I had some problems with the latest Ubuntu server stable and steam cache docker. It seems that bind also using port 53 by default, so I have to kill it, before I can run the docker on port 53. However this is pretty easy thing to do, and I only have to do it once, so it’s not a problem.sudo docker run --name steamcache --restart=always -d -v /srv/steamcache/data:/data/cache -p 80:80 steamcache/steamcache:latestsudo docker run --name steamcache-dns --restart=always -d -p 53:53/udp -e STEAMCACHE_IP=192.168.0.2 steamcache/steamcache-dns:latestpfSenseI downloaded the newest stable version of the pfsense. Configured the dual WAN for it, and set it to load balancing mode with both WAN connections with same priorities. I also configured the DNS in pfSense to point into my steam cache.GameserversI also set up a Factorio server for the LAN-party. Factorio server can be easily run with docker image." }, { "title": "Ordering tables with jquery", "url": "/11205/", "categories": "Web Development", "tags": "jquery, web", "date": "2017-07-12 13:04:10 +0300", "snippet": "Last spring I was organizing official Finnish ice climbing championships www.finice.com . We were a really small team behind this production. The problem for us was how to deliver real time results to the audience, and for the media broadcast company, which was filming and commenting the competition.I wrote a small script to order the results, which I just quickly entered to the html page during the competition.function sortTable(table_id, sortColumn){ var tableData = document.getElementById(table_id).getElementsByTagName(&#39;tbody&#39;).item(0); var rowData = tableData.getElementsByTagName(&#39;tr&#39;); for(var i = 0; i &amp;amp;lt; rowData.length - 1; i++){ for(var j = 0; j &amp;amp;lt; rowData.length - (i + 1); j++){ if(Number(rowData.item(j).getElementsByTagName(&#39;td&#39;).item(sortColumn).innerHTML.replace(/[^0-9\\\\.]+/g, &#39;&#39;)) &amp;amp;lt; Number(rowData.item(j+1).getElementsByTagName(&#39;td&#39;).item(sortColumn).innerHTML.replace(/[^0-9\\\\.]+/g, &#39;&#39;))){ tableData.insertBefore(rowData.item(j+1),rowData.item(j)); } } } tableData = document.getElementById(table_id).getElementsByTagName(&#39;tbody&#39;).item(0); rowData = tableData.getElementsByTagName(&#39;tr&#39;); for(var i = 0; i &amp;amp;lt;= rowData.length - 1; i++){ //console.log(rowData.item(i).getElementsByTagName(&#39;td&#39;).item(0)); rowData.item(i).getElementsByTagName(&#39;td&#39;).item(0).innerHTML = i+1; }}The main idea was to call this sorttable during the competition, and just remove it afterwards, when I had written the official results to the page.Calling the table sorter was pretty easy. Just sort the document, on document.ready. $( document ).ready(function() { sortTable(&#39;men&#39;, 4); sortTable(&#39;women&#39;, 4); });" }, { "title": "OpenSSL s_client recipes", "url": "/11162/", "categories": "TCP/IP", "tags": "certificate, openssl, s_client", "date": "2016-10-05 14:04:51 +0300", "snippet": "This post is pretty much a reminder note to myself how to quickly start debugging certificate errors. I have googled this stuff way too often.Checking the certification expiration date:openssl s_client -connect www.google.com:443 | openssl x509 -textYou could also add -servername parameter to support new ssl specopenssl s_client -servername google.com -connect www.google.com:443 | openssl x509 -text Then see these blocksValidityNot Before: Mar 22 00:00:00 2016 GMTNot After : Mar 23 23:59:59 2017 GMTLet’s verify the whole certificate chain:openssl s_client -showcerts -connect www.google.com:443This is the most common case for me. Most of the time the certificate is somehow installed in a wrong way. One common error is that the certificates are sent to the client in wrong order. This is fine for most of the clients, but at least Android seems to be expecting correct certificate order, as specified in the RFC document.After this we can make simple GET request to the host withGET /myresource.html HTTP/1.1Host: www.google.comAfter this remember to press the enter twice." }, { "title": "Free backups to dropbox from wordpress sites", "url": "/10976/", "categories": "WordPress", "tags": "backup, wordpress", "date": "2016-03-11 15:02:55 +0200", "snippet": "I have WordPress based sites that I maintain. I haven’t been updating this blog for a while now. Hopefully I’ll get something neat done during this year.Here’s an easy way to take backups from WordPress blogs a zip archive to the Dropbox.1. I downloaded the BackUpWordPress plugin to create zip-archives from my blog. It creates a zip file from all the blog database and from all content.2. I upload the zip file to the Dropbox with WPB2D plugin. I have chosen only the wp-content/backupwordpress-xxx folder, so it will only upload the zip files that I have just created with the BackUpWordPress plugin." }, { "title": "All my old apps for Nokia platforms can now be found from Opera AppStore", "url": "/10230/", "categories": "Nokia Asha, Symbian, Symbian Anna, Symbian Belle, Symbian^3", "tags": "", "date": "2015-04-28 05:35:34 +0300", "snippet": "The Ovi store closed down more than a month ago. I migrated to the opera appstore, and updated the link to poin to the Opera store instead of Ovi.Anyway, Here’s the new Badges for my appsAntSnes for Symbian:MeBoy Lite for S40:" }, { "title": "Why is my GPU freezing", "url": "/6985/", "categories": "Tips", "tags": "gpu, memory", "date": "2014-11-12 23:12:28 +0200", "snippet": "I bought a new gpu, AMD’s r9 290x. I was a bit surprised after first day since it seemed to be freezing some times. It could run just perfectly for few hours and then *boom*, it freezes. I googled the issue a bit and the most common explanations were Power issues and driver problems. I borrowed a new PSU from a friend, and it was still freezing. Reinstalled the drivers couple of times etc.After couple of days I was certain that I had a broken GPU. I was also thinking that I have return it and get a new one from the warranty. However leaving an odd error description like “freezes after few hours” might just do nothing, since the maintenance clerk can always say “it works fine in here”.I decided that I have to know what’s wrong with the GPU, so I can easily prove that the GPU is broken. I would need something like memtest86 for GPUs. MemtestCL does just that. I just download MemtestCL, and I got memory errors from my GPU. This could have saved so many hours of meaningless debugging! I also left a warranty claim that the memory is broken and you can easily see it by yourself with memtestCL. I got a new GPU the following day!Note to self; If I ever have freezing problems with GPU, see if the memory is working with MemtestCL.Oh, And remember to use the most current version of MemtestCL found from github: https://github.com/ihaque/memtestCL" }, { "title": "Viskisieppo Chrome plugin to bypass glenmorangie.com site restriction to Finland", "url": "/6286/", "categories": "Web Apps, Web Development", "tags": "", "date": "2014-10-14 12:30:12 +0300", "snippet": "Finnish alcohol politics are like DRM. It has no effective on the abusive users, but it pisses off everyone else. Currently it seems that Whisky site glenmorangie.com is blocking Finnish users due to Finland’s alcohol laws.Information want’s to be free, so I made a simple plugin for Chrome to bypass the country block at glenmoorangie.com.DownloadYou can download the plugin from Chrome marketplace: https://chrome.google.com/webstore/detail/viskisieppo/dgmcbnhfgeejfapefklhjpilfiholhcc?hl=fiHow it worksYou can download the whole project from my github page: https://github.com/Summeli/ViskisieppoThe plugin basically add, or edits the “X-Forwarded-for” HTTP-headers to make the requests look like they are not coming from Finland. This is basically implemented with Chrome webrequest-APIvar requestFilter = { urls: [ &quot;*://*/*&quot; ]};chrome.webRequest.onBeforeSendHeaders.addListener(function(details) { var headers = details.requestHeaders; var header_set = false; for(var i = 0, l = headers.length; i &amp;lt; l; ++i) { if( headers[i].name == &quot;X-Forwarded-for&quot; ) { headers[i].value = &quot;12.13.14.15&quot;; header_set = true; break; } } if(!header_set){ headers.push({name:&quot;X-Forwarded-for&quot;,value:&quot;12.13.14.15&quot;}); } return {requestHeaders: headers};}, requestFilter, [&#39;requestHeaders&#39;,&#39;blocking&#39;]);" }, { "title": "JamendoFM is now featured at Firefox Marketplace", "url": "/5936/", "categories": "Firefox OS", "tags": "firefoxos, JamendoFM", "date": "2014-08-29 09:22:10 +0300", "snippet": "JamendoFM is now on the list of featured music apps at Firefox Marketplace. It’s really nice to see that at least I had some success with this app, after porting it to Tizen, FirefoxOS and Android.You can download the JamendoFM for FirefoxOS: https://marketplace.firefox.com/app/jamendofm Android: https://play.google.com/store/apps/details?id=fi.summeli.jamendofm&amp;amp;hl=fi Nokia store: http://store.ovi.com/content/505858 Tizen: There’s still only the developer phone, so no download link yet...maybe I could do one more client for Samsung smart tvs." }, { "title": "Updating JamendoFM for Android", "url": "/5684/", "categories": "Android Development, Web Development", "tags": "jamendo", "date": "2014-06-04 11:46:55 +0300", "snippet": "I just got new phone Samsung Galaxy S4 and I noticed that the JamendoFM can not play music on it. I’m sure that it worked with some older Android phones, but it turns out that it doesn’t work with the new ones.The problem is somehow related to the radiocontrols. Settings the audiosource, and programatically pressing play doesn’t seem to work with Android anynmore so I changed that stuff into Audio object, which seem to be working pretty well with new Androids.Here’s my changes with the audio: /*the old code that doesn&#39;t work*/ /* var audio = $(&quot;#radiocontrols&quot;); $(&quot;#radiosource&quot;).attr(&quot;src&quot;, sourceUrl); audio[0].pause(); audio[0].load(); audio[0].play();*/ //lets do it with Audio object try { g_myaudio = new Audio(sourceUrl); g_myaudio.id = &#39;playerMyAdio&#39;; g_myaudio.play(); } catch (e) { alert(&#39;no audio support!&#39;); }I also added the permissions for the lockscreen so the music will continue to play even when the lockscreen is on. The lockscreen permissions can be added though config.xml (phonegap) like this: &amp;lt;gap:config-file platform=&quot;android&quot; parent=&quot;/manifest&quot;&amp;gt; &amp;lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot; /&amp;gt; &amp;lt;/gap:config-file&amp;gt;" }, { "title": "Samsung SmartTV and 802.11n", "url": "/5056/", "categories": "Tips", "tags": "cisco, crap, E4500, GreenField, linksys, rant, Samsung, smarttv, wifi", "date": "2014-03-25 17:37:31 +0200", "snippet": "I just bough a new Samsung SmartTV (model UE46F6400). I just spent few hours just to configure the Wlan connection on it correctly. The TV can connect into the WLAN, but it disconnects after about 30 seconds, and then you’ll have to re-enter the password etc. to get it connected again for about 30 seconds, before it disconnects again.I used the Ethernet connection to update the device firmware, but it did not help. I got multiple hits just by Googling the issue about Samsung SmartTVs that are disconnecting from the network. One blogger seemed to have similar problem as did I: http://blog.alexanderwinkler.se/post/53743100177/samsung-smart-tv-and-cisco-linksys-router However setting the WPA2 down to the WPA also downgrades the wifi n spec into lower bandwidth. I even tested this with my Cisco Liksys E4500 with both 5Ghz antenna, and 2.4Ghz antenna. The Samsung TV actually can use the WPA2, if the network connection has been set into lower speed.Here’s what I got working; 5Ghz, Wifi A-connection, not mixed, or N 2.4Ghz, B/G Connection, not mixed, or NAfter that I had debugged the working Wifi settings I took a quick look at the manual. It says that Samsung recommends 802.11n, and soon after that it says that it doesn’t work correctly with GreenField mode. Yes, I can verify! it does not work. WTF Samsung!The thing that troubles me is that the crappy Samsung TV software can not filter the Wlan hotspots that it can not support properly. It’s really frustrating to connect into these networks just to get disconnected after about 30 seconds. I would also like to know why does Samsung recommend using 802.11n in the user manual, while it does not support the specification properly. I bet that the average TV user does not know the difference between 802.11n legacy mode, and the GreenField mode." }, { "title": "jmIRC for Nokia Asha", "url": "/4971/", "categories": "Nokia Asha", "tags": "", "date": "2014-02-10 14:32:08 +0200", "snippet": "jmIRC is a IRC client for Nokia Asha phones. The jmIRC was originally developed for j2ME by: Juho Vähä-Herttua, and it was ported to Asha by me. I just tuned some menus a bit, and added support for flick gestures.You can download the jmIRC from opera appstore:The source code can be found from github: https://github.com/Summeli/jmIRC-Asha" }, { "title": "Green Screen Magic for Windows Phone", "url": "/4961/", "categories": "Windows Phone Development", "tags": "greenscreen, windows phone", "date": "2014-01-28 23:36:26 +0200", "snippet": "Developer.nokia.com organized another Imaging challenge for developers. This time I decided to play with the chroma key and I created two Green Screen applicatons. You can find my article from Nokia wiki: Green_Screen_Magic(Chroma_Key)_with_Nokia_Imaging_SDKGreen Screen Helper, an app to help users set up a high quality green screen in preparation for Chroma Key photography. The application uses the chroma key filter in real time to make a selected colour black – enabling the user to see which parts of the screen will not be properly filtered when applying the chroma key filter. This is helpful, since it then becomes easy to see where the editing scene needs to be fixed – by adjusting the lights, or fixing wrinkles. In addition, the hue range sensitivity accepted by the filter can be adjusted: a broader hue range will be more tolerant of poor lighting and wrinkles in the background, but may result in some of the subject also being selected.The other application is called Green Screen Magic, it’s a simple photo editing app which will replace the green screen area with a background. This app uses the same approach as the previous app to help the user to select the chroma key, and adjust sensitivity. After that it uses the blend functionality to combine two images." }, { "title": "QrScanner for Nokia Asha", "url": "/4857/", "categories": "Nokia Asha", "tags": "asha, qr-code, qrscan", "date": "2013-12-10 22:29:14 +0200", "snippet": "QrScan is a QrScanner application for Nokia Asha phones phones. The cameras in current Asha phones are not good enough to read qr-codes from magazines etc. However you can scan bigger Qr codes with those phones really well.Download it from Opera Appstore:Source code:As usual you can grab the source code from my github-repository at: https://github.com/Summeli/QrScan-Asha" }, { "title": "JamendoFM available for Android and FirefoxOS", "url": "/4773/", "categories": "Android, Firefox OS", "tags": "android, firefoxos, html5, JamendoFM, phonegap", "date": "2013-11-12 16:46:22 +0200", "snippet": "JamendoFM is now available for Android and Tizen OS.JamendoFM in Google PlayFirst I must warn you that JamendoFM is worst kind of Android application. It basically shows all the problems with html5 applications for mobile. It’s slow, and the playback will cut off when the lockscrene activates. I don’t think that there’s a solution for these issues For Android in Phonegap (there are some options for iPhone, but not for Android)You can download JamendoFM from Google Play at: https://play.google.com/store/apps/details?id=fi.summeli.jamendofmJamendoFM in Firefox StoreThe Firefox app is much better than the one in the Google Play. The performance is decent even on low end device such as the GeeksPhone, and it also plays music under the lock screen.You can Download JamendoFM from the Firefox Store at: https://marketplace.firefox.com/app/jamendofmJamendoFM in GithubYou can find the JamendoFM client at github: https://github.com/Summeli/JamendoFM" }, { "title": "Porting JamendoFM to FirefoxOS", "url": "/4632/", "categories": "Web Development", "tags": "firefoxos, html5, jquery, jQueryMobile", "date": "2013-11-09 15:21:22 +0200", "snippet": "I just got a new FirefoxOS developer preview phone, so my next step was to make a port for FireFoxOS. It was pretty similar to porting to tizen. I only had to make a manifest file.Creating the application manifest fileThe file’s name is manifest.webapp, and creating it was pretty easy. I justcopy&amp;amp;pasted the example manifest file from firefoxOS tutorials, and change all the relevan fields.Here’s how my manifest looks like:{ &quot;name&quot;: &quot;JamendoFM&quot;, &quot;description&quot;: &quot;Jamendo radio client for mobile&quot;, &quot;launch_path&quot;: &quot;/index.html&quot;, &quot;icons&quot;: { &quot;60&quot;: &quot;/img/icon-60.png&quot;, &quot;128&quot;: &quot;/img/icon-128.png&quot; }, &quot;developer&quot;: { &quot;name&quot;: &quot;Antti&quot;, &quot;url&quot;: &quot;http://summeli.fi&quot; }, &quot;permissions&quot;: { &quot;audio-channel-content&quot;:{&quot;description&quot;:&quot;Use the audio channel for the music player&quot;} }, &quot;default_locale&quot;: &quot;en&quot;}Running JamendoFM under LockscreenThe coolest thing about Firefox OS is that after settings the permission “audio-channel-content” the app runs music even under the lockscreen. This is not (yet) possible on Tizen, or any other HTML5 frameworks.jQueryMobile performanceThe cool thing is that the jQueryMobile works really well on firefoxOS! The animations are pretty smooth(no where near 60fps though), and there are no artifacts caused by using them, so they’re OK." }, { "title": "Porting JamendoFM to Tizen", "url": "/4594/", "categories": "Web Development", "tags": "html5, JamendoFM, tizen", "date": "2013-11-08 16:14:32 +0200", "snippet": "At First I created a new jQueryMobile based UI with Tizen SDK. then I simply addecd the source-code from my JamendoFM project into the Tizen project, and voilà, I got JamendoFM running on Tizen Emulator.The method above got the application running only on Tizen emulator. Running it on the device itself requires correct access policies to the manifest file.Access Policy in TizenTo get the JamendoFM running on the real device I had to add the urls that JamendoFM uses into the app manifest file. The url can be added like this:&amp;lt;access origin=&quot;http://jamendo.com&quot; subdomains=&quot;true&quot;&amp;gt;&amp;lt;access origin=&quot;http://radionomy.com&quot; subdomains=&quot;true&quot;&amp;gt;&amp;lt;access origin=&quot;http://imgjam.com&quot; subdomains=&quot;true&quot;&amp;gt;Getting the app approved to the Tizen StoreThe Tizen QA noticed the there currently are some bugs related to the page-transition effects (it’s not a surprise), so I had to remove those.I had places the transition effects into the radioList items, so I had to remove them.I also had to make a new circular icon that matches the Tizen design style to get the application approved. The submitting process to Tizen store was pretty fast. I usually got responses from the QA team at the same day when I submitted my application." }, { "title": "DynDns Autologin Application for Google AppEngine", "url": "/4708/", "categories": "Dev Talk, Google Appengine, Web Apps", "tags": "appengine", "date": "2013-10-21 18:21:26 +0300", "snippet": "DynDns recently changed their service so you’ll have to log in once in every 30 days to keep your account active. As it happens I also have had the DynDns package for years, and the new login requirement really bugs me.So I developed this simple autologin application for Google’s Appengine to keep my account active. You can download the dyndns autologin app from my GitHub repository at: https://github.com/Summeli/dyndns-autologinPlease notice that this probably violates the DynDns ToS, so you might get your account banned. I will not take the responsibility for that.Installation Change the application in app.yaml into your own app-id Change username and password into the Settings class in cron.py file the script automatically executes every Monday" }, { "title": "Developing a mobile client for Jamendo Radio with jQueryMobile", "url": "/4579/", "categories": "Web Development", "tags": "android, bb10, firefoxos, html5, ios, jquery, jQueryMobile, tizen", "date": "2013-10-13 15:15:08 +0300", "snippet": "In this article I’m going to create a jQueryMobile based client for Jamendo Radio.The JQuery Mobile based UIs can be run on almost every smartphone platform; iOS, Android, Windows Phone, BlackBerry10, Tizen, Firefox OS etc. The development of JQuery Mobile based UIs is very nice, since you can develop them with HTML and JavaScript in a standard desktop browser.Here’s a short video of JamendoFM running on FirefoxOS.Getting the API for JamendoAt first you must register to http://developer.jamendo.com/ to get the API key for creating a client for Jamendo API.Creating the UI with HTML pagesThe first page will be used for listing the radio mixes form Jamendo.com.&amp;lt;!-- Starting page, listing the mixes --&amp;gt;&amp;lt;div id=&quot;radioListPage&quot; data-role=&quot;page&quot;&amp;gt;&amp;lt;div data-role=&quot;header&quot; data-position=&quot;fixed&quot;&amp;gt;&amp;lt;h1&amp;gt;JamendoFM&amp;lt;/h1&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- /header --&amp;gt;&amp;lt;div data-role=&quot;content&quot;&amp;gt;&amp;lt;ul id=&quot;radioList&quot; data-role=&quot;listview&quot; data-inset=&quot;true&quot;&amp;gt;&amp;lt;/ul&amp;gt; &amp;lt;a href=&quot;index.html#aboutPage&quot; data-role=&quot;button&quot;&amp;gt;About&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- /content --&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- /page --&amp;gt;The radio list will be loaded into the radioList-element. The next step is to populate the radioList with jQuery.The data is loaded with JSONP so the extra parameter &amp;amp;callback=? is added to the end of the requests.$( document ).delegate(&quot;#radioListPage&quot;, &quot;pagebeforeshow&quot;, function() { $.mobile.loading( &#39;show&#39;,{text:&#39;loading&#39;} ); var jqxhr = $.getJSON(&#39;http://api.jamendo.com/v3.0/radios?client_id=&#39;+g_clientId+&#39;&amp;amp;callback=?&#39;, null, null,&#39;application/json&#39;) .done(function(result) { radioListPageLoaded=true; console.log(result); $.mobile.loading( &#39;hide&#39; ); var list = $(&quot;#radioList&quot;).listview(); $(result.results).each(function(index){ $(list).append(&#39;&amp;lt;li&amp;gt;&amp;lt;a href=&quot;index.html#radioPage&quot; onclick=&quot;sessionStorage.radioId=&#39; + this.id+ &#39;&quot;&amp;gt;&#39; + &#39;&amp;lt;img src=&quot;&#39;+this.image+&#39;&quot; class=&quot;ui-li-icon&quot;/&amp;gt; &amp;lt;h3&amp;gt;&#39; + this.dispname + &#39;&amp;lt;/h3&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt;&#39;); }); $(&quot;#radioList&quot;).listview(&#39;refresh&#39;); }) .fail(function() { radioListPageLoaded = false; jQuery.mobile.changePage(&quot;#errorPage&quot;); });};The second page will be for listening the radio. In this page we’re going to show the pageCover, and load the audiostream with HTML5 audio-tags.&amp;lt;!-- Radio Listening page --&amp;gt;&amp;lt;div id=&quot;radioPage&quot; data-role=&quot;page&quot; data-add-back-btn=&quot;true&quot;&amp;gt;&amp;lt;div id=&quot;radioHeader&quot; data-role=&quot;header&quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- /header --&amp;gt;&amp;lt;div data-role=&quot;content&quot;&amp;gt;&amp;lt;img id=&quot;trackcover&quot; alt=&quot;&quot; src=&quot;img/tempcover.png&quot; /&amp;gt;&amp;lt;div id=&quot;artist&quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div id=&quot;album&quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;audio id=&quot;radiocontrols&quot; width=&quot;300&quot; height=&quot;32&quot; controls=&quot;controls&quot;&amp;gt;&amp;lt;source src=&quot;http://streaming.radionomy.com/JamLounge&quot; type=&quot;audio/ogg&quot; /&amp;gt; &amp;lt;/audio&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- /content --&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- /page --&amp;gt;In the javavascriptside, we’re going to use jQuery to fill in the radioHeader, and replace the audio-src and the src for the cover art.The radioHeader can be simply added with $(&#39;#radioHeader #radioName&#39;).text(result.results[0].dispname);The radiosource can be set(replaced) like this:function setRadioStream(sourceUrl) { var audio = $(&quot;#radiocontrols&quot;); $(&quot;#radiosource&quot;).attr(&quot;src&quot;, sourceUrl); /*let&#39;s play the audio*/ audio[0].pause(); audio[0].load(); audio[0].play();};Adding page transition effectsAdding pagetransition effects with jQueryMobile is easy. Just add data-transition=”slide” argument to the link-elements like this:&amp;lt;a href=&quot;index.html#aboutPage&quot; data-transition=&quot;slide&quot; data-role=&quot;button&quot;&amp;gt;About&amp;lt;/a&amp;gt;JamendoFM in GithubYou can find the JamendoFM client at github: https://github.com/Summeli/JamendoFMPhoneGapI’m using Phonegap to package my application to multiple platforms such as Android, BB10 etc.Unfortunately the Windows Phone can not stream ogg vorbis though html5 audio tags, so there will be no Windows Phone client, but creating one with PhoneGap would be easy.Porting JamendoFM to other HTML5 platofrmsIn later posts I’m going to use JamendoFM as an example project how to port/create jQueryMobile based applications for Tizen and FirefoxOS." }, { "title": "MeBoy 1.0, a GameBoy / GameBoy Color emulator for Nokia Asha", "url": "/4635/", "categories": "Nokia Asha", "tags": "asha, meboy", "date": "2013-10-01 13:27:36 +0300", "snippet": "MeBoy is a gameboy / gameboy color emulator for Nokia S40 full touch and Asha phones. The MeBoy is based on JavaBoy developed by Neil Millstone. I just made a simple UI for it for the Nokia Asha phones. It has been a quite some time from my previous emulator port for mobile phones, and I kind of got bored doing them. However hacking with Nokia Asha got me started with this kind of projects again, and it was fun 😉Currently the games with battery saves are not working, but I’m trying to fix it. I’m recommending simple games from the beginning of the GameBoy era such as Super Mario 1, Duck Tales etc.MeBoy running on S40 full touch:CompatibilityAs said, currently only simple games without battery saves are supported. You can find &amp;amp; edit the compatibility chart at MeBoy wiki-page at: https://github.com/Summeli/MeBoy-Asha/wikiDownloadYou can download the MeBoy free from Opera Appstore:or if you want to support me, you can buy the paid version or give me a review on Nokia Store (that helps too). Please remember that most of the games are not working, so you should try the free version first.Source codeMeBoy is Licensed under GNU General Public License version 2, and the source can be found from GitHub:https://github.com/Summeli/MeBoy-Asha" }, { "title": "Face Detection on Windows Phone", "url": "/4577/", "categories": "Windows Phone, Windows Phone Development", "tags": "facedetection, realtime, wp8", "date": "2013-09-07 11:04:18 +0300", "snippet": "Developer.nokia.com organized an Imaging challenge for developers. I haven’t done much with wp8 lately, so I decided to take part to the competition. The winning articles were really good, and this time I wasn’t one of them. But it doesn’t matter I had a lot of fun with facial recognition on Windows Phone. You can find my article from Nokia wiki: http://developer.nokia.com/Community/Wiki/Detecting_Faces_on_Windows_PhoneI ported the facedetectwp7 library to the Windows Phone 8, and I added a new simple example app showing how to use the library. You can get my wp8 port from my github-repo: https://github.com/Summeli/FaceDetectionWP8Here’s the example application from facedetect library in action:Windows StoreYou can also play with this example just by downloading the app from Windows Store: http://www.windowsphone.com/s?appid=41237b2c-eb3f-4dfa-be0b-3aaf28bf6afe" }, { "title": "Bubblet a Jawbreaker Clone For S40 Full Touch and Nokia Asha", "url": "/4520/", "categories": "Nokia Asha", "tags": "asha, J2ME", "date": "2013-08-01 02:00:21 +0300", "snippet": "Bubblet is a jawbreaker clone for Nokia S40 FullTouch and Asha phones. Bubblet was originally developed by: Juan Antonio Agudo for phones with keyboards and small screens. I just modernized the application for new Asha phones with touch controls.Bubblet running on S40 full touch:DownloadYou can download the Bubblet from Opera App store:Source codeBubblet is Lincesed GNU General Public License version 2, and the source can be found from GitHub:https://github.com/Summeli/Bubblet-Asha" }, { "title": "Developing for Nokia Asha", "url": "/4536/", "categories": "J2ME Development", "tags": "asha, J2ME", "date": "2013-08-01 00:31:02 +0300", "snippet": "Nokia started a Premium Developer Program for Nokia Asha phones http://developer.nokia.com/Developer_Programs/Asha_developer_program.xhtml Where you can get a free Asha phone, if you publish at least one app at Nokia store for Asha in the next 6 moths. I was curious about Asha development, and since they offered a free phone for it I couldn’t resist the offer. So here’s a short summary of my experiences with Nokia’s Asha SDK.I got Nokia Asha 310 from the developer program, so I wanted to keep that as a primary device, and support the new Asha 501. Luckily the apps written with the Nokia Series 40 Developer SDK 2.0 are compatible with the new Asha 501. You just need to support the lower resolution of Asha 501, and that’s it. I’m now targeting the S40 full touch Asha phones with resolution of 240×400 and the new Nokia Asha phones with the resolution of 240×320.IDEThe IDE is build on top of Eclipse, so it feels familiar to any Eclipse user. (Carbide). It has basic project templates etc. so you’ll get a pretty nice project created by creating a new J2ME project from the IDE. However the default template doesn’t give your app a default icon, and it doesn’t set any icons into the manifest file. This is a big headache for Asha noobies, since you can not install the app into the phone if it’s missing the icon &amp;amp; definitions in the manifest file. However you can debug and run your application on the emulator without these, so it’s really confusing.Now-days every single SDK adds icons and does all the packing magic to the new projects, so you can run your hello world application on a phone, by just pressing run. Just see Android, iOS, BlackBerry, Windows Phone SDKs. This is definitely something that Nokia should fix.On Device DebuggingThis one was really hard to get working. You can download all the tools needed from Nokia developer website: http://developer.nokia.com/Develop/asha/java/start/On-Device_Debugging/ However I never managed to get the Debugging working though Bluetooth connection, so I had to use the USB cable for debugging. The biggest issue for me with the debugging was the project created just didn’t start with my new project. Later on I learned that I must have an icon for the app before I can install it to the phone ( I whined about this already in the IDE chapter).J2MEJ2ME is really an old platform. It’s roots starts from 1998 when Sun focused on mobile platforms. It offers a subset from Java made for Mobile devices. Now Android is running full Java stack, and its own UI stuff on top of the java, so the old J2ME feels really outdated. The worst part is the UI. It reminds Nokia’s Avkon UI framework from Symbian. You’re filling out menu items and the views from the code, while in all “new” UI frameworks you have some declarative way of defining the UIs look. XML in Android, XAML in Windows Phone, and QML in Qt. Writing a UI for Asha is not a pleasant task.Publishing to the Nokia StoreThe publishing process was pretty much the same as publishing a Symbian application. The Web UI for publishing an app is already familiar, so no complaints about the UI. The process is similar to Symbian sis files. So the developer uploads the application unsigned, and then Nokia will sign the application before putting it into the Nokia store.However the certification Criteria for J2ME application are ridiculous. You can get the list of requirements at http://javaverified.com/graphics/PDF/UTC_3_0_FINAL.pdf It’s really my fault for not reading the certification document list carefully though at the first app submission, but there are some pretty odd requirements.For example your app must have a help / instructions item on the menu, and it must provide instructions to the user. WTF. What year is this? Have you seen any instructions in any iOS / Android / Windows Phone application? No? Because there are no instructions. The common UI design pattern is to make apps so easy to use, that the user can discover how the app is used by him/herself.Well, after implementing the Help item into menu, and writing some general instructions my app got passed the java verified, and I got my application into the Nokia store." }, { "title": "gpSP 0.7.2+ Repacked with new game_config", "url": "/4508/", "categories": "Symbian Belle", "tags": "gpsp", "date": "2013-07-04 08:41:12 +0300", "snippet": "the gpSP is a gameboy advance emulator originally written by Exophase. And now it’s ported to the Symbian OS!I head from the users that the game_config.txt from the past works better than the one packaged with 0.7.2. Some say that the Pokemon Fire Red works with this game_config, while it doesn’t work with the one packages in 0.7.2. For me it seems to be working with both game_configs, so I decided to make a new package for you. Does this one work better, do we have better game compatibility, or do you prefer the one packaged with the older 0.7.2? You can reply in the comments section.This version supports only Symbian^3 phones with Symbian Belle refresh installed (N8, E7 etc.). The old Symbian Anna users should still use the older gpSP 0.7. The S60 5th edition users should use the gpsp 0.6.5 for S60 5th editionWhat’s new: Repacked with new game_config.txtControls: You can choose between 8-directional and 4-directional DPads. You can add hidden A+B button areas, to press both of them at once. gpsp: the red dots indicates the hidden A+B areasknow issues: Mounted shares(Dropbox etc.) breaks the filemanger, so do not use mounted shares. It’s a gpsp port, so see the gpsp compatibility list before complaining about non-working ROMs the emulator crashes if you try to load a ROM without setting the BIOS there are some limitations in the ZIP file support, so maybe you have to upzipt the ROMs The ZIP files seem to be eating quite a lot of RAM, so If ROM doesn’t work, try extracting it.ZIP limitations WinZip Roms ziped in the WinZip Maximum (PPMd) format WILL NOT work. Roms ziped in the WinZip Maximum (bzip2) format WILL NOT work Roms ziped in the WinZip Maximum (Enhanced Deflate) format WILL NOT run Roms ziped in the WinZip Normal format WILL run Roms ziped in the WinZip Fast format WILL run. Roms ziped in the WinZip Super Fast format WILL run. Roms ziped in the WinZip None format WILL run.Installation:Just download and install.Download:Download the new 0.7.2+ version: gpsp_072_repacked (15958 downloads) or if you prefer the older version, you can try it too: gpsp_v0.72 (24132 downloads) Sources are available on Github: https://github.com/Summeli/gpSP4CuteThe Bios:Remember to set the correct bios before loading ROMs. Make sure to get an authentic one , it’ll be exactly 16384 bytes large and should have the following md5sum “a860e8c0b6d573d191e4ec7db1b1e4f6”. The Bios extension should be .binProject Wiki page:https://github.com/Summeli/gpSP4Cute/wikiCompatibility list:Compatibility list for Symbian^3 can be found at:https://github.com/Summeli/gpSP4Cute/wiki/gpSP-for-Symbian%5E3-compatibility-listRead this before posting comments: Do NOT Ask where to find ROMs / Bios. Asking about these will just get you banned!" }, { "title": "gpSP 0.6.5+ Repacked with new game_config", "url": "/4495/", "categories": "S60 5th edition", "tags": "gpsp", "date": "2013-07-04 08:30:13 +0300", "snippet": "the gpSP is a gameboy advance emulator originally written by Exophase. And now it’s ported to the Symbian OS! This version is only for S60 5th edition. Symbian^3 users should use gpsp 0.7 for Symbian^3I head from the users that the game_config.txt from the past works better than the one packaged with 0.6.5. Some say that the Pokemon Fire Red works with this game_config, while it doesn’t work with the one packages in 0.6.5. For me it seems to be working with both game_configs, so I decided to make a new package for you. Does this one work better, do we have better game compatibility, or do you prefer the one packaged with the older 0.6.5? You can reply in the comments section.What’s new: Repacked with new game_config.txtknow issues: not working on Symbian^3 based devices such as N8 It’s a gpsp port, so see the gpsp compatibility list before complaining about non-working ROMs the emulator crashes if you try to load a ROM without setting the BIOS there are some limitations in the ZIP file support, so maybe you have to upzipt the ROMs The ZIP files seem to be eating quite a lot of RAM, so If ROM doesn’t work, try extracting it. Samsung blit fails when “keep aspect ratio” is ticked off N97 CFW: You can not use touch + call buttons at the same time with this firmware.ZIP limitations WinZip Roms ziped in the WinZip Maximum (PPMd) format WILL NOT work. Roms ziped in the WinZip Maximum (bzip2) format WILL NOT work Roms ziped in the WinZip Maximum (Enhanced Deflate) format WILL NOT run Roms ziped in the WinZip Normal format WILL run Roms ziped in the WinZip Fast format WILL run. Roms ziped in the WinZip Super Fast format WILL run. Roms ziped in the WinZip None format WILL run.Installation:Same process as with the AntSnes:1. First Install Qt 4.6.3 binaries into your phone Nokia users can just download and install this : Qt 4.6.3 for S60 5th edition (24771 downloads) Samsung &amp;amp; Sony Ericsson users: You can get the official Qt installation package from: Qt 4.6.3 for SE devices (3274 downloads) 2. Download the gpsp4symbian.sis3. gpsp4Symbian requires the SWEvent capability. The SwEvent is required for key mapping: Now you can map call/end call etc. buttons for the gpsp usage. Therefore the following step is required to install the SW.Go to SymbianSigned and sign the AntSnesQt sis for your own phone IMEI.Step 1. Register to symbian signed https://www.symbiansigned.com/ Gmail / Hotmail email adresses are banned from the symbian signed site, so you must use some other email service provider.Step 2. Sign the sis-file by yourself with the symbian signed web UI. Your Phone IMEI (you can obtain it digiting *#06# on your phone) Your EMAIL Address (Nokia’s email address is working) gpsp4Symbian SIS PackageAnd then the symbiansigned should email you the signed gpsp4Symbianfor your phone. This package will be installable ONLY on your phone. This procedure works for all Symbian S60V5 Phones. I had also to change to date on the phone into yesterday to get it working..The alternative method is to hack your phone! You can find pretty good instructions from MameXM download site. (scroll to the bottom of page: Signing &amp;amp; Installing).Download:Download the new gpsp 0.6.5+ with improved game_config.txt gpsp_065_repacked (6419 downloads) Or if you prefer the older game_config.txt you can donwload the previous version: gpsp_v065 (56818 downloads) Sources are available on Github:https://github.com/Summeli/gpSP4Cute/tree/S60_5th_editionThe Bios:Remember to set the correct bios before loading ROMs. Make sure to get an authentic one , it’ll be exactly 16384 bytes large and should have the following md5sum “a860e8c0b6d573d191e4ec7db1b1e4f6”. The Bios extension should be .binProject Wiki page:https://github.com/Summeli/gpSP4Cute/wikiCompatibility list:Compatibility list for S60 5th edition can be found at:https://github.com/Summeli/gpSP4Cute/wiki/gpsp-for-S60-5th-edition-compatibility-listRead this before posting comments: Do NOT Ask where to find ROMs / Bios. Asking about these will just get you banned!" }, { "title": "qmlSokoban updated for BlackBerry Q10", "url": "/4482/", "categories": "BlackBerry 10", "tags": "bb10, q10", "date": "2013-06-05 02:27:26 +0300", "snippet": "qlmSokoban is a puzzle game. The Purpose of the game is to move the diamonds to the green spots by letting the warehouse keeper push against the diamonds. You move the warehouse keeper using the arrow keys or by clicking/touching the screen.qmlSokoban is licensed under GPLv3 license. You can find the source code for BlackBerry 10 port from github: https://github.com/Summeli/qmlSokoban-BB10Download" }, { "title": "Heebo updated for BlackBerry Q10", "url": "/4480/", "categories": "BlackBerry 10", "tags": "bb10, q10", "date": "2013-06-05 02:26:18 +0300", "snippet": "Heebo is an adaptation of the classic Match-3 genre puzzle game for the BlackBerry 10. Align the quirky Heebos into lines of three or more to turn the background into golden tiles. When all the background tiles are changed you win the level! Simple but highly addictive!Heebo is free software, licensed under the GPLv3. You can find the source code for BlackBerry 10 port from github: https://github.com/Summeli/Heebo-BB10Download" }, { "title": "ParkMeeCrazy updated for BlackBerry Q10", "url": "/4478/", "categories": "BlackBerry 10", "tags": "bb10, q10", "date": "2013-06-05 02:25:02 +0300", "snippet": "ParkMeeCrazy is A “Rush Hour”/”Traffic Jam” game clone written in Qt+QML.ParkMeeCrazy is licensed under GPLv2 license. You can find the source code for BlackBerry 10 port from https://github.com/Summeli/BlackBerry-10-Port-A-ThonDownload" }, { "title": "Flood updated for BlackBerry Q10", "url": "/4476/", "categories": "BlackBerry 10", "tags": "bb10, q10", "date": "2013-06-05 02:22:32 +0300", "snippet": "Flood is a logic game where the main goal of which is to fill a board with selected color.Flood is licensed under LGPL license. You can download the source code for Flood BlackBerry 10 port from: https://github.com/Summeli/BlackBerry-10-Port-A-ThonDownload" }, { "title": "Peg-e updated for BlackBerry Q10", "url": "/4474/", "categories": "BlackBerry 10", "tags": "bb10, q10", "date": "2013-06-05 02:21:08 +0300", "snippet": "Peg-E is a peg solitaire game in which you jump over pieces in order to remove them from the board, ultimately trying to eliminate all but one.Peg-E is licensed under GPLv3 license. You can find the source code for the BlackBerry 10 port from: https://github.com/Summeli/BlackBerry-10-Port-A-Thon/ Download" }, { "title": "Qollision updated for BlackBerry Q10", "url": "/4472/", "categories": "BlackBerry 10", "tags": "bb10, q10", "date": "2013-06-05 02:18:47 +0300", "snippet": "Qollision is a Qt port from KDE game Kollision. The objective of the game is to move a blue ball, and dodge red balls.Qollision is licensed under GPLv2 licesnse. You can find the source code for BlackBerry10 port from github repo: https://github.com/Summeli/BlackBerry-10-Port-A-Thon/Download" }, { "title": "Blubbles updated for BlackBerry Q10", "url": "/4470/", "categories": "BlackBerry 10", "tags": "bb10, q10", "date": "2013-06-05 02:17:22 +0300", "snippet": "Blubbels is a simple Jawbreaker(tm) clone. The purpose of this game is to remove groups of coloured bubbles to collect points.The Blubbles is licensed under GPLv2 license. You can find the source codes for BlackBerry 10 port from https://github.com/Summeli/Blubbels-BB10Download" }, { "title": "QLines updated for BlackBerry Q10", "url": "/4467/", "categories": "BlackBerry 10", "tags": "bb10, q10", "date": "2013-06-05 02:14:46 +0300", "snippet": "QLines is Qt port of KDE game KLines. The objective of the game is to move the colored balls around the game board, gathering them into the lines of the same color by five.Qlines is licensed under GPLv2. You can find the source code for QLines BlackBerry 10 port from github: https://github.com/Summeli/BlackBerry-10-Port-A-ThonDownload" }, { "title": "Qt installers for S60 5th edition", "url": "/4417/", "categories": "Symbian Development", "tags": "Qt Development, S60", "date": "2013-05-02 22:35:27 +0300", "snippet": "I found out that the ftp.nokia.com do not host the Qt installer sis files anymore, so I decided to try to find them and host them in here.Here are the installers Qt 4.6.3 (gpsp needs these): Nokia S60 5th edition devices: Qt 4.6.3 for S60 5th edition (24771 downloads) Sony Ericsson Satio devices: Qt 4.6.3 for SE devices (3274 downloads) Samsung i8910, try the same package as for Satio. If you have a better one, plase share it with me, so I can put it into here.I’m not sure if the installer for SE satio is the ‘official one’ or modded, but it should work.Here are the installers Qt 4.7.3 (antsnes needs these): Nokia S60 5th edition devices: QT 4.7.3 for S60 5th edition (5049 downloads) Qt Mobility 1.1.13 for S60 5th Edition Nokia S60 5th edition devices Qt Mobility 1.1.3 for S60 5th edition (3412 downloads) As you can see I’m still missing Qt Mobility and Qt 4.7.3 installers for Samsung and Sony-Erisson.Faenil made some Qt packages which worked with SE and Samsung devices, but I can’t find it anymore. If you still have it, maybe you could give that one for me 🙂" }, { "title": "Playing with Boundary&amp;#8217;s Application Monitors", "url": "/4354/", "categories": "TCP/IP", "tags": "boundary, Rasberry Pi, virtualbox", "date": "2013-04-26 09:47:18 +0300", "snippet": "Boundary offered free Rasberry Pis for testing their Application Monitors. https://twitter.com/boundary/status/316529581274308608The Boudanry’s service provides monitors for network traffic. It’s really handy service, if you have a big service with 10+ servers at production, and you’re wondering where the bottlenecks are. Then the monitoring service could save you a lot of trouble. You can instantly see that “Machine X” has big latency, so it hast to be the bottleneck for the service, and it should be fixed. I really like statistics, so I might still continue using these with some of my servers, even while I don’t have that much network traffic. Boundary Application MonitorsI had an Ubuntu Server installation on VirtualBox, so I thought that cloning the image would be an easy way to get free Rasberry Pi, and it was 😉 Just right-click on the server installation, and click “Clone”, and then choose “Linked Clone” in the cloning configuration. cloning in virtual boxAfter the cloning I only had to change the host-name, reboot and run the boundary installation scripts. After half an hour I got the new Rasberry PI. I’m not (yet) sure what to do with it, but it’s pretty nice ARM development platform, since I can run and compile via SSH terminal, so it’s really nice development environment for some small ARM hacks. new raspberrypi from Boundary" }, { "title": "Using the same users in SMF Forum and WordPress", "url": "/4355/", "categories": "WordPress", "tags": "SMF, wordpress", "date": "2013-03-20 08:32:23 +0200", "snippet": "Lately I have developed our climbing club’s website. My goal was to use the same users in Simple Machines Forum (SMF) and WordPress, so no one would have to remember multiple passwords for one site.For the SMF to WordPress integration I strongly recommend smf2wp plugin https://github.com/jwall149/smf2wp. It creates new WordPress users for every SMF user who goes to the WordPress site while logged into the SMF. Now the WordPress admin can add access rights to the selected users, so they can add and edit content in WordPress site too!We also had some custom pages for certain SMF user groups which shouldn’t be visible for basic users, so we needed a method to check the SMF groups in the WordPress side. That feature didn’t exist in the smf2wp plugin, so I committed a small update to the smf2wp plugin to get the SMF user group check working on the WordPress side.Here’s an example how to do the access rights check (currently works only with the latest git-version)global $smf_user_info;/*The SMF groups that can access the content*/$accessRights = array(1,2,3);foreach ($smf_user_info[&#39;smf_groups&#39;] as $i =----&amp;gt; $v) { $user_groups[$i] = (int) $v;}if(array_intersect($user_groups,$accessRights)) { echo &quot;&amp;lt;a href=&quot;secret_pages&quot;&amp;gt;Secret pages for groups 1,2 and 3&amp;lt;/a&amp;gt;&quot;;}" }, { "title": "ParkMeeCrazy for BlackBerry 10", "url": "/4324/", "categories": "BlackBerry 10", "tags": "bb10, z10", "date": "2013-02-05 16:17:38 +0200", "snippet": "ParkMeeCrazy is A “Rush Hour”/”Traffic Jam” game clone written in Qt+QML.ParkMeeCrazy is licensed under GPLv2 license. You can find the source code for BlackBerry 10 port from https://github.com/Summeli/BlackBerry-10-Port-A-ThonDownload" }, { "title": "Heebo for BlackBerry 10", "url": "/4330/", "categories": "BlackBerry 10", "tags": "bb10, z10", "date": "2013-02-05 16:17:10 +0200", "snippet": "Heebo is an adaptation of the classic Match-3 genre puzzle game for the BlackBerry 10. Align the quirky Heebos into lines of three or more to turn the background into golden tiles. When all the background tiles are changed you win the level! Simple but highly addictive!Heebo is free software, licensed under the GPLv3. You can find the source code for BlackBerry 10 port from github: https://github.com/Summeli/Heebo-BB10Download" }, { "title": "Peg-e for BlackBerry 10", "url": "/4326/", "categories": "BlackBerry 10", "tags": "bb10, z10", "date": "2013-02-05 16:16:28 +0200", "snippet": "Peg-E is a peg solitaire game in which you jump over pieces in order to remove them from the board, ultimately trying to eliminate all but one.Peg-E is licensed under GPLv3 license. You can find the source code for the BlackBerry 10 port from: https://github.com/Summeli/BlackBerry-10-Port-A-Thon/ Download" }, { "title": "QLines for BlackBerry 10", "url": "/4328/", "categories": "BlackBerry 10", "tags": "bb10, z10", "date": "2013-02-05 16:16:05 +0200", "snippet": "QLines is Qt port of KDE game KLines. The objective of the game is to move the colored balls around the game board, gathering them into the lines of the same color by five.Qlines is licensed under GPLv2. You can find the source code for QLines BlackBerry 10 port from github: https://github.com/Summeli/BlackBerry-10-Port-A-ThonDownload" }, { "title": "Nine Men&amp;#8217;s Morris for BlackBerry 10", "url": "/4292/", "categories": "BlackBerry 10", "tags": "bb10, z10", "date": "2013-02-05 16:15:37 +0200", "snippet": "Nine Men’s Morris is classic strategy board game, and now it’s available for BlackBerry 10. The game was orignally developed for Meego/Harmattan, and then it was ported to BlackBerry 10. The game is licensed under GPLv2 license, and you can get the source code from github: https://github.com/Summeli/NineMensMorris-BB10Download" }, { "title": "Flood for BlackBerry 10", "url": "/4318/", "categories": "BlackBerry 10", "tags": "bb10, z10", "date": "2013-02-05 16:14:51 +0200", "snippet": "Flood is a logic game where the main goal of which is to fill a board with selected color.Flood is licensed under LGPL license. You can download the source code for Flood BlackBerry 10 port from: https://github.com/Summeli/BlackBerry-10-Port-A-ThonDownload" }, { "title": "NetwalkMobile for BlackBerry 10", "url": "/4303/", "categories": "BlackBerry 10", "tags": "bb10, netwalkmobile, z10", "date": "2013-02-05 16:14:20 +0200", "snippet": "Netwalk mobile is a puzzle game where your goal is to connect each computer to the central server.Netwalk mobile is Qt-version of the popular NetWalk game. QNetWalk is written by Andi Peredri and released under the GNU GPL. You can find the sources for BlackBery 10 port from https://github.com/Summeli/NetwalkMobile-BB10Download" }, { "title": "Qollision for BlackBerry 10", "url": "/4321/", "categories": "BlackBerry 10", "tags": "bb10, z10", "date": "2013-02-05 16:13:44 +0200", "snippet": "Qollision is a Qt port from KDE game Kollision. The objective of the game is to move a blue ball, and dodge red balls.Qollision is licensed under GPLv2 licesnse. You can find the source code for BlackBerry10 port from github repo: https://github.com/Summeli/BlackBerry-10-Port-A-Thon/Download" }, { "title": "Blubbels for BlackBerry 10", "url": "/4315/", "categories": "BlackBerry 10", "tags": "bb10, Blubbels, z10", "date": "2013-02-05 16:13:06 +0200", "snippet": "Blubbels is a simple Jawbreaker(tm) clone. The purpose of this game is to remove groups of coloured bubbles to collect points.The Blubbles is licensed under GPLv2 license. You can find the source codes for BlackBerry 10 port from https://github.com/Summeli/Blubbels-BB10Download" }, { "title": "qmlSokoban for BlackBerry 10", "url": "/4309/", "categories": "BlackBerry 10", "tags": "bb10, sokoban, z10", "date": "2013-02-05 16:12:14 +0200", "snippet": "qlmSokoban is a puzzle game. The Purpose of the game is to move the diamonds to the green spots by letting the warehouse keeper push against the diamonds. You move the warehouse keeper using the arrow keys or by clicking/touching the screen.qmlSokoban is licensed under GPLv3 license. You can find the source code for BlackBerry 10 port from github: https://github.com/Summeli/qmlSokoban-BB10Download" }, { "title": "FreeJeweled for BlackBerry 10", "url": "/4312/", "categories": "BlackBerry 10", "tags": "bb10, z10", "date": "2013-02-05 16:11:15 +0200", "snippet": "FreeJeweled is a simple match-3 game inspired by Bejeweled2 and Gweled.FreeJeweled is distributed under GNU Library or Lesser General Public License (LGPL). You can find the sources for BlackBerry 10 port from: https://github.com/Summeli/FreeJeweled-BB10Download" }, { "title": "My Windows 8 / Hyper-V Rant", "url": "/4085/", "categories": "Windows Phone Development", "tags": "hyper-v, wp8", "date": "2013-01-28 14:06:14 +0200", "snippet": "The new lumia phones are looking really good, and I wanted to develop something for it. I started by porting a cocos2d-x game, and I also won a Lumia 820 with my forum.nokia cocos2d-x porting entry.To develop for wp8 you’ll need the Windows 8 Pro edition. It costs only about 30 EURs, so it’s kind of no brainer to buy it. The biggest issue for me with wp8 is that the emulator is build on top of Microsoft’s own virtualization platform called Hyper-V.Hyper-vThe Hyper-V is Windows virtualization service that give you an opportunity to run different operating system under the virtualization service. It gives you pretty much the same features as VM-Ware, or Virtual Box, but it’s built as windows service, so you could run multiple operating systems inside that one service.The Hyper-V steals the virtualization extensions from your processorThis is pretty irritating. The Hyper-V is a service (starts on windows startup) that takes my processors virtualization extensions into use so I can not run any other virtualization software when I have this crap enabled. For example BlackBerry emulator is running on top of VM-Ware, and it can not be used while the Hyper-V is enabled. I also like to develop for Linux with Ubuntu running on Virtual-Box, but that’s also not going to happen with Hyper-V enabled 🙁You need to boot twice after enabling/disabling Hyper-VThis is also very annoying, since I have to constantly disable / enable the Hyper-V when developing for other platforms than wp8. After disabling the Hyper-V your pc will boot, and on that boot you’ll get “configuring windows features” dialog, and after that the PC will boot once more with the new config that has Hyper-V enabled/disabled.Microphone input does not workThis is true WTF material. The microphone input on my motherboard doesn’t work after enabling hyper-v. It has a lot of staic noise, and it’s normal again when I’m disabling Hyper-V. I bough a USB-microphone to solve this issue. However running any other virtual machines like VM-ware does nothing to the mic input. I have no idea what the Hyper-V is doing…Enabling the Network connection on the emulator disconnects the desktopAnother WTF. If I enable the network connection on the windows phone emulator, then the network connection drops from my desktop PC. Developing app that requires a network connection is not feasible with the current emulator.Turning the Hyper-V offThis is the most important feature. You can turn it off. After this the wp8 emulator doesn’t work, but you can still build for ARM and test on device.Turn the Hyper-V off by opening the control panel -&amp;gt; add/remove programs -&amp;gt; configure windows features, and then uncheck the Hyper-V box.&amp;lt;Remove hyper-v" }, { "title": "The Myth of GPL Being Banned in Microsoft Marketplace", "url": "/4267/", "categories": "Windows Phone Development", "tags": "wp7, wp8", "date": "2013-01-23 18:15:46 +0200", "snippet": "There has been a lot of talk about GPL being incompatible with Microsoft market place (as with Apple’s appstore). For example this Arstechnica post from 2011. http://arstechnica.com/information-technology/2011/02/windows-phone-marketplace-bans-the-gpl-and-the-app-store-should-too/I think that this is pretty important topic now with WP8, since we could use so much GPLv2 licensed C++ libraries with our app, that it really hurts to think that the GPL is not allowed in the marketplace. However, that is not true anymore! I just downloaded WordPress client from the marketplace, and you had to accept GPLv2 license before using the software. It seems that GPLv2 is acceptable now! However, I’m still pretty sure that GPLv3 is not compatible with appstore, since it has some DRM system on it.Myth Busted!" }, { "title": "AntSnes 1.0: Now Available in Nokia store", "url": "/4255/", "categories": "Symbian Anna, Symbian Belle", "tags": "AntSnes", "date": "2013-01-17 17:47:30 +0200", "snippet": "AtnSnes is Snes9x emulator for Symbian. It is actually based on DrPocketSNES version 6.4.4, which in turn is based on snes9x 1.39The Symbian days are over for me, and I finally uploaded the app into the Nokia store 🙂 The Nokia QA guys didn’t like the mario icon, so I had to remove it, and use crappier icon instead. This version should work with all Symbian Anna and Bellle phones.What’s new new crappy icon, since the mario icon didn’t pass nokia QA 🙂 now available in nokia storeKnown issues: Mounted shares(Dropbox etc.) breaks the filemanger, so do not use mounted shares. Does not work on Nokia 500, since it doesn’t have GPU.Download:2022 update: All appstoreas are gone. get it hereIf your phone is not on the supported list in Nokia store, you can download it from here too: : AntSnes v_1.0 (5413 downloads)Sources are available on Github: http://github.com/Summeli/AntSnesRead this before posting comments: Do NOT Ask where to find ROMs / Bios. Asking about these will just get you banned!" }, { "title": "Configuring GCCE 4.6.3 for Symbian with Nokia Qt SDK", "url": "/4220/", "categories": "Symbian Development", "tags": "gcc, GCCE, Symbian", "date": "2013-01-04 18:04:50 +0200", "snippet": "PPSSPP is using the GCCE version 4.6.3 for builds, and I wanted to see if there’s anything that I could do to help, so I ended up setting up the development environment. Here’s short instructions how you can configure the GCCE 4.6.3 for Nokia QT SDK.Download the GCCE 4.6.3Download the GCCE 4.6. 3 from Mentor Graphics.Add new GCCE version to the Qt CreatorOpen QtCreator and choose tools-&amp;gt;options and go to build &amp;amp; run tab. You can add your new GCCE version from there.QtCreator project Build SettingsNext. Open up the project that you are building, and then open the project tab on QtCreator, choose Build &amp;amp; Run, and from the build you can choose the new GCCE 4.6.3. QtCreator Build and Run settingsAdd new GGCE version to the SBS buildsystemNow the Qt Creator uses Symbian SBS buildsystem with flag gcce4_6_3, which is not configured in the sbs-config, so it can not build with it yet. Open file \\QtSDK\\Symbian\\tools\\sbs\\lib\\config\\variants.xml and add following lines:name=&quot;gcce4_6_3&quot; extends=&quot;gcce_base&quot;;env name=&quot;SBS_GCCE463BIN&quot; type=&quot;toolchainpath&quot;;set name=&quot;GCCEBIN&quot; value=&quot;$(SBS_GCCE463BIN)&quot;;set name=&quot;GCCECC&quot; value=&quot;$(GCCEBIN)/arm-none-symbianelf-g++$(DOTEXE)&quot; type=&quot;tool&quot; versionCommand=&quot;$(GCCECC) -dumpversion&quot; versionResult=&quot;4.6.3&quot;;set name=&quot;RUNTIME_LIBS_LIST&quot; value=&quot;drtaeabi.dso dfpaeabi.dso&quot;;set name=&quot;PLATMACROS.VAR&quot; value=&quot;GCCE_4 GCCE_4_6&quot;;set name=&quot;ARMMACROS.VAR&quot; value=&quot;__GCCE_4__ __GCCE_4_6__&quot;/;set name=&quot;LINKER_GROUP_END_OPTION&quot; value=&quot;-Wl,--end-group&quot;/;set name=&quot;LINKER_GROUP_START_OPTION&quot; value=&quot;-Wl,--start-group&quot;/;set name=&quot;LINKER_DEFAULT_LIBS&quot; value=&quot;-lsupc++ -lgcc -lgcc_eh&quot;/;And that’s it. Now you can start building with new GCCE 4.6.3. The new GCCE seems quite buggy thing to me. I have random seq fauls etc. with it, so I can not really advice using it, but it may / may not produce better binary." }, { "title": "Fixing games for the BlackBerry AppWorld", "url": "/4129/", "categories": "BlackBerry10 Development", "tags": "bb10, Blubbels, FreeJeweled, qmlSokoban", "date": "2012-12-10 16:56:26 +0200", "snippet": "I have fixed the games I submitted to the BlackBerry Game-Port-A-Thon. I had many bugs reported by the AppWorld team that occurred only on the BlackBerry DevAlpha device, but not on the simulator. It seems that the DevAlpha is very important tool, if you want to develop for the upcoming BB10 phones.FreeJeweledThis one was the trickiest. I don’t own a DevAlpha, and yet I developed for it. The game seemed to work really well on the simulator, but it didn’t work as well on the real device. Luckily I got some images from the BlackBerry AppWorld testing team to help me with my development.As you can see the game worked really well on the simulator, and badly on the real device. At first I thought that my problem was that the size of the menu bar buttons is based on the jewel size from the game, and those values came from c++ engine. I thought that maybe there’s some very strange timing issues or something… and that’s causing the qml side ending up with some strange default values. My first attempt was hardcoding the button sizes, but I still got rejected from AppWorld, and they told me that it still looks just as bad.The FreeJeweled is using custom fonts which are packaged into the application itself. My second guess was that the fonts are not working in the same way on the real device as they are on the simulator. This time I had help from a friend with BlackBerry DevAlpha to run some tests for me, and it turns out that the problem was with the font behavior. I blindly changed font sizes on my code, and sent a package for him to test, and after couple of packages we finally got it right.Below you can see the working version of the game running on the DevAlpha, and running on Simulator.It seems that I really need the DevAlpha device if I want to do quality ports, since things like this tend to happen sometimes.BlubblesBlubbles was running really smoothly on my simulator, but it didn’t work on the DevAlpha. I used Qt’s setGeometry function to set the QWidget into the right place on the screen. It worked really well on the simulator, and it left only small black borders on both sides of the application, but it didn’t work at all on the real device. I strongly recommend not to use the setGeometry function in your apps (if you don’t have DevAlpha), since it is working differently on the device, and the on simulator.&amp;lt;pre class=&quot;wp-block-preformatted&quot;&amp;gt;&amp;lt;pre class=&quot;brush: cpp; title: ; notranslate&quot; title=&quot;&quot;&amp;gt;//This didn&#39;t work out at allsetGeometry(40,0,1200,720);Blubbels running on DevAlphaMy solution was to run the App in full screen with: MainWindow *mw = new MainWindow; showFullScreen();I also commented out the set Geometry function since it didn’t work. After that I also decided to run the game in portrait mode instead of landscape, and I also modifies the code a bit, so I could get the screen full of bubbles. Now it’s running really well on the simulator, and on the real device too. See the imageFixed version of Blubbles, screen full of bubblesAfter this I got one more rejection from the AppWorld. It turns out that I left a link to the original Blubbles project at source forge, and I had to remove it, since it was against the BlackBerry AppWorld policies. They categorised the sourceforge as “Another app store”, and told me to remove the link. It’s really not an issue for me, since they still agreed that I could keep the link to my github page where I host the source code. I’m fine with the “github only” policy, since the source code is still easy to find for anyone who’s interested about it.qmlSokobanFor this game I got a very valid point from the AppWorld testes that the man is impossible the move. Actually it was possible to move the man, but you just had to click the next block of the screen where the man is. Dragging event’s with a finger moved only the world around the man(not the man itself). I guess that this happens all the time with the real device and touchscreen. The controls are easy only with the mouse, but they don’t work that well with the touchscreen.I decided to add a DPAD to control the man. I still wanted to keep the sokoban controls “clean” in the way that no one will mess up their game by an accidental move. Therefore, I configured the buttons to only control the character from “mouseClick’s”, and not from drag events. The character moves now only with one “tap” to the DPAD. The character will not move two screens even if you keep the finger pressed to the button(this to prevent accidental moves). The AppWorld testers also agreed that this was a good fix, and I got the game passed to the store.Here’s a snippet how to create “tapping” DPAD buttons for your game. You only need one image component, with proper anchors.//qml-code for one controller buttonImage { id: up source: &quot;./images/controller/up.png&quot; anchors.top: parent.top anchors.horizontalCenter: parent.horizontalCenter MouseArea { anchors.fill: parent onClicked: { Game.moveUp(); } } }" }, { "title": "Tweejump for Windows Phone 8", "url": "/4093/", "categories": "Windows Phone Development", "tags": "cocos2d-x, tweejump, wp8", "date": "2012-12-06 18:28:44 +0200", "snippet": "I started my wp8 development by playing around with Cocos2d-x port for wp8. I also used this start by participating to the forum.nokia wiki-competition with my article about Porting Cocos2d-x Games for Windows Phone 8. You can see the port running on the video below. I had really good time with cocos2-x, and I think that I might even make my own game based on this framework. It’s really easy to use, and you can port the games created with it so easily to iOS, and for Android as well.The source codeThe source code for tweejump can be found from: TweetJump4wp8" }, { "title": "BlackBerry Got Game Port-a-Thon", "url": "/4053/", "categories": "BlackBerry10 Development", "tags": "appworld, bb10, Qt Development", "date": "2012-11-20 16:29:54 +0200", "snippet": "Last weekend I participated to the BlackBerry’s Got Game Port-a-Thon even. It was a 36 hours event, and the goal was to submit as many games as possible to the BlackBerry’s app world.The new BB10 OS has a tool to repack Android and HTML5 applications, so I expected that most of the participants will do just that. The new BB10 is Qt based, so I thought that porting existing Qt apps is probably quite easy, but it’s not as straight forward as repackaging old apps, so I decided to do just that (hopefully less competition with this approach). I ported few QWidget and QML based apps just for the fun 😉Porting Qt apps with BlackBerry 10 NDKI had 36 hours time to port apps in an environment that I had never used, so it was really important to learn how to use these new tools quickly. Luckily I can say that the BB10 native SDK is really good! The whole SDK is build on top of Eclipse based UI, and that’s pretty easy to use. It has a lot of project templates to choose from, and creating new installation packages from “file/export” is really easy.The BB10 simulator is basically a x86 compiled image of the Operating System running on VmWare! This is how you should create all of you simulators. I’m looking at you Android. Booting up the simulator takes only few seconds, and launching new apps on the simulator is really fast.Locking the orientation in BB10 apps is quite easy. Just add these few lines into the application bar-description.xml file.&amp;lt;initialWindow&amp;gt;&amp;lt;aspectRatio&amp;gt;portrait&amp;lt;/aspectRatio&amp;gt;&amp;lt;autoOrients&amp;gt;false&amp;lt;/autoOrients&amp;gt;&amp;lt;/initialWindow&amp;gt;The NDK isn’t perfect, it has at least one strange “feature” on it. if you’re using console.log(); in your qml file, the log output doesn’t go into the console, instead it goes into the terminal. You can view the terminal output by right clicking the simulator connection, and clicking “SSH connect”. In the SSH connection window you should typeslog2info -w36 hours is not much time, so I wanted to make a simple quick process to port new apps. Here’s the process that I used Create new Cascades based project from the BB10 project templates. This way I got all the necessary Qt-library dependencies into the bar-description.xml file edit the bar-description.xml and add author name, application description etc. add qrc-file as a resource to the projects .pro file( I used resource-file, since it’s more portable) remove main.cpp and app.cpp files from the project( I’m going to use the original sources instead) add all sources and resources from the project that you’re porting compile and link debug, hack, debug, etc.My PortsI managed to make complete six somewhat working games to the BB10. I made these port in a hurry (see the process above), so the code really is not clean enough to push for the original author / repositories. I have no idea if they will never qualify for the BB appworld, but here are the github repos, in the case that you’re curious and want to compile them by yourself 🙂 Maybe I can build some developer packages of them and share them in here, if they don’t qualify to the appworld.I made following ports: FreeJeweled: https://github.com/Summeli/FreeJeweled qmlSokoban: https://github.com/Summeli/qmlSokoban Heebo: https://github.com/Summeli/Heebo Blubbles: https://github.com/Summeli/Blubbels NetWalkMobile: https://github.com/Summeli/NetwalkMobile NineMen’s Morris: https://github.com/Summeli/NineMensMorris" }, { "title": "Changes in Symbian Memory Management in Belle FP1 and Belle Refresh", "url": "/3006/", "categories": "Dev Talk, Symbian Development", "tags": "belle", "date": "2012-10-10 08:30:50 +0300", "snippet": "A while a go I made gpsp update for the Symbian Belle and Belle Refresh. I learned that for some reason Nokia has changed the memory management a bit, so the new Symbian version will fail when I’m creating my own heaps with RHeap API’s. It seems that the new Symbian is unable to increase the application heap size when creating new heaps. Luckily the fix is rather easy;I just had to increase the initial amount of Heap reserved by the app startup by increasing the target.EPOCHEAPSIZE in the Qt’s .pro file. like this://it was somethign small like: symbian:TARGET.EPOCHEAPSIZE = 0x200000 0x1000000symbian:TARGET.EPOCHEAPSIZE = 0x800000 0x1400000Personally I have no idea why Nokia made any changes to the Symbian kernel at this point, when they have pretty much killed the whole platform. They are just getting broken apps for dying ecosystem. If I wouldn’t have had the Symbian SDK still installed, I wouldn’t have bothered to download the SDK again just to make even a minor update." }, { "title": "gpSP 0.7.2 for Symbian Belle Refresh and FP2", "url": "/2991/", "categories": "Symbian Belle", "tags": "belle, gpsp, symbian^3", "date": "2012-09-08 17:50:35 +0300", "snippet": "the gpSP is a gameboy advance emulator originally written by Exophase. And now it’s ported to the Symbian OS!It seems that Nokia has changed something with Symbian memory management in new Symbian Belle refresh update, and it seems that the old gpsp 0.7.1 doesn’t work anymore after Belle refresh update. This version contains minor adjustments to the memory management to make it will work with Symbian belle refresh again.This version supports only Symbian^3 phones with Symbian Belle refresh installed (N8, E7 etc.). The old Symbian Anna users should still use the older gpSP 0.7. The S60 5th edition users should use the gpsp 0.6.5 for S60 5th editionWhat’s new: Support for Symbian Belle RefreshControls: You can choose between 8-directional and 4-directional DPads. You can add hidden A+B button areas, to press both of them at once.Know issues: Mounted shares(Dropbox etc.) breaks the filemanger, so do not use mounted shares. It’s a gpsp port, so see the gpsp compatibility list before complaining about non-working ROMs the emulator crashes if you try to load a ROM without setting the BIOS there are some limitations in the ZIP file support, so maybe you have to upzipt the ROMs The ZIP files seem to be eating quite a lot of RAM, so If ROM doesn’t work, try extracting it.ZIP limitations WinZip Roms ziped in the WinZip Maximum (PPMd) format WILL NOT work. Roms ziped in the WinZip Maximum (bzip2) format WILL NOT work Roms ziped in the WinZip Maximum (Enhanced Deflate) format WILL NOT run Roms ziped in the WinZip Normal format WILL run Roms ziped in the WinZip Fast format WILL run. Roms ziped in the WinZip Super Fast format WILL run. Roms ziped in the WinZip None format WILL run.Installation:Just download and install.Download:Download the gpsp4Symbian: gpsp_v0.72 (24132 downloads)Sources are available on Github: https://github.com/Summeli/gpSP4CuteThe Bios:Remember to set the correct bios before loading ROMs. Make sure to get an authentic one , it’ll be exactly 16384 bytes large and should have the following md5sum “a860e8c0b6d573d191e4ec7db1b1e4f6”. The Bios extension should be .binProject Wiki page:https://github.com/Summeli/gpSP4Cute/wikiCompatibility list:Compatibility list for Symbian^3 can be found at:https://github.com/Summeli/gpSP4Cute/wiki/gpSP-for-Symbian%5E3-compatibility-listRead this before posting comments: Do NOT Ask where to find ROMs / Bios. Asking about these will just get you banned!CompatibilityHere’s a list of tested games, and comment if it’s working or not working. One piece. (perfect) Advance guardian heroes. (perfect) Beyblade G-revolution. (perfect) Cocoto kart racer. (blue screen) Crash bandicoot – purple riptos rampage. (blue screen) Crash nitro kart. (blue screen) Dinotopia – timestone pirate. (perfect) Dragonball Z – Buu’s furry. (perfect) Dragonball Z – supersonic warrior. (perfect) Dragonball Z – legacy of goku. (perfect) Megaman and bass. (perfect) Pacman world. (perfect) Van helsing. (perfect) Animaniacs – light camera action. (perfect) Bomber-man max 2 blue. (blue screen saat pertama dibuka tapi selanjutnya perfect kok) Bomber-man tournament. (perfect) Breath of fire 2. (blue screen) Breath of fire 1 (blue screen) Bruce lee – return of the legend. (blue screen) Cartoon netwrok – speedway. (blue screen) Crash bandicoot n-trance 2. (blue screen di video tapi saat main game perfect) Crash bandicoot xs. (blue screen di video tapi saat main game perfect) Crash of the titan. (perfect) CT-special force 2 – back to hell. (blue screen) CT-special force 1. (blue screen) Danny phantom – urban jungle. (perfect) Darius R. (blue screen) Ace advance. (blue screen) Action man – robotatak. (blue screen) Aladdin. (perfect) Antz – extreme racing. (blue screen) Arthur and the minimoys. (blue screen) Asterix and Obelix XXL. (blue screen) Butt- ugly martians – B.K.M. Battle (blue screen) Ice age 2 – the meltsdown. (perfect) Incredible hulk. (perfect) Jimmy neutron vs Jimmy Negatron. (perfect) Megaman battle chip chalenge. (perfect) Scorpion king – sword of osiris. (perfect) Spongebob and friends – attack of the toybots. (perfect) X-Bladez – inline skater. (perfect) Zatchbell – electric arena. (perfect) Zoey 101. (perfect) Spogebob – battle bikini bottom (blue screen) Scooby doo – unmasked (perfect but when play thegraphic becaome worse) Moorhen 3 – chicken chase (blue screen) Madagascar (blue screen) Mummy 2. (perfect but the dialog text is blue screen, I can’t read it) Worms – worlds party (blue screen) Spongebob – super spoge (perfect) Spongebob – creature from crusty crab (perfect) Shrek 2. (blue screen) spyro – a new beginning (perfect) Scooby doo 2 – monster unleashed. (perfect) Scooby doo – mystery mahyem. (perfect) Megaman battle network (perfect) Megaman battle network 2 (perfect) Megaman battle network 5 – team colonel (perfect) Medal of honor – the underground (blue screen) Megaman battle network 6 – cybeast Falzar. (perfect) Megaman battle network 6 – cybeast gregar. (perfect) Monster bass fishing (blue screen) Monster truck mahyem. (perfect) Mr.driller 2 (perfect) My stud farm. (perfect) Spongebob atlantis squarepantis (perfect) Avatar the legend of Aang (perfect) Demon driver – time to burn rubber (blue screen) Ecks vs saver. (Bleu screen) Earthworm jim 2. (Perfect) Ed, edd, n’ eddy – jawsbreakers! (bluescreen n perfect) Elf the movie (perfect) Fairy odd parent – shadow showdown (perfect) Final fight one. (perfect)" }, { "title": "Creating a SOCKS5 proxy for Diablo III", "url": "/2933/", "categories": "TCP/IP", "tags": "diablo III, SOCKS5, ssh", "date": "2012-05-24 23:22:20 +0300", "snippet": "Here’s a simple tutorial how to create SSH Tunnel and Socks proxy to play Diablo III behind a firewall, or just to avoid 3007 errors. You’ll only need a SSH server where you can connect to.Creating the SOCKS5 SSH tunnel with PuttyStep 1Open Putty and go to the Tunnels menu. Set source port to 9999, and then set Dynamic as the port type, and press Add.Step 2To prevent unwanted disconnects from the SSH server you should set a value to “seconds between keepalive packages”. Open the Connections menu and set some value to seconds between the keepalive packages. 30 seconds is smaller than my server’s disconnect time, so that’s fine for me.Set the seconds between keepalive packages to 30Step 3Open the session page, and connect to SSH Server. Just replace the Host Name “mysite.com” with the server you want to connect to.You can also save your session in this page (if you don’t want to configure the SSH tunnel again) by writing a name into the saved session, and then pressing save.Write your server address to the host name and press OpenChoosing the Proxifier SoftwareThe Proxifier is a proxy server, that can route your traffic though the SOCKS SSH tunnel, that we just created. The Diablo III uses UPD, so you should choose Proxifier SW that supports the SOCKS5 UDP Associate. You can get pretty good comparison at Wikipedia article here: http://en.wikipedia.org/wiki/Comparison_of_proxifiers I decided to use Widecap, since it’s for windows, it supports UDP, and it’s free.Configuring Widecap for Diablo IIIThe Widecap UI is a bit messy, but you’ll get used to it 🙂Step 1Create a new proxy by clicking proxies/new proxy button. Then set the Server port into localhost:9999 (the SOCKS tunnel we just created). Then create a new Chain by clicking the ‘Create new’ button at near the chain. You should invent a better name to your chain than the “Unused”Connect to localhost:9999, and Create a new Chain, and click OKStep 2Create a new rule, by clicking the “new rule” button under the network. You can give a name to your rule in the Main tab. Next click the chain tb, and set the proxy chain you to the rule that you created in Step1.Set the chain into to the rule that you created in step 1Now you can add the real rule, by clicking the address tab, and adding a new address rule. In this example I used only 80.239.208.193, which is the eu.actual.battle.net, but if you’re behind some nasty firewall you should just choose to route all ports by choosing the option “Any”.Please also notice that the eu.actual.battle.net might later resolve into some other IP than 80.239.208.193, if you want to only route that domain, you should ping eu.actual.battle.net and see what it resolves.Create new rule, and set the IPCurrently it seems that playing the Diablo III causes about 15-20MB of traffic to the eu.actual.battle.net so it’s not eating too much bandwidth from my SSH server.Step 3Configure the Diablo III to use the newly created rule. Click to the view programs page. Then Drag and Drop the Diablo III.exe file into the programs area. After this right-click the Diablo III.exe, and choose “modify program”. Then choose the rule you created in the Step 2 for the Diablo III and press OK. If you’re behind a firewall, you should also add the same rule for the Diablo launcher, so it can update the Diablo III for you.Set the newly created rule for Diablo III.exeProtip: install openSSH server to port 443Many public networks at the airports etc. have quite strict firewall rules, so you can’t normally access to the SSH via port 22. My favourite hack is to run the OpenSSH server at 443 port, so I can connect into it pretty much from anywhere I like. The best part is that with SOCKS5 proxy I can even play Diablo III by bypassing these firewalls." }, { "title": "Solving the 3007 error in Diablo III", "url": "/2931/", "categories": "TCP/IP", "tags": "diablo III, SOCKS5, ssh", "date": "2012-05-24 23:13:05 +0300", "snippet": "I had pretty much same problem that’s described in this battle.net forum post: https://eu.battle.net/d3/en/forum/topic/4210083858 Most of the 3007 error pages are just full of trolling, but this one seems quite informative, so I keep that as a reference.At fist, I started the WireShark to see what’s going on. The log was full of TCP Retransmission packets telling me that the TCP packest aren’t going though. My best guess is that my ISP is marking those packets as bittorrent packages, and then the QOS is heavily limiten their bandwidth.I filtered the dns records, and I noticed that in login phase the Diablo III is connecting into eu.actual.battle.net port 1119, and that my network traffic into that IP is quite limited. My first ideas was to create SSH tunnel, and tunnel the port 1119 into the battlenet.Creating the SSH tunnelI added the line to the windows host file, to route all traffic to eu.actual.battle.net into my localhost.#battle.net127.0.0.1 eu.actual.battle.netAfter this I opened putty, and set the Tunnel in the Putty’s tunnels menu. I created a local tunnel into port 1119(that’s where I’ll be getting the packages from diablo III), and then I set the destination into eu.actual.battle.net:1119 (where all that data should go).Did it work?Well, it didn’t work. After going though the Wireshark logs I noticed that there are some other ports (seemed like random) opened into eu.actual.battle.net too, and there was some UPD packages as well, so regular SSH tunneling wasn’t enough.However, in these kinds of situations we can use the SOCKS5 Proxy to tunnel though a single SSH tunnel into the Battle.netCreating a SOCKS5 Proxy for DiabloSOCKS5 to the rescue. I used putty to create the SOCKS tunnel in the Putty’s tunnel menu by biding a local port 9999, and choosing the tunnel type as dynamic. Then I used Widecap as a proxyfier to make a proxy for Diablo III. I proxied only the IP for the eu.actual.battle.net, since I didn’t want to waste any more bandwidth from my SSH server than I had to. I also blogged about SOCKS5 for Diablo III in more details at my previous posts" }, { "title": "My thoughts about Tizen", "url": "/2912/", "categories": "Dev Talk", "tags": "tizen", "date": "2012-05-11 17:56:23 +0300", "snippet": "After the Meego was dumped by Nokia, Intel and Samsung created an alliance to create new a Linux based mobile OS called Tizen. The Tizen is pretty close to the old WebOS with HTML5 application framework, and Linux kernel. The Tizen SDK was published a while ago and it really doesn’t impress me at all.The whole Tizen SDK seems pretty useless to me. I don’t need this heavy SDK, and all of it’s simulator and emulators to develop HTML5 apps. Regular browser and JavaScript debugger is enough for me. The only reason for me to use the HTML5 to is the portability. The app should run on every platform Android, iPhone, wp7, Meego etc, so I really don’t see any reason to use Tizen specific API’s, instead I would use Phonegap and build for multiple platforms instead of choosing only to build for Tizen.I guess that the HTML5 is good enough to build simple 2D-games by drawing into canvas, and writing the game logic with JavaScript, but It’s not that good for serious applications. The biggest problem with HTML5 apps with jQuery Mobile is the performance. Even on Samsung Galaxy SII you won’t get 60fps scrolling with basic list elements. You can test this by yourself by loading the jQuery mobile demos page in your phone. After running the demos with few devices it seems that Apple engineers have optimized the webkit pretty well for the iPhone, but every other platform is just way too slow. Also the animations are pretty much useless on Android devices. Jittering happens all the time if you try to use the animations. I really hope that Intel and Samsung engineers are going to make huge optimization’s to the webkit, since otherwise the platform will be completely too slow, and unusable.I would like to have SDL and Qt frameworks as part of the Tizen to develop native apps. The Tizen is Linux based after all, so porting existing games and apps would be easy if SDL and Qt would be a part of the current platform. However I still have some hopes for Tizen, since it seems to me that any community member could port SDL or Qt to Tizen with the platform SDK, and add it into some repository for everyone’s benefit." }, { "title": "How did my native code experiment go with wp7", "url": "/2794/", "categories": "Dev Talk", "tags": "wp7", "date": "2012-04-24 14:59:48 +0300", "snippet": "I have been pretty much spending all my free time during the winter for snowboarding and ice climbing. Now that the winter is nearly over at northern Europe, I got some time to come back to my hacking hobby. This is also to remind me how did my wp7 experiments go, if I want to come back to this stuff at some point.Native codeAt January I got the native snes9x library build and I was even able to call it from the managed code side. The native code usage has been well documented by XDA developer Heathcliff74 http://forum.xda-developers.com/showthread.php?t=1299134What was strange that on January I didn’t need the ID_CAP_INTEROPSERVICES capability to my application, it worked anyway. I guess that Nokia had some bugs in their first Mango firmware to allow native code without proper capabilities. Yesterday I got back with the code, and I noticed that I can not run the code anymore without the capability.Callbacks from the native code to the managed codeMy biggest problem back then was that I could call LoadROM function from the managed code side, but I didn’t have any tools to debug what went wrong in the native side, so I couldn’t figure out what went wrong after calling the loadROM. My first idea was to set up debug callbacks into the managed code side that I could still call from the native side likevoid DEBUG(string debugMessage){console.debug(debugMessage)}But I newer found a way to a way how to do this. So I’m really stuck with this one without any plans to continue. I might get back to this if someone finds some ways of making the callbacks, or debugging the native code.InteropUnlockCurrently Nokia devs can hack their Lumias, to get full control, and the InteropUnlock is available, if you like to continue native development. Thanks to XDA-developer suzughia http://forum.xda-developers.com/showthread.php?t=1599401What’s nextI guess that I’ll be coming back to the windows phone when the wp8 is available, since it should have the native code support build in, and I don’t need to use 10 years old ARMV4 architecture and lots of hacks to run native code on it.I have some really cool ideas what I want to try on Meego. I’ll share the progress with you again, if I ever get anywhere with the new stuff." }, { "title": "Compiling with Microsoft&amp;#8217;s ARM compiler for Windows Mobile with Visual Studio", "url": "/2802/", "categories": "Windows Phone Development", "tags": "native code, visual studio, windows mobile, wp7", "date": "2012-01-14 15:40:16 +0200", "snippet": "I have played with Visual Studio 2008 and Microsoft Mobile SDK to build some native code for windows phone. This is pretty much a LOG for myself, since I tend to forget things. Currently I have the Snes9x sources compiled inside a native COM DLL, which I can use from the managed wp7 code. Don’t get too excited since that code probably don’t work at all (yet), but it’s a nice start, and I like to learn how to use new tools by using them.I started by building the snes9x sources as a one static library, and including that library from a COM DLL, which will define the interface the to managed code. It’s a nice way to build an app, since I can easily separate the COM communication interface and the snes9x code.The EnvironmentYou can not actually build a native library with Windows Phone SDK, but it seems that you can build a COM DLL with Windows Mobile SDK, and use that from the managed code. This is totally unsupported “feature”, so everything might not work as you expect 😉First you must install Visual Studio 2008 and Windows Mobile SDK. You can get more details of the native environment from Heathcliff74 XDA-developers postI installed the good old Windows XP inside a virtual box, and then I installed Visual Studio 2008 with latest service pack and hotfixes. Windows Mobile 6 Professional SDK Refresh.After everything has been installed we can start the development by creating a new static library.Creating a static libraryTo create a static library you should create a new project (file/new project). Choose Visual c++ / Smart Device / Win32 Smart Device Project. Then choose Application settings, and choose application type, and use “static library”Precompiler settingsYou can find the Precompiler settings in Visual studio under project/settings/c/c++/Preprocessor tab.Precompiled headersI had not used the precompiled headers before, so this was a new feature for me. I recommend reading Wikipedia’s Precompiled header article for more details how it works etc. Precompiled header is basically a big header file compiled from multiple header files. It’s a nice idea, and it could reduce the build time, but sadly it seems to totally mess up my static lib project, so I decided to live without it.The precompiled header can be turned on/off under project/settings/c/c++/Precompiled HeadersCreating a COM DLLTo create a COM DLL you should create a new project (file/new project). Choose Visual c++ / Smart Device / ALT Smart Device project. Then choose Dynamic Link Library under application settings.Including a static libraryFirst you must add a reference into you project ( the COM project in my case). Right click the project, and choose “References..”. And the next dialog you can click “Add Reference” and add your new static library project as a reference.Next add the static library as a project dependency by right clicking the project and choose “project dependencies” and you can choose the new static libraries as dependencies to your project.Adding Include DirsYou can add Include Dirs into the project under project/settings/c/c++/GeneralBuilding the COM DLLAfter I have added the static libs, and the proper include directories (pointing at the static libs) I can successfully build the project. I decided to use the “precompiled headers” with my COM library, since it’s not breaking anything.Next stepsI’ll probably start playing with the COM interface, and see what I can do with this code. It’s still quite possible that everything is totally broken, and I didn’t accomplish anything, but it was still nice to play with new tools etc." }, { "title": "Lumia 800 is in da house", "url": "/2777/", "categories": "Planning", "tags": "lumia, wp7", "date": "2011-12-29 20:03:15 +0200", "snippet": "After feb11 when Nokia killed both Symbian and Meego I have been thinking what should be my next platform. I have been casual Android user, and I have to admit that I don’t like it much, plus it already has all of my favorite emulators ported into it, so I couldn’t figure out anything that I would want to develop for it( it kind of already has everything already).Today I got the Lumia 800 from nokia launchpad, and I have to admit that I really like the device a lot. All the basic apps are scrolling at 60fps, and I can acess facebook and twitter really well. However it does not yet have any cool app, sucs as emulator on it (yet), so it’s an interesting platform.In spec vise the Lumia seems also pretty nice device. It has Qualcom’s MSM8255 -SOC, which contains 1,4 Ghz AMR Cortex A-8 processor and Adreno 205 GPU, which is plenty for games and emulators.Emulators on wp7The problem is that currently the wp7 doesn’t support native code for 3rd parties, so you’re stuck with the C#. Luckily there’s also some progress even on that area, as we can see on the XDA-developers forum: http://forum.xda-developers.com/showthread.php?t=1299134 You’re also going to have to jailbreak you phone with some jaibreak. The most recent jailbreak project is WindowBreak http://windowsphonehacker.com/articles/the_windowbreak_project-12-23-11What’s nextI’ll also start hacking with the wp7, and see what I can do with it 🙂" }, { "title": "gpSP 0.7.1 for Symbian Belle", "url": "/2756/", "categories": "Symbian^3", "tags": "belle, gpsp", "date": "2011-09-29 16:10:50 +0300", "snippet": "the gpSP is a gameboy advance emulator originally written by Exophase. And now it’s ported to the Symbian OS!This version supports only Symbian^3 phones with Symbian Belle update installed (N8, E7 etc.). The old Symbian Anna users should still use the older gpSP 0.7. The S60 5th edition users should use the gpsp 0.6.5 for S60 5th editionWhat’s new: Support for Symbian BelleControls: You can choose between 8-directional and 4-directional DPads. You can add hidden A+B button areas, to press both of them at once.know issues: Mounted shares(Dropbox etc.) breaks the filemanger, so do not use mounted shares. It’s a gpsp port, so see the gpsp compatibility list before complaining about non-working ROMs the emulator crashes if you try to load a ROM without setting the BIOS there are some limitations in the ZIP file support, so maybe you have to upzipt the ROMs The ZIP files seem to be eating quite a lot of RAM, so If ROM doesn’t work, try extracting it.ZIP limitations WinZip Roms ziped in the WinZip Maximum (PPMd) format WILL NOT work. Roms ziped in the WinZip Maximum (bzip2) format WILL NOT work Roms ziped in the WinZip Maximum (Enhanced Deflate) format WILL NOT run Roms ziped in the WinZip Normal format WILL run Roms ziped in the WinZip Fast format WILL run. Roms ziped in the WinZip Super Fast format WILL run. Roms ziped in the WinZip None format WILL run.Installation:Just download and install.Download:Download the gpsp4Symbian: gpsp 0.7.1 for Symbian Belle (46569 downloads) Sources are available on Github: https://github.com/Summeli/gpSP4CuteThe Bios:Remember to set the correct bios before loading ROMs. Make sure to get an authentic one , it’ll be exactly 16384 bytes large and should have the following md5sum “a860e8c0b6d573d191e4ec7db1b1e4f6”. The Bios extension should be .binProject Wiki page:https://github.com/Summeli/gpSP4Cute/wikiCompatibility list:Compatibility list for Symbian^3 can be found at:https://github.com/Summeli/gpSP4Cute/wiki/gpSP-for-Symbian%5E3-compatibility-listRead this before posting comments: Do NOT Ask where to find ROMs / Bios. Asking about these will just get you banned!" }, { "title": "AntSnes 0.8.7 for Symbian Belle", "url": "/2753/", "categories": "Symbian Belle", "tags": "AntSnes, belle", "date": "2011-09-29 16:10:29 +0300", "snippet": "AtnSnes is Snes9x emulator for Symbian. It is actually based on DrPocketSNES version 6.4.4, which in turn is based on snes9x 1.39The new AntSnes comes with multitouch and with new transparent keys. You’ll need a Symbian^3 based phone with Symbian Belle update to run this (N8, C7, E7 etc..). The Symbian Anna users should still stick up with the older AntSnes 0.8.6 The old S60 5th edition is not supported by this version anymore. S60 5th edition users should use AntSnesQt 0.7I heard that this isn’t working with all Belle versions… So if the 0.8.7 doesn’t work, then try to use the AntSnes 0.8.6What’s new Symbian Belle supportKnown issues: Mounted shares(Dropbox etc.) breaks the filemanger, so do not use mounted shares.Installation:Just download and install.Download:Download the AntSnes 0.8.7 with the smart-installer: AntSnes v 0.8.7 (30674 downloads) Sources are available on Github: http://github.com/Summeli/AntSnesRead this before posting comments: Do NOT Ask where to find ROMs / Bios. Asking about these will just get you banned!" }, { "title": "QGLWidget in Symbian Belle(leaked version)", "url": "/2741/", "categories": "Symbian Development", "tags": "", "date": "2011-09-28 17:20:30 +0300", "snippet": "Warning: This post is made only with leaked Symbian Belle. The official Nokia release might not have the problem described in this post.Here’s the problem: I implemented the blit in QGLWidget’s paintEvent(QPaintEvent *) method. The idea was that the Qt would be using OpenGL ES for the blit, when I’m using the QGLWidget.Currently I’m only using the QPainter for the actual blit. Like this:QPainter painter;painter.begin(this);//.... do the paintingpainter.end();However the method above seems to be failing in the Symbian Belle (only a black screen is shown), so the QGLWidget is clearly not working as well as it was in the Symbian Anna.Solution: I just converted the QGLWidget into a normal QWidget, and everything seems to be working. At least with the leaked Symbian Belle I can not see any significant difference in the fps compared to what it was with Symbian Anna and QGLWidget, so I’ll just leave it like this.I don’t know if the official Belle release will contain this bug or not. If the bug still exists, then I can make an error report to the Qt’s JIRA." }, { "title": "Pokemon Platinum On gpSP", "url": "/2728/", "categories": "Tips", "tags": "gpsp", "date": "2011-09-21 16:52:32 +0300", "snippet": "You’ll need Platinum ROM (GBA Converted) and VBA (Visual boy advance for windows) for this hackHere’s short description how to do it:Step 1 : Drag the Pokemon Platinum game ROM, To VBA (visualboy advanced)the emulator should open starting the gameStep 2 : Click Options on the top left corner, hover you’re mouse over emulator, then save type it normal will be on Flask 64K Change it, click on Flask 128KStep 3 : Start playing the game (Z = A//X=B Space speeds up the game) make your character name and go all the way until where you wake up from your dream. once your inside your room in the game press Enter and go down to Save and press Z and save the game. When you do this, the saved file should appear on your desktop named “Pokemon platinum GBA version.sav”Step 4 : Tranfer the VBA bios file to phone (and set it later at gpsp file settings)Step 5 : Transfer the Save file to your ROM folder with the same name as the ROM into your phone. For example if the game is named as “Pokemon_platinum.gba”, then save the save file as “Pokemon_platinum.sav”Open gpsp4Symbian, set the new bios and play Pokemon Platinum (PS. You cant make a new game, just press continue you can make multiple save files, you won’t ever need to make a new game because you didn’t even start )Thanks for Mshadowzzz at http://www.sinfuliphone.com/showthread.php?t=72188" }, { "title": "iControlPad support libarary for Qt", "url": "/2710/", "categories": "Qt Development", "tags": "iControlPad, meego, Symbian", "date": "2011-09-03 11:44:47 +0300", "snippet": "The iControlPad didn’t work in keyboard mode with Symbian devices, so I decided to make my own support library for it. The iControlPad is working on SPP mode as default, and that mode support also the analog nubs, so I decided to write support for it.You can get the support library from GitHub: https://github.com/Summeli/iCP4QtIntegrating the library to your projectYou only need to include the iCP4Qt pri file inside your project fileinclude (iCP4Qt.pri)Connecting to the iControlPadConnecting to the iControlPad is easy. Crete the iControlpad client, and then call connect:client = new iControlPadClient(this); //the keyEvents will be delivered to the parentclient-&amp;gt;discoverAndConnect( iControlPadClient::iCPReadDigital );Once connected, whe library will emit singal:void connectedToiControlPad();And if the iControlPad was not found, then it’ll emitvoid iControlPadNotFound();Receiving keypress eventsThe key events are delivered via Qt’s standard event handler, so you can receive keyevents by implementing the keyevents in you objectvoid keyPressEvent( QKeyEvent * event);void keyReleaseEvent(QKeyEvent* event);The analog nubs are delivered via analogNubsUpdated eventvoid analogNubsUpdated( qint8 l_x, qint8 l_y, qint8 r_x, qint8 r_y );where l_x and l_r are the left nub coordinates and r_x and r_y are the right nub coordinates. Where +32 is full down or full right, and -32 is full up or full left. 0,0 is center.Meego supportI’m developing this with N950 and it seems to be working pretty well.Symbian SupportI’m having some trouble with the Symbian support. I’m building with SymbianSR1Qt474 and with QtMobility 1.2, which is “not yet mature enough for ovi store”, so it probably has some issues on it. Everything is build on top of QtMobility APIs so the Symbian should also be supported when the QtMobility 1.2 is officially distributed to the Symbian devices." }, { "title": "iControlPad supported by AntSnes for Meego", "url": "/2705/", "categories": "Meego Development", "tags": "", "date": "2011-08-29 20:00:52 +0300", "snippet": "I just got iControlPad http://icontrolpad.com/ and it seems to be without any problems on my N950 🙂Here’s short instructions how to use it: Start the iControlPad in keyboard mode (press A in startup) Run the bluetooth pairing from the phone Settings/Bluetooth/Bluetooth devices/ and then select the iControlPad and set it as trusted device Run the keyConfig from AntSnes under controls/ Run KeyConfig enjoy iControlPadThe Symbian is not yet supported, but I’m working on it 😉" }, { "title": "AntSnes 0.8.6 for Meego", "url": "/2682/", "categories": "Meego", "tags": "AntSnes, meego, N950", "date": "2011-07-27 20:31:34 +0300", "snippet": "The fist working AntSnes build for Meego is ready and it’s running on my N950. AtnSnes is Snes emulator for Meego. It is actually based on DrPocketSNES version 6.4.4, which in turn is based on snes9x 1.39I’ll add this to the public meego repository when I have some more time (build.pub.meego.com). In the mean while you can download it from here.Download AntSnes debian package: AntSnes v 0.8.6 for Meego (5904 downloads) Sources available on github: https://github.com/Summeli/AntSnes/tree/Meego" }, { "title": "Disabling Swipe from a Fullscreen Game", "url": "/2669/", "categories": "Meego Development", "tags": "meego, swipe", "date": "2011-07-19 17:03:28 +0300", "snippet": "The swipe is really annoying feature in fullscreen gaming (antsnes for example). Instead of controlling the game you might end up swiping the game into the background, which is not cool. Luckily the swipe can be disabled quite easily from QWidget based classes.Here’s how you can disable the swipe:void disableSwipe(){ QWidget * activeWindow = QApplication::activeWindow(); Display *dpy = QX11Info::display(); Atom atom; unsigned int customRegion[4]; customRegion[0] = 0; customRegion[1] = 0; customRegion[2] = 854; customRegion[3] = 480; atom = XInternAtom(dpy, &quot;_MEEGOTOUCH_CUSTOM_REGION&quot;, False); XChangeProperty(dpy, activeWindow-&amp;gt;effectiveWinId(), atom, XA_CARDINAL, 32, PropModeReplace, reinterpret_cast&amp;lt;unsigned char *&amp;gt;(&amp;amp;customRegion[0]), 4);}And here’s an example of enabling it:void enableSwipe(){ QWidget * activeWindow = QApplication::activeWindow(); Display *dpy = QX11Info::display(); Atom atom; atom = XInternAtom(dpy, &quot;_MEEGOTOUCH_CUSTOM_REGION&quot;, False); if(XDeleteProperty(dpy, activeWindow-&amp;gt;effectiveWinId(), atom) &amp;lt; 0){ qWarning(&quot;XDeleteProperty for _MEEGOTOUCH_CUSTOM_REGION returns &amp;lt;0&quot;); }}" }, { "title": "Compiling with QtSDK, Madde and MinGW Makefiles", "url": "/2650/", "categories": "Meego Development", "tags": "compiling, gcc, madde, MinGW, Qt Development, QtSDK", "date": "2011-07-15 17:31:56 +0300", "snippet": "I received N950 from Nokia this monday, and I started porting the antsnes to Meego right away.I decided to compile my emulators for Meego in the same way as I did for Symbian. I’m creating a static lib from the emulator core, and then I’m linking into that static lib from my UI code. The idea in here is that, I can make all kinds of special tricks when compiling the emulator core, and then use the standard Qt’s pro-file to compile the UI part. To accomplis this, I made a similar MinGW makefile for Madde, as I used with Symbian.INSTALLATIONHere are the instructions to use this environment. Install MSYS Set environment variable MADDE_PATH to point into your Madde installation. It should point into it in msys format, for example /e/QtSDK/MaddeBUILDING WITH THE MAKEFILEYou’ll need two files: Makefile and config.mk inmyapp/gms path. You should also make folders myapp/gms/dist/gcce andmyapp/gms/obj/gcce .After all these done, you could change your working directory into the build home by “cd /c/myapp/gms“. Then use the following commands to build. - “make debug” will do the debug build, “make release” will do the release build “make clean” will do the cleanA sample of config.mk is shown on below. The syntax is pretty easy to undertand, no big suprises in herePROJECT_NAME = myprojectUSERINCLUDE = ../incCXXSRCS = \\ myapp.cpp \\ $(NULL)CSRCS = \\ main.c \\ $(NULL)ASRCS = \\ my_asm_optimized_source.S \\ $(NULL)And here’s a sample of a MakefileMADDE_GCC_INSTALL_PATH =$(MADDE_PATH)/toolchains/arm-2009q3-67-arm-none-linux-gnueabi-i586-mingw32msvc/arm-2009q3-67/binMADDE_INCLUDE = $(MADDE_PATH)/sysroots/harmattan-nokia-meego-arm-sysroot-1122-slim/usr/includePATH := $(MADDE_GCC_INSTALL_PATH):$(PATH)SYSINCLUDE = $(MADDE_PATH)/sysroots/harmattan-nokia-meego-arm-sysroot-1122-slim/usr/lib/gcc/arm-linux-gnueabi/4.4/include \\$(MADDE_INCLUDE)#Macros for compilation processGCC_MACRO = -D__GCCE__ -D__MARM__ -D__MARM_ARMV5__ -D__EABI__CPP_MACRO = -D__SUPPORT_CPP_EXCEPTIONS__EXE_MACRO = -D__EXE__REL_MACRO = -DNDEBUGDEB_MACRO = -D_DEBUGUNICODE_MACRO = -D_UNICODEGCC_WARNING_FLAGS = -Wall -Wno-unknown-pragmasCPP_ARGS = -undef -M -nostdinc# pathsSRC_PATH = ../OBJ_BASE = objDIST_BASE = distinclude config.mkcheck: @echo &#39;MADDE_PATH is&#39; $(MADDE_PATH) @echo &#39;MADDE_INCLUDE is &#39; $(MADDE_INCLUDE) @echo &#39;MADDE_GCC_INSTALL_PATH is &#39; $(MADDE_GCC_INSTALL_PATH) @echo &#39;PATH is &#39; $(PATH) @echo &#39;===============================================================&#39;preGCC: CC = arm-none-linux-gnueabi-gcc CXX = arm-none-linux-gnueabi-g++ LD = arm-none-linux-gnueabi-ld AS = arm-none-linux-gnueabi-as AR = arm-none-linux-gnueabi-ar DIST_PATH = $(DIST_BASE)/gcce OBJ_PATH = $(OBJ_BASE)/gcce TARGET_MACRO = $(GCC_MACRO) $(GCC_WARNING_FLAGS)preDEBUG: COMPFLAGS = -march=armv7-a -O0 -mapcs -pipe -nostdinc -c -g \\ -MD $(DEB_MACRO)preREL: COMPFLAGS = -march=armv7-a -O2 -mapcs -pipe -nostdinc -c \\ -MD $(REL_MACRO) -include $(EPOCROOT2)/include/gcce/gcce.hpreALL: CFLAGS += $(COMPFLAGS) $(UNICODE_MACRO) $(TARGET_MACRO) \\ $(EXE_MACRO) $(addprefix -D ,$(PRJ_MACRO)) \\ -I $(SRC_PATH) $(addprefix -I ,$(USERINCLUDE)) $(addprefix -I ,$(SYSINCLUDE)) CXXFLAGS = $(CFLAGS) -Wno-ctor-dtor-privacy -x c++ $(CPP_MACRO) C_OBJS = $(patsubst %.c,$(OBJ_PATH)/%.o,$(CSRCS)) CXX_OBJS = $(patsubst %.cpp,$(OBJ_PATH)/%.o,$(CXXSRCS)) A_OBJS = $(patsubst %.S,$(OBJ_PATH)/%.o,$(ASRCS)) BIN_TARGET = $(DIST_PATH)/$(PROJECT_NAME).a ASFLAGS = -mfloat-abi=soft COPYLIB = cp $(DIST_PATH)/$(PROJECT_NAME).a ../$(PROJECT_NAME).a$(CXX_OBJS): $(OBJ_PATH)/%.o : $(SRC_PATH)/%.cpp $(CXX) $(CXXFLAGS) -o $@ $&amp;lt;$(C_OBJS): $(OBJ_PATH)/%.o : $(SRC_PATH)/%.c $(CC) $(CFLAGS) -o $@ $&amp;lt;$(A_OBJS): $(OBJ_PATH)/%.o : $(SRC_PATH)/%.S $(CC) -c -o $@ $^$(BIN_TARGET): $(C_OBJS) $(CXX_OBJS) $(A_OBJS) $(AR) rsc $(BIN_TARGET) $(C_OBJS) $(CXX_OBJS) $(A_OBJS) $(COPYLIB)cleang: check preGCC preALL rm -rf $(C_OBJS) $(CXX_OBJS) $(A_OBJS) rm -rf $(BIN_TARGET)cleanw: checkbuildw: checkclean: cleangdebug: check preGCC preDEBUG preALL $(BIN_TARGET)release: check preGCC preREL preALL $(BIN_TARGET)DEBUGGINGThe QtCreator seems to be able to find the code without any help, so no special tricks required in here." }, { "title": "Playing NES ROMs with gpSP", "url": "/2613/", "categories": "Tips", "tags": "gpsp, nes", "date": "2011-07-10 12:32:59 +0300", "snippet": "Playing NES ROMs with gpSPYou can play some NES games with gpsp with the help of the PocketNES. You can convert the NES ROMs into GBA ROMs with following process. Download the PocketNes MenuMaker and PocketNES.gba files into your pc. Set the PocketNES.GBA file in the MenuMaker settings use the MenuMaker to pach a NES ROM into GBA ROM.I tested this only with few games, and I know that it works at least on some level with some ROMs. No guarantees 😉Please do not add NES games to the gpsp compatibility list. It’s primary a GBA emulator after all." }, { "title": "Patching ROMs for gpSP", "url": "/2588/", "categories": "Tips", "tags": "gpsp", "date": "2011-07-06 21:43:33 +0300", "snippet": "Patching unworking ROMs for gpSPYou can get at least Super Mario Advance 4 and Mario and Luigi Superstar Saga (crashes often if you don’t mute the sound) are working with EZ4 GBA ROM Patcher utility. Change Flash_type and 64kb rom size. You can download the EZ4 tool from http://www.ezflash.cn/software.htm#ez4I’m pretty sure that the rom patcher utility can help you with some other ROMs too.You can also update the gpSP compatiblity lists with the games that work with these patch and make a comment about the patch with the patcher utilityYou can find the gpSP compatibility lists at gpSP wiki page:https://github.com/Summeli/gpSP4Cute/wiki" }, { "title": "AntSnes 0.86 for Symbian^3: fixed volumecontrol slider &amp;#038; fullscreen for E6", "url": "/2581/", "categories": "Symbian Anna, Symbian^3", "tags": "AntSnes", "date": "2011-07-01 17:06:44 +0300", "snippet": "AtnSnes is Snes9x emulator for Symbian. It is actually based on DrPocketSNES version 6.4.4, which in turn is based on snes9x 1.39The new AntSnes comes with multitouch and with new transparent keys. You’ll need a Symbian^3 based phone to run this (N8, C7, E7 etc..). The old S60 5th edition is not supported by this version anymore. S60 5th edition users should use AntSnesQt 0.7What’s new** fixed the volume control slider Added fullscreen support for E6Known issues: Mounted shares(Dropbox etc.) breaks the filemanger, so do not use mounted shares. Does not work on Nokia 500, since it doesn’t have GPU.Installation:Just download and install. The installer contains a smartinstaller which will download and install Qt 4.7.3 for you if you don’t have it yet.Download:Download the AntSnes 0.8.5 with the smart-installer: AntSnes v 0.8.6 (24408 downloads) Sources are available on Github: http://github.com/Summeli/AntSnesRead this before posting comments: Do NOT Ask where to find ROMs / Bios. Asking about these will just get you banned!" }, { "title": "gpSP v. 0.7 for Symbian^3", "url": "/2520/", "categories": "Symbian Anna, Symbian^3", "tags": "gpsp", "date": "2011-06-21 22:45:56 +0300", "snippet": "the gpSP is a gameboy advance emulator originally written by Exophase. And now it’s ported to the Symbian OS!This version supports only Symbian^3 phones (N8, E7 etc.). The S60 5th edition users should use the older gpsp 0.6.5 for S60 5th editionWhat’s new: Support for Symbian^3 Better Audio alpha channel for keys is now configured at video section (not in controls panel) 8-directional / 4 directional DPAD Hidden A+B button areas save/load states is now workingControls: You can choose between 8-directional and 4-directional DPads. You can add hidden A+B button areas, to press both of them at once.know issues: Mounted shares(Dropbox etc.) breaks the filemanger, so do not use mounted shares. It’s a gpsp port, so see the gpsp compatibility list before complaining about non-working ROMs the emulator crashes if you try to load a ROM without setting the BIOS there are some limitations in the ZIP file support, so maybe you have to upzipt the ROMs The ZIP files seem to be eating quite a lot of RAM, so If ROM doesn’t work, try extracting it. Does not work on Nokia 500, since it doesn’t have GPU.ZIP limitations WinZip Roms ziped in the WinZip Maximum (PPMd) format WILL NOT work. Roms ziped in the WinZip Maximum (bzip2) format WILL NOT work Roms ziped in the WinZip Maximum (Enhanced Deflate) format WILL NOT run Roms ziped in the WinZip Normal format WILL run Roms ziped in the WinZip Fast format WILL run. Roms ziped in the WinZip Super Fast format WILL run. Roms ziped in the WinZip None format WILL run.Installation:Just download and install. The installer contains a smartinstaller which will download and install Qt 4.7.3 for you if you don’t have it yet. The installer might take some time, so be patient 😉Download:Download the gpsp4Symbian: gpsp_v07_for_symbian^3 (58652 downloads) Sources are available on Github: https://github.com/Summeli/gpSP4CuteThe Bios:Remember to set the correct bios before loading ROMs. Make sure to get an authentic one , it’ll be exactly 16384 bytes large and should have the following md5sum “a860e8c0b6d573d191e4ec7db1b1e4f6”. The Bios extension should be .binProject Wiki page:https://github.com/Summeli/gpSP4Cute/wikiCompatibility list:**Compatibility list for Symbian^3 can be found at:https://github.com/Summeli/gpSP4Cute/wiki/gpSP-for-Symbian%5E3-compatibility-listRead this before posting comments:** Do NOT Ask where to find ROMs / Bios. Asking about these will just get you banned!" }, { "title": "gpsp v. 0.6.5 Better Audio", "url": "/2557/", "categories": "S60 5th edition", "tags": "gpsp", "date": "2011-06-21 22:45:45 +0300", "snippet": "the gpSP is a gameboy advance emulator originally written by Exophase. And now it’s ported to the Symbian OS! This version is only for S60 5th edition. Symbian^3 users should use gpsp 0.7 for Symbian^3 What’s new: Better Audio! save/load states is now workingknow issues: not working on Symbian^3 based devices such as N8 It’s a gpsp port, so see the gpsp compatibility list before complaining about non-working ROMs the emulator crashes if you try to load a ROM without setting the BIOS there are some limitations in the ZIP file support, so maybe you have to upzipt the ROMs The ZIP files seem to be eating quite a lot of RAM, so If ROM doesn’t work, try extracting it. Samsung blit fails when “keep aspect ratio” is ticked off N97 CFW: You can not use touch + call buttons at the same time with this firmware.ZIP limitations WinZip Roms ziped in the WinZip Maximum (PPMd) format WILL NOT work. Roms ziped in the WinZip Maximum (bzip2) format WILL NOT work Roms ziped in the WinZip Maximum (Enhanced Deflate) format WILL NOT run Roms ziped in the WinZip Normal format WILL run Roms ziped in the WinZip Fast format WILL run. Roms ziped in the WinZip Super Fast format WILL run. Roms ziped in the WinZip None format WILL run.Installation:Same process as with the AntSnes:1. First Install Qt 4.6.3 binaries into your phone Nokia users can just download and install this : Qt 4.6.3 for S60 5th edition (24771 downloads) Samsung users: Download the Qt packages from http://www.olcso-tarhely.com/faenil/Qt_4.7.3_libs.zip Sony Ericsson users: You can get the official Qt installation package from: Qt 4.6.3 for SE devices (3274 downloads) 2. Download the gpsp4symbian.sis3. gpsp4Symbian requires the SWEvent capability. The SwEvent is required for key mapping: Now you can map call/end call etc. buttons for the gpsp usage. Therefore the following step is required to install the SW.Go to SymbianSigned and sign the AntSnesQt sis for your own phone IMEI.Step 1. Register to symbian signed https://www.symbiansigned.com/ Gmail / Hotmail email adresses are banned from the symbian signed site, so you must use some other email service provider.Step 2. Sign the sis-file by yourself with the symbian signed web UI. Your Phone IMEI (you can obtain it digiting *#06# on your phone) Your EMAIL Address (Nokia’s email address is working) gpsp4Symbian SIS PackageAnd then the symbiansigned should email you the signed gpsp4Symbianfor your phone. This package will be installable ONLY on your phone. This procedure works for all Symbian S60V5 Phones. I had also to change to date on the phone into yesterday to get it working..The alternative method is to hack your phone! You can find pretty good instructions from MameXM download site. (scroll to the bottom of page: Signing &amp;amp; Installing).Download:Download the gpsp4Symbian: gpsp_v065 (56818 downloads) Sources are available on Github:https://github.com/Summeli/gpSP4Cute/tree/S60_5th_editionThe Bios:Remember to set the correct bios before loading ROMs. Make sure to get an authentic one , it’ll be exactly 16384 bytes large and should have the following md5sum “a860e8c0b6d573d191e4ec7db1b1e4f6”. The Bios extension should be .binProject Wiki page:https://github.com/Summeli/gpSP4Cute/wikiCompatibility list:Compatibility list for S60 5th edition can be found at:https://github.com/Summeli/gpSP4Cute/wiki/gpsp-for-S60-5th-edition-compatibility-listRead this before posting comments: Do NOT Ask where to find ROMs / Bios. Asking about these will just get you banned!" }, { "title": "Compiling sources with different optimization flags with GCC", "url": "/2551/", "categories": "ARM, Symbian Development", "tags": "", "date": "2011-06-21 22:44:52 +0300", "snippet": "I had some strange problems with some GCC bugs with AntSnes and gpsp. For some reason some source files did not compile correctly with “-O2” optimization flags. A quick way to fix this problem was to compile the objects with problems without optimizations.My quick “hacky” solution was to compile these few files with “-O0” flags into the asm-files from command line, and then include these asm-files from the mmp/makefile into the project.Compiling the sources into asm-listings can be done like this: gcc -O0 -S -c foo.cOf course you’ll get some problems from missing included etc, but that can be solved by adding all the include folders to the gcc with “-include” flag." }, { "title": "Removing the checklib from QtSDK", "url": "/2492/", "categories": "Symbian Development", "tags": "checklib, QtSDK", "date": "2011-06-01 16:58:50 +0300", "snippet": "I think that I said enough about the checklib.exe in my earlier post. I just noticed that the checklib.exe is still fighting against my development in QtSDK 1.1 inside the Symbian^3 SDK.This time I decided to get rid of the checklib for good. I just created an empty textfile and renamed that into checklib.exe and then I overwrite the original checklib.exe at QtSDK\\Symbian\\SDKs\\Symbian3Qt473\\epoc32\\tools with the dummy checklib.exe I just created.Works like a charm. Now back to development –&amp;gt;" }, { "title": "AntSnesQt 0.7.1: Supports Samsung I8910 and SE Satio/Vivaz", "url": "/2495/", "categories": "S60 5th edition", "tags": "AntSnes, i8910", "date": "2011-05-19 18:44:30 +0300", "snippet": "AtnSnes is Snes9x emulator for Symbian. It is actually based on DrPocketSNES version 6.4.4, which in turn is based on snes9x 1.39. This one will only work for S60 5th edition phones. Symbian^3 users, don’t bother trying, the AntSnes 0.8.5 for Symbian^3 should be much better for you.The newest update adds support for Samsung I8910 and Sony Ericsson Sation and Vivaz.Thanks for the Samsung &amp;amp; SE support for faenil http://i8910tuning.comWhat’s new** Works now on Samsung I8910 and SE Satio/Vivaz Fixed manual frameskip ( you’ll still get crashes if you change it away from AUTO with Audio ON, so using that option is not recommended) Fixed a crash: “if no ROM was selected and you pressed a continue the emu crashed.”Know issues: PAL ROMs do not work’ The volume control slider works only if you drag it into new position (tapping a new level doesn’t work)Installation:1. Qt 4.7.3 is required. Nokia Users: Download Install QT 4.7.3 for S60 5th edition (5049 downloads) and Qt Mobility 1.1.3 for S60 5th edition (3412 downloads) Samsung &amp;amp; **Sony-Ericsson Users:** faenil has made a package for you guys. You can download it at: http://www.olcso-tarhely.com/faenil/Qt_4.7.3_libs.zip (QtMobility is not required for AntSnes)2. Download the AntSnesQt.sis3. AntSnesQt requires the SWEvent capability. The SwEvent is required for key mapping: Now you can map call/end call etc. buttons for the AntSnes usage. Therefore a new step is required to install the SW.Go to SymbianSigned and sign the AntSnesQt sis for your own phone IMEI.Step 1. Register to symbian signed https://www.symbiansigned.com/ Gmail / Hotmail email adresses are banned from the symbian signed site, so you must use some other email service provider.Step 2. Sign the sis-file by yourself with the symbian signed web UI. Your Phone IMEI (you can obtain it digiting *#06# on your phone) Your EMAIL Address (gmail hotmail etc. are banned, however Nokia’s email address is working) AntSnesQt SIS PackageAnd then the symbiansigned should email you the signed AntSnesQt for your phone. This package will be installable ONLY on your phone. This procedure works for all Symbian S60V5 Phones.The alternative method is to hack your phone! You can find pretty good instructions from MameXM download site. (scroll to the bottom of page: Signing &amp;amp; Installing).4. You might get warning like “not compatible with phone” just keep on going, it might still work 😉Download:Download the AntSnesQt: AntSnesQt v071 (19926 downloads) Sources are available on Github: http://github.com/Summeli/AntSnes (remember to choose the S60 5th edition branch)Read this before posting comments: Do NOT Ask where to find ROMs / Bios. Asking about these will just get you banned!" }, { "title": "AntSnes 0.8.5 for Symbian^3", "url": "/2453/", "categories": "Symbian^3", "tags": "AntSnes, N8", "date": "2011-05-17 16:48:55 +0300", "snippet": "AtnSnes is Snes9x emulator for Symbian. It is actually based on DrPocketSNES version 6.4.4, which in turn is based on snes9x 1.39The new AntSnes comes with multitouch and with new transparent keys. You’ll need a Symbian^3 based phone to run this (N8, C7, E7 etc..). The old S60 5th edition is not supported by this version anymore. S60 5th edition users should use AntSnesQt 0.7What’s new You can now adjust the alpha channel for keys alpha channel for keys is now configured at video section (not in controls panel) Multiple blit options (fullscreen &amp;amp; keep aspect ratio) (see video settings) You can map multiple snes-keys into one button The emulation is now stopped when the app goes into background, so it won’t drain your battery even if you forget it on. Fine tuned the onscreen buttons a bit. I think that they work a bit better now… standalone package removedKnown issues: Mounted shares(Dropbox etc.) breaks the filemanger, so do not use mounted shares. The volume control slider works only if you drag it into new position (tapping a new level doesn’t work)Installation:Just download and install. The installer contains a smartinstaller which will download and install Qt 4.7.3 for you if you don’t have it yet.Download:Download the AntSnes 0.8.5 with the smart-installer: AntSnes v 0.8.5 (18429 downloads) Sources are available on Github: http://github.com/Summeli/AntSnesRead this before posting comments: Do NOT Ask where to find ROMs / Bios. Asking about these will just get you banned!" }, { "title": "AntSnes video", "url": "/2420/", "categories": "Video", "tags": "AntSnes, N8", "date": "2011-05-14 21:45:03 +0300", "snippet": "Here’s a short youtube video of AntSnes running on my N8.Get AntSnes 0.8.1 now 🙂" }, { "title": "AntSnesQt 0.7: Audio update for S60 5th edition", "url": "/2386/", "categories": "S60 5th edition", "tags": "", "date": "2011-05-12 23:51:47 +0300", "snippet": "AtnSnes is Snes9x emulator for Symbian. It is actually based on DrPocketSNES version 6.4.4, which in turn is based on snes9x 1.39. This one will only work for S60 5th edition phones. Symbian^3 users, don’t bother trying, the AntSnes 0.8.1 for Symbian^3 should be much better for you.The new AntSnesQt comes with the audio fixes from clpalmer.What’s new Audio is now working fixed the crash after loading a second ROMKnow issues: PAL ROMs do not workInstallation:1. Qt 4.7.3 is required. The easies way to get the Qt installed is to install Flowd from ovistore: http://store.ovi.com/content/1182202. Download the AntSnesQt.sis3. AntSnesQt requires the SWEvent capability. The SwEvent is required for key mapping: Now you can map call/end call etc. buttons for the AntSnes usage. Therefore a new step is required to install the SW.Go to SymbianSigned and sign the AntSnesQt sis for your own phone IMEIusing free Open Signed Online option https://www.symbiansigned.com/app/page/public/openSignedOnline.do this operation should be free of any charge.Read carefully the instructions on the SymbianSigned site.You must give them Your Phone IMEI (you can obtain it digiting *#06# on your phone) Your EMAIL Address AntSnesQt SIS PackageAnd then the symbiansigned should email you the signed AntSnesQt for your phone. This package will be installable ONLY on your phone. This procedure works for all Symbian S60V5 Phones.The alternative method is to hack your phone! You can find pretty good instructions from MameXM download site. (scroll to the bottom of page: Signing &amp;amp; Installing).4. You might get warning like “not compatible with phone” just keep on going, it might still work 😉Download:Download the AntSnesQt: AntSnesQt v071 (19926 downloads) Sources are available on Github: http://github.com/Summeli/AntSnes (remember to choose the S60 5th edition branch)Read this before posting comments: Do NOT Ask where to find ROMs / Bios. Asking about these will just get you banned!" }, { "title": "AntSnes 0.8.1 for Symbian^3", "url": "/2384/", "categories": "Symbian^3", "tags": "AntSnes, N8", "date": "2011-05-11 18:47:02 +0300", "snippet": "AtnSnes is Snes9x emulator for Symbian. It is actually based on DrPocketSNES version 6.4.4, which in turn is based on snes9x 1.39The new AntSnes comes with multitouch and with new transparent keys. You’ll need a Symbian^3 based phone to run this (N8, C7, E7 etc..). The old S60 5th edition is not supported by this version anymore.Thanks for clpalmer for audiofixes and multitouch support!What’s new Audio is now better The bugs in the keys are now fixed Added an option for 4 directions D-PAD You can hide only the overlapping keys with the screen.Known issues: Mounted shares breaks the filemanger, so do not use mounted shares.Installation:There are two different installation packages now. One with the nokia’s smartinstaller that should install the Qt 4.7.3 for you, if you don’t have it yet, and one standalone package if you’re having trouble with the smartinstaller and you want to install the Qt 4.7.3 by yourself.Download:Download the AntSnes 0.8.1 with the smart-installer: AntSnes v081 with smartinstaller (25457 downloads) Download the AntSnes 0.8.1 standalone : AntSnes v081 standalone (17546 downloads) Sources are available on Github: http://github.com/Summeli/AntSnesRead this before posting comments: Do NOT Ask where to find ROMs / Bios. Asking about these will just get you banned!" }, { "title": "AntSnes 0.8 for Symbian^3", "url": "/2338/", "categories": "Symbian^3", "tags": "AntSnes, N8, symbian^3", "date": "2011-05-10 22:58:51 +0300", "snippet": "AtnSnes is Snes9x emulator for Symbian. It is actually based on DrPocketSNES version 6.4.4, which in turn is based on snes9x 1.39The new AntSnes comes with multitouch and with new transparent keys. You’ll need a Symbian^3 based phone to run this (N8, C7, E7 etc..). The old S60 5th edition is not supported by this version anymore.Thanks for clpalmer for audiofixes and multitouch support!What’s new Audio is working Multitouch Transparent keys on top of the UI Symbian^3 supportInstallation:just download and install. This version will also automatically install Qt 4.7.3 for you, if it’s required.Download:Download the AntSnes 0.8: AntSnes v081 with smartinstaller (25457 downloads) Sources are available on Github: http://github.com/Summeli/AntSnesRead this before posting comments: Do NOT Ask where to find ROMs / Bios. Asking about these will just get you banned!" }, { "title": "Fast blit with OpenGl ES and Qt", "url": "/2324/", "categories": "Qt Development", "tags": "OpenGL ES, Qt4, scaling", "date": "2011-05-10 22:02:23 +0300", "snippet": "In my previous post I wrote about blit with opengl es 2.0 texture upload. However I noticed that using just Qt’s QGLWidget and implementing only the paintEvent is as fast as the texture upload with pure OpenGL ES API.I guess that QGLWidget is making the drawing via OpenGL, since the performance seems to be equal to the texture blitting with the standard OpenGL ES API and texture uploading.The whole blit is taking less than 6ms, so it’s good enough for my emulator ports. The memcopy could probably be optimized away from the blit, but that’s not the bottleneck at least in the current AntSnes implementation.Here’s an example from the AntSnes how to blit with QGLWidget and paintevent.void AntSnesQt::blit(int width, int height){ if (buf != NULL) { delete buf; buf = NULL; } //memcopy into the new buffer, which will be blit to to screen in the paintEvent. buf = new QImage(GFX.Screen, width, height, GFX.RealPitch, QImage::Format_RGB16); //calling the repaint will cause a new paintEvent into the widget repaint();}void AntSnesQt::paintEvent(QPaintEvent *){ QPainter painter; painter.begin(this); if (buf != NULL) { QRect target(96, 0, 448, 360); QRect source(0, 0, buf-&amp;gt;width(), buf-&amp;gt;height()); painter.drawImage(target, *buf, source); } painter.end}" }, { "title": "Fast Blit with OpenGL ES 2.0 and texture uploading", "url": "/2081/", "categories": "OpenGL ES, Qt Development", "tags": "OpenGL ES, Qt4, scaling", "date": "2011-05-10 22:02:11 +0300", "snippet": "OpenGL ES 2.0 is fully shader based, which means you can’t draw any geometry without having the appropriate shaders loaded and bound. This means there is more setup code required to render than there was in OpenGL ES 1.1 with fixed pipeline.Setting up the OpenGL ES 2.0 pipeline.void glBlitter::initializeGL (){ GLuint fragmentShader; GLuint vertexShader; GLint linked; glDepthFunc(GL_ALWAYS); glDisable(GL_DEPTH_TEST); glDisable(GL_STENCIL_TEST); glDisable(GL_CULL_FACE); //Vertex shader QString srcVertShader = &quot;attribute vec4 a_position; \\n&quot; &quot;attribute vec2 a_texCoord; \\n&quot; &quot;varying vec2 v_texCoord; \\n&quot; &quot;void main() \\n&quot; &quot;{ \\n&quot; &quot; gl_Position = a_position; \\n&quot; &quot; v_texCoord = a_texCoord; \\n&quot; &quot;} \\n&quot;; //fragment shader QString srcFragShader = &quot;precision mediump float; \\n&quot; &quot;varying vec2 v_texCoord; \\n&quot; &quot;uniform sampler2D s_texture; \\n&quot; &quot;void main() \\n&quot; &quot;{ \\n&quot; &quot; gl_FragColor = texture2D( s_texture, v_texCoord );\\n&quot; &quot;} \\n&quot;; // Create the program object m_program = glCreateProgram(); if(!m_program) return; // Load the shaders vertexShader = loadShader(qPrintable(srcVertShader), GL_VERTEX_SHADER); fragmentShader = loadShader(qPrintable(srcFragShader), GL_FRAGMENT_SHADER); glAttachShader(m_program, vertexShader); glAttachShader(m_program, fragmentShader); // Link the program glLinkProgram(m_program); // Check the link status glGetProgramiv(m_program, GL_LINK_STATUS, &amp;amp;linked); if(!linked){ GLint infoLen = 0; glGetProgramiv(m_program, GL_INFO_LOG_LENGTH, &amp;amp;infoLen); if(infoLen &amp;gt; 1){ char* infoLog = (char*)malloc(sizeof(char) * infoLen); glGetProgramInfoLog(m_program, infoLen, NULL, infoLog); qDebug() &amp;lt;&amp;lt; infoLog; free(infoLog); } glDeleteProgram(m_program); return; } m_posLoc = glGetAttribLocation ( m_program, &quot;a_position&quot; ); m_texLoc = glGetAttribLocation ( m_program, &quot;a_texCoord&quot; ); // Get the sampler location m_samplerLoc = glGetUniformLocation ( m_program, &quot;s_texture&quot; ); //Init textures to plot in the paintgl function InitTextures(); glClearColor(.3,.4,.6,1);}The actual drawing is done in the QGLWidget’s paintGL function. The OpenGL ES 2.0 guild line says that you should use upload textures with sizes of power of two. However you don’t have blit the whole texture. You can create a texCoords matrix for using only a part of the uploaded texture. There’s a really good tutorial for texturemapping in iPhone Development Blog. It’s for iPhone and it’s for OpenGL ES 1.1 or so, but the vector math in binding the textures etc. is still valid with OpenGL ES 2.0.Here’s my example of painGL and texture blitting.void glBlitter::paintGL(){ glClear( GL_COLOR_BUFFER_BIT ); // Use the program object glUseProgram ( m_program ); glVertexAttribPointer( m_posLoc, 2, GL_FLOAT, GL_FALSE, 2 * sizeof(GLfloat), vertexCoords ); glVertexAttribPointer( m_texLoc, 2, GL_FLOAT, GL_FALSE, 2*sizeof(GLfloat), texCoords ); glEnableVertexAttribArray( m_posLoc ); glEnableVertexAttribArray( m_texLoc ); glBindTexture(GL_TEXTURE_2D, m_textures[0] ); //copy the emulator&#39;s virtual framebuffer into a texture copyScreen( m_ScreenPtr, BaseAddress ); //upload the texture glTexSubImage2D( GL_TEXTURE_2D,0, 0,0, 256,256, GL_RGB,GL_UNSIGNED_SHORT_5_6_5, m_ScreenPtr ); //sampler texture unit to 0 glUniform1i( m_samplerLoc, 0 ); glDrawElements( GL_TRIANGLES, 6, GL_UNSIGNED_SHORT, indices );}You can also download the whole glBlitter.cpp from here: glBlitter.cpp" }, { "title": "Generic Makefile Build Chain for Symbian OS v. 1.1", "url": "/2247/", "categories": "MinGW buidchain", "tags": "Debugging, MinGW, msys, porting", "date": "2011-05-03 18:10:35 +0300", "snippet": "The build chain was originally made by Harry Li. I just continued the project and added support for staticlibrary linking, debugging etc.What’s new: Support for QtCreator and Nokia QtSDK. GCCE was updated into 4.x in QtSDK, and that’s now being used in new build scripts.MOTIVATION The C preprocessor can be used much better with makefile than with abld build. You can not compile a project relying heavily on c preprocessor with abld build, so the makefile build is really an essential tool for those projects. It makes porting software from linux based systems easier. The GCCE is just a GCC build for Symbian so now you can use GCC (hopefully almost same version) and same the build rules for the port in Symbian also. You can create static libs from the code that is hard to port (you need some custom compiling tricks), and then link into it from mmp-files or from Qt project files. The generic makefile build is also faster than the abld build. You could (hopefully) also make it faster with “-j” option with the future versions of GCCEINSTALLATIONHere are the instructions to use this environment. Install MSYS The script should be executed from \\gms directory. The script also expects to have \\dist\\gcce and \\obj\\gcce directories under the gms directory, so you should also make these folders. The OS_HRH part doesn’t seem to work in the defines.mk. I solved this my replacing the include statement in epoc32\\gcce\\gcce.h to #if defined(__PRODUCT_INCLUDE__) #include &amp;lt;variant/Symbian_OS.hrh&amp;gt; //for MinGW //#include __PRODUCT_INCLUDE__ //quick hack #endifBUILDING WITH GENERAL MAKEFILEBuild with this “Gnu Make for Symbian”, you need three files Makefile, defines.mk and config.mk in myapp/gms path. You should also make folders myapp/gms/dist/gcce and myapp/gms/obj/gcce . Also three environment parameters should be set like this: SYMBIAN_SDK_PATH = /c/QtSDK/Symbian/SDKs/Symbian3Qt473/ ACTIVE_PERL = /c/QtSDK/Symbian/tools/perl/bin/perl.exe CC_INSTALL_PATH = /c/QtSDK/Symbian/tools/gcce4/binPlease be noted the first one should contains a trailing slash like classic EPOCROOT environment variable. The second one is the ActivePerl .exe file used by some resource compiler script. The last one is the path to GCCE compiler installation path, without trailing slash. If there are spaces in any of them, please use “\\ ” backslash with a space instead.After all these done, you could change your working directory into the build home by “cd /c/myapp/gms“. Then use the following commands to build. “make debug” will do the debug build, “make release” will do the release build “make clean” will do the clean “make pack” will also do the makesis work.a sample of config.mk is shown on below. The syntax is pretty similar to the mmp file. Note that if you are creating a static library, then you don’t have to define uid’s and libraries to be linked etc (as in mmp-files).PROJECT_NAME = myproject#valid target types are EXE, DLL and LIB(static lib)TARGET_TYPE = EXEUID2 = 0UID3 = 0xDEADBABESECUREID = 0xDEADBABEEPOCSTACKSIZE = 80000EPOCHEAPSIZE = 5000000 64000000CAPABILITY = LocalServices+NetworkServicesSYSINCLUDE = $(EPOCROOT2)/include $(EPOCROOT2)/include/platform $(EPOCROOT2)/include/libcUSERINCLUDE = ../incCXXSRCS = \\ myapp.cpp \\ myApplication.cpp \\ myAppView.cpp \\ myAppUi.cpp \\ myDocument.cpp \\ $(NULL)CSRCS = \\ main.c \\ $(NULL)ASRCS = \\ my_asm_optimized_source.S \\ $(NULL)RSS_TARGETS = $(DIST_PATH)/$(PROJECT_NAME).rsc $(DIST_PATH)/$(PROJECT_NAME)_reg.rscLANG_MACRO = SCSYSLIBRARY = euser.lib avkon.lib eikcore.lib eiksrv.lib apparc.lib estlib.lib efsrv.lib cone.libSTATICLIBRARY = mystaticlib.libCERT = /c/cert/mypro.certKEY = /c/cert/mypro.keyPASS =note that the capabilities are added with a “+” sign in between capabilties. The cert, key and pass variables are for app signing.DEBUGGINGThe QtCreator seems to be able to find the code without any help, so no special tricks required in here.KNOWN LIMITATIONS There is no build for help files, and the svg conversion is a bit limited. However the shouldn’t be any major issues, since you can build these with standard abld symbian build chain. The WINSCW build is not support, nor it never will be. The tool is made primary for porting libraries from Linux to Symbian.MODIFYING THE BUILD ENVIRONMENTModifying the build environment is quite easy, if you have any previous experience of editing Makefiles. You should take a look at Symbian OS post-linker “elf2e32” documentation if you like to change any symbian OS specific values. For example EPOCALLOWDLL data will be “–dlldata” value to the post linker etc.The GCCE documentation can be found from the Codesourcery’s site. Here is link to the GCCE 4.x documentation" }, { "title": "AntSnes for Symbian^3", "url": "/2314/", "categories": "Symbian^3", "tags": "AntSnes, N8, symbian^3", "date": "2011-04-26 07:33:09 +0300", "snippet": "Thanks for clpalmer:——–For those of you who want a better experience on S^3, here’s a modified version of AntSnes that supports multitouch and has full set of on-screen buttons. Also runs much faster, close to 60 FPS w/out sound and usable with it. The audio might sound a bit glitchy at the moment, though, due to some optimizations.This is completely un-official and Summeli can re-release this when he finds time through his proper channels and with the source, but at least here’s something to play with in the meantime.Requirements: S^3 device with Qt 4.7.2 or 4.7.3 libraries installedhttp://www.freefilehosting.net/antsnesforn8——–Update:For those of you who want audio to work a bit better, give this a go:http://www.freefilehosting.net/antsness3byclpalmerWas only trying to get multitouch, full onscreen keyboard and better FPS with my last one so didn’t care that audio was a bit borked.This one should improve audio glitchyness, but might be a bit slower when audio is enabled.Again, not an official release, and Summeli will do that when he sorts his stuff out.——–Yet another update 🙂 This one is to hopefully re-enable hardware key mapping.http://www.mediafire.com/?17yezzpzv8et3kzAgain, wasn’t paying attention to hardware keys when I didn’t the mods as N8 doesn’t really have many you can use anyways. In any case, this should hopefully fix it. The only keys you can map, at least on N8, are the light-press camera key (don’t hard press or you’ll exit) and the volume keys, but the volume keys act wierd because hitting them seems to deliver two sets of key down/up events. You’ll notice that if you hold them, you get a brief press, then a release, then another press until you release it.Hopefully will work better for other keys on keyboard or attached controllers. Let me know if it’s still busted.——–I’ll tweak the buttons a bit, and then I’ll make a new version." }, { "title": "Building Symbian Projects with QtSDK", "url": "/2277/", "categories": "Qt Development, Symbian Development", "tags": "mmp, QtSDK, Symbian", "date": "2011-04-13 16:54:03 +0300", "snippet": "All new Symbian SDKs are now distributed inside the new QtSDK, so that should be my primary build environment. The new QtSDK also includes an updated version of GCCE (4.x), and new sbsv2 build, which is a lot better than the old symbian abld-build. With this tutorial you can still build your old symbian projects from mmp-files.Configuring the new sbsv2 build to the QtSDKHere’s an example of my setEnv.bat. In this case the QtSDK was installed into c-driveSET PATH=C:\\QtSDK\\Symbian\\tools\\sbs\\bin;C:\\QtSDK\\Symbian\\tools\\perl\\bin;C:\\QtSDK\\Symbian\\SDKs\\Symbian3Qt473\\epoc32\\gcc\\bin;C:\\QtSDK\\Symbian\\SDKs\\Symbian3Qt473\\epoc32\\tools;%PATH%SET EPOCROOT=\\QtSDK\\Symbian\\SDKs\\Symbian3Qt473\\SET SBS_MINGW=C:\\QtSDK\\Symbian\\tools\\sbs\\win32\\mingwSET SBS_HOME=C:\\QtSDK\\Symbian\\tools\\sbsSET SBS_GCCE441BIN=C:\\QtSDK\\Symbian\\tools\\gcce4\\bincall C:\\QtSDK\\Symbian\\SDKs\\Symbian3Qt473\\bin\\qtenvS3.batModifying bld.infThe sbsv2 does not understand PRJ_PLATFORMS lists, so you’ll have to remove those. I left only PRJ_MMPFILES definitions in the bld.inf files.Building with sbsv2Here’s a list of couple of useful sbsv2 build commandsbs -c armv5_udeb_gcce                       - debug build with GCCEsbs reallyclean                              - cleans everthingsbs cleanBuilding with qmakeTo build with qmake from command line you’ll only need to run the qtenvs3.bat located at QtSDK\\Symbian\\SDKs\\Symbian3Qt473\\binHere’s a list of couple useful build commands:qmake -spec symbian-sbsv2 - uses sbsv2make debug-gcce - makes debug with GCCEmake distclean - cleans everthingConfiguring the old abld-build to the QtSDKI don’t know why anyone would still like to use the old abld-build, but it still seems to be working with the new QtSDKs too. First add a new device for the QtSDK, and set it into defaultdevices -add C:\\QtSDK\\Symbian\\SDKs\\Symbian3Qt473 C:\\QtSDK\\Symbian\\SDKs\\Symbian3Qt473@Symbian3_Qt473:com.nokia.Symbian3_QtSDK473] Then set the new device as default devices -setdefault @Symbian3_Qt473:com.nokia.Symbian3_QtSDK473 Set the new EPCOROOT set EPOCROOT=\\QtSDK\\Symbian\\SDKs\\Symbian3Qt473\\ build with able-build as you used to." }, { "title": "Removing the checklib from Symbian^3 SBSv1 build chain", "url": "/2171/", "categories": "Symbian Development", "tags": "checklib", "date": "2010-12-19 23:19:03 +0200", "snippet": "According to the Symbian documentation the checklib.exe is a static analysis tool for checking the consistent use of operator new in static libraries linked into dll or exe. This means that you should use the symbian way of operator new with (ELeave), or you should use the standard C++ way of operator new. In Qt apps you are in standard c++ world, and in Avkon apps you’re in Symbian c++ world.The idea of checklib is pretty good. You might run into some troubles with the inconsistent use of new operator in out of memory situations, and debugging these errors can be time consuming. So getting a warning about them feels like a nice feature from the SDK.The problem is that the checklib errors will fail your whole build, if an inconsistency is found (it’s not just a warning).Failing the build doesn’t really make any sense, since it’s a static code analysis tool. I think that I would like the checklib, if it would only give me a warning like “the way you’re using operator new is not consistent, see forum.nokia.com for more info”But unfortunately the checklib will just fail the whole build. The worst part is that the tool itself doesn’t give you any hints what symbol to look at (where the problem is).Here are some common error codes from checklib:checklib error: &quot;foo is incompatible with standard C++&quot;checklib: error: not a COFF object: bad magic.checklib: error: file can not be found.These errors just don’t help me even a bit, and I really don’t care that much about the OOM situations. I’m using a lot of my own memory hacks anyway, so I’m pretty much screwed in OOM anyway.Here’s how you can remove this stupid tool from the SBSv1 build chainOpen files cl_bpabi.pm and cl_codewarrior.pm under \\epoc32\\toolsand modify the lines with:$run_checklib = 1;into:&amp;lt;pre class=&quot;brush: plain; title: ; notranslate&quot; title=&quot;&quot;&amp;gt;$run_checklib = 0;If you already have a project in carbide, and you just found this page by googling the checklib related problems remember also to do the regularabld really cleanbld cleanDouble check also that you don’t have anything related to to your project under \\epoc32\\build directory. If you can find a directory with your project name on it, delete it. You should get a working makefile under the build directory after recreating the project." }, { "title": "What&amp;#8217;s currently working on Symbian^3", "url": "/2161/", "categories": "Symbian Development", "tags": "", "date": "2010-12-18 16:46:40 +0200", "snippet": "I’m still waiting for Nokia to release new Qt libs to get the QGLWidget working on Symbian^3. The QGLWidget is required to the the OpenGL ES based blit working with Qt and Symbian. Nokia already released the sis-files with QGLWidget support http://wiki.forum.nokia.com/index.php/Qt_4.7_for_Symbian%5E3_-_developer_version , but they still haven’t released the libs, so I can not link to the QGLWidget 🙁While waiting for better Symbian^3 support for my stuff you can play with AntSnes 0.72 and with Numpty Physics. You can see the slowness of DirectScreenAccess on them both. I think that even my N97 has faster blit with DSA than N8.I also added a category for Symbian^3 compatible releases." }, { "title": "FAQ", "url": "/1970/", "categories": "Symbian Development", "tags": "AntSnes, gnuboy, gpsp", "date": "2010-11-08 15:37:50 +0200", "snippet": "The purpose of this FAQ is to gather all the questions about my emulator ports. I can see pretty much all of these questions asked on weekly basis, so I made a post for them 🙂Q: rom xx isn’t working, can you fix it?A: My emulators are just ports from other famous emulators, for example gpsp. At very best I could get into the same compatibility list, as the original emulator. On S60 5th edition phones there are also some limitations due to the limited amount of RAM. This might change with Symbian^3 devices since they should have more RAM available. After I have reached to similar compatibility list with the original emulator project, I might try to improve the original emulator too. So far I haven’t got this far with any of my emulator ports 😉Q: All words are written in “WWWW”, and I can not use the emulatorA: this problem is caused by the incompatibility between Qt and custom fonts. You can resolve this issue by removing the custom font.Q: I’m using C6 firmware on 5800, and it the buttons won’t work. can you help?A: This is a know issue with C6 firmware. The emulator is listening to the key events from the phone, and the C6 firmware just does not deliver the key events to the emulator. There’s really nothing that I can do about it.Q: What about the sound?A: I’m working on it. The sound is much more important than the compatibility list.Q: When it’s ready?A: Most of my bug fixes are result of one/two evenings of coding. Usually I don’t work more then few hours for a release (which you can probably guess by looking at the list of updates :). I do these updates whenever I feel like it, not when you want it.Q: Where do I get ROMs / biosA: Do NOT ask it in here. Requesting ROMs / Bios files will just get you banned and ignored.Q: Why gpSP, not visual boy advance, vbagx etc?A: I chose the gpSP because it’s the fastest one with ARM, so it was a logical chose. I also wanted to learn few things about the dynamic recompilation.Q: Is a Nintendo DS emulator possible?A: Short answer is no. Even my 1.8Ghz PC laptop has problems with NDS emulator, so it’s really far, far away.Q: Can you port this xxx software, please?A: You can always ask, but I like to choose my own projects, so the answer is usually NO. Why don’t you port it by yourself?Q: Do you have your N8?A: Yes, I do have my N8, so stop asking 🙂 There’s pretty much to do before the current emulators will be working with Symbian^3. See also the question about when it’s ready." }, { "title": "gnuBoy v.0.5.3 for S60 5th edition", "url": "/2087/", "categories": "S60 5th edition", "tags": "gnuboy", "date": "2010-10-29 16:50:50 +0300", "snippet": "The gnuboy is a gameboy / gameboy color emulator, and now it’s ported for S60 5th edition. This was mainly made for the people who asked for gb / gbc support for gpsp. It was much easier to make by compiling a new emulator for S60 😉What’s new on 0.5.3 Fixed the issues with D-pad support for *.gbc files, so you don’t have to rename these files into .gb anymore.know issues: battery saves are not working, use save states instead SE and Samsung phones are not supported, sorry it’s quite unfinished, waiting for my N8 😉Installation:Same process as with other emus:1. First Install Qt 4.6.3 binaries into your phone Nokia users can just download and install this Download Qt installation package No samsung / SE support in this one 2. Download the gnuboy.sis3. gnuboyrequires the SWEvent capability. The SwEvent is required for key mapping: Now you can map call/end call etc. buttons for the gnuboy usage. Therefore the following step is required to install the SW.Go to SymbianSigned and sign the gnuboy.sis for your own phone IMEIusing free Open Signed Online option https://www.symbiansigned.com/app/page/public/openSignedOnline.do this operation should be free of any charge.Read carefully the instructions on the SymbianSigned site.You must give them Your Phone IMEI (you can obtain it digiting *#06# on your phone) Your EMAIL Address gnuboy SIS PackageAnd then the symbiansigned should email you the signed gnuboy your phone. This package will be installable ONLY on your phone. This procedure works for all Symbian S60V5 Phones. I had also to change to date on the phone into yesterday to get it working..The alternative method is to hack your phone! You can find pretty good instructions from MameXM download site. (scroll to the bottom of page: Signing &amp;amp; Installing).Download:Download the gnuboy: gnuboy (23302 downloads) Sources are available on Github: https://github.com/Summeli/gnuboy4Symbian" }, { "title": "gnuboy v0.5 for Nokia S60 5th edition", "url": "/1980/", "categories": "S60 5th edition", "tags": "gnuboy", "date": "2010-10-13 18:57:43 +0300", "snippet": "The gnuboy is a gameboy / gameboy color emulator, and now it’s ported for S60 5th edition. This was mainly made for the people who asked for gb / gbc support for gpsp. It was much easier to make by compiling a new emulator for S60 😉There’s no support for SE / Samsung. However it could be added by implementing the DSA changes described in my blog post.I have to admit that this is still quite unfinished. I pretty much ran out of time. The N8 is coming and I want to start optimizing all my emulators for Symbian^3. Finally getting to use the new graphics architecture, real MultiTouch etc. I’m sure you all know what I mean 😉know issues: No audio The’re a bug with .gbc extension. Rename your .gbc file into .gb, and you’ll ab able to play gbc games also SE and Samsung phones are not supported, sorry The D-PAD is not fully working. You need to press some other spots before you’re able to press the same button again. I’ll fix this in the next update. it’s quite unfinished, waiting for my N8 😉Installation:Same process as with other emus:1. First Install Qt 4.6.3 binaries into your phone Nokia users can just download and install this Download Qt installation package No samsung / SE support in this one 2. Download the gnuboy.sis3. gnuboyrequires the SWEvent capability. The SwEvent is required for key mapping: Now you can map call/end call etc. buttons for the gnuboy usage. Therefore the following step is required to install the SW.Go to SymbianSigned and sign the gnuboy.sis for your own phone IMEIusing free Open Signed Online option https://www.symbiansigned.com/app/page/public/openSignedOnline.do this operation should be free of any charge.Read carefully the instructions on the SymbianSigned site.You must give them Your Phone IMEI (you can obtain it digiting *#06# on your phone) Your EMAIL Address gnuboy SIS PackageAnd then the symbiansigned should email you the signed gnuboy your phone. This package will be installable ONLY on your phone. This procedure works for all Symbian S60V5 Phones. I had also to change to date on the phone into yesterday to get it working..The alternative method is to hack your phone! You can find pretty good instructions from MameXM download site. (scroll to the bottom of page: Signing &amp;amp; Installing).Download:Download the gnuboy: gnuboy (23302 downloads) Sources are available on Github: https://github.com/Summeli/gnuboy4Symbian" }, { "title": "Numpty Physics for Symbian", "url": "/1891/", "categories": "S60 5th edition, Symbian Anna, Symbian Belle, Symbian^3", "tags": "numptyphysics", "date": "2010-09-25 15:07:58 +0300", "snippet": "The fabulous NumptyPhysics game by Tim Edmonds for Linux and Internet Tablets. It was also one of my favo0rite games on N810, and now it’s ported to your Symbian^1 phones 🙂Numpty Physics is a drawing puzzle game in the spirit (and style?) of Crayon Physics using the same excellent Box2D engine.Keys stylus/finger – draw a new stroke tap proximity sensor – undo last stroke volume up – menu volume down – reset level to initial state long tap left/right corners to get extra menu options (you really don’t need these)InstallationDownload the installation file: Numpty Physics (13471 downloads) Adding more levelsYou can download additional levels from http://numptyphysics.garage.maemo.org/levels/ and then copying them into installation drive:\\data\\numptyphysics.FAQ:How to Close it? 1. Press volume up. Press the cross in the upper right corner.License:NumptyPhysicsCopyright (C) 2008 Tim EdmondsThis program is free software; you can redistribute it and/ormodify it under the terms of the GNU General Public License aspublished by the Free Software Foundation; either version 3 of theLicense, or (at your option) any later version.This program is distributed in the hope that it will be useful, butWITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU General Public License for more details.Port information:**I’ve made some minor changes that change some of the platform-specific behavior and compiled it to run under Symbian OS using SDL port by AnoterGuest.Source code:You can download sources of my port from my Numpty Physics GitHub page. I also made some minor changes into the Symbian SDL port, which you can find from my SDL Page at GitHub.LicenseNumptyPhysicsCopyright (C) 2008 Tim EdmondsThis program is free software; you can redistribute it and/ormodify it under the terms of the GNU General Public License aspublished by the Free Software Foundation; either version 3 of theLicense, or (at your option) any later version.This program is distributed in the hope that it will be useful, butWITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU General Public License for more details." }, { "title": "Using the proximity sensor as a button", "url": "/1900/", "categories": "Symbian Development", "tags": "", "date": "2010-09-25 12:32:24 +0300", "snippet": "The Proximity sensor is usually used to detect when the phone is near of the user’s ear, so the display can be turned off when speaking into the phone. The Symbian OS has an API for the proximity sensor, so it can also be used as a button.My experience from the proximity sensor suggest that you shouldn’t use it when you are needing a high resolution refresh rates for the button( action games), since the API gives updates only few times in a second.The Proximity sensor is located near the ear piece on the phoneUsing the APIThe Proximity sensor can be used via sensor framework. See this forum.nokia example http://wiki.forum.nokia.com/index.php/S60_Sensor_Framework )Initializing the proximity sensor can be done with following snippet CSensrvChannelFinder* SensrvChannelFinder = CSensrvChannelFinder::NewLC(); RSensrvChannelInfoList ChannelInfoList; CleanupClosePushL( ChannelInfoList ); TSensrvChannelInfo mySearchConditions; // none, so matches all. mySearchConditions.iChannelDataTypeId = KSensrvChannelTypeIdProximityMonitor; SensrvChannelFinder-&amp;gt;FindChannelsL(ChannelInfoList,mySearchConditions); // do something with the ChannelInfoList iSensrvChannel = CSensrvChannel::NewL( ChannelInfoList[0] ); iSensrvChannel-&amp;gt;OpenChannelL(); ChannelInfoList.Close(); CleanupStack::Pop( &amp;amp;ChannelInfoList ); CleanupStack::PopAndDestroy( SensrvChannelFinder );After the proximity sensor channel has been opened into iSensrvChannel it can be read with timer and callingiSensrvChannel-&amp;gt;StartDataListeningL( this, 1,1,0);After this the data is being received trough MSensrvDataListener interface class via DataReceived function:void ProximityButton::DataReceived( CSensrvChannel&amp;amp; aChannel, TInt aCount, TInt aDataLost ) { if ( aChannel.GetChannelInfo().iChannelType == KSensrvChannelTypeIdProximityMonitor ) { TSensrvProximityData data; for( TInt i = 0; i &amp;lt; aCount; i++ ) { TPckgBuf&amp;lt;TSensrvProximityData&amp;gt; dataBuf; aChannel.GetData( dataBuf ); data = dataBuf(); TSensrvProximityData::TProximityState state = data.iProximityState; if ( iLastState != state ) { if( state == TSensrvProximityData::EProximityIndiscernible ) { //button up PostKeyEvent( EFalse ); } if( state == TSensrvProximityData::EProximityDiscernible ) { //button down PostKeyEvent( ETrue ); } } iLastState = state; } } dataRequested = EFalse; }After this you just have to implement the PostKeyEvent function where you can emit a key event.The proximity sensor can also be used through Qt Mobility API’s sensor API but this time I wasn’t using it." }, { "title": "EQ is making progress with PSX4ALL", "url": "/1912/", "categories": "Video", "tags": "psx4all", "date": "2010-09-23 21:57:14 +0300", "snippet": "My friend EQ has taken my psx4all dynarec port source, and after that he has added Opengl ES 1.1 support, and fixed few bugs.He is using N95, which has hardware Opengl ES 1.1 support. I think that it’s running quite well already. Very good job EQ!" }, { "title": "gpsp v. 0.6.1: Added support for Satio and Vivaz", "url": "/1883/", "categories": "S60 5th edition", "tags": "gpsp, satio, vivaz", "date": "2010-08-31 18:08:04 +0300", "snippet": "the gpSP is a gameboy advance emulator originally written by Exophase. And now it’s ported to the Symbian OS!The newest update adds support for Sony Ericsson Satio and Vivaz. In all other ways it’s the same package as the 0.6 with experimental audio. The audio is pretty much behind from the action (sound lag), but it still can create quite nice mood for RPG-games.How to get good audio:At least with some games it seems that the emulator can not buffer enough when the audio is set “ON” when loading a ROM. If the audio is clicking badly you should set the audio OFF and click continue. Now the emulator will have some time to buffer some audio 🙂 After a while you can switch the audio back into ON position again.What’s new Experimental audioknow issues: not working on Symbian^3 based devices such as N8 It’s a gpsp port, so see the gpsp compatibility list before complaining about non-working ROMs Audio is not yet implemented (I’m waiting for new Qt release with QAudio implementation) loading the state freezes the emulator in some games ( don’t worry, the batterysave still works) the emulator crashes if you try to load a ROM without setting the BIOS there are some limitations in the ZIP file support, so maybe you have to upzipt the ROMs The ZIP files seem to be eating quite a lot of RAM, so If ROM doesn’t work, try extracting it. Samsung blit fails when “keep aspect ratio” is ticked off The audio is quite much behind from the actionZIP limitations WinZip Roms ziped in the WinZip Maximum (PPMd) format WILL NOT work. Roms ziped in the WinZip Maximum (bzip2) format WILL NOT work Roms ziped in the WinZip Maximum (Enhanced Deflate) format WILL NOT run Roms ziped in the WinZip Normal format WILL run Roms ziped in the WinZip Fast format WILL run. Roms ziped in the WinZip Super Fast format WILL run. Roms ziped in the WinZip None format WILL run.Installation:Same process as with the AntSnes:1. First Install Qt 4.6.3 binaries into your phone Nokia users can just download and install this Download Qt installation package Samsung users: There’s really no official Qt installation package yet. You can get working Qt libraries by installing wikitude i8910 version: http://www.wikitude.org/ Check out faenil’s QT installation instructions Sony Ericsson users: You can get the official Qt installation package from: http://bit.ly/qt463demos 2. Download the gpsp4symbian.sis3. gpsp4Symbian requires the SWEvent capability. The SwEvent is required for key mapping: Now you can map call/end call etc. buttons for the gpsp usage. Therefore the following step is required to install the SW.Go to SymbianSigned and sign the gpsp4Symbian.sis for your own phone IMEIusing free Open Signed Online option https://www.symbiansigned.com/app/page/public/openSignedOnline.do this operation should be free of any charge.Read carefully the instructions on the SymbianSigned site.You must give them Your Phone IMEI (you can obtain it digiting *#06# on your phone) Your EMAIL Address gpsp4Symbian SIS PackageAnd then the symbiansigned should email you the signed gpsp4Symbianfor your phone. This package will be installable ONLY on your phone. This procedure works for all Symbian S60V5 Phones. I had also to change to date on the phone into yesterday to get it working..The alternative method is to hack your phone! You can find pretty good instructions from MameXM download site. (scroll to the bottom of page: Signing &amp;amp; Installing).Download:Download the gpsp4Symbian: gpsp4Symbian_v0.6.1.sis (52803 downloads) Sources are available on Github:https://github.com/Summeli/gpSP4Cute/tree/S60_5th_editionThe Bios:Remember to set the correct bios before loading ROMs. Make sure to get an authentic one , it’ll be exactly 16384 bytes large and should have the following md5sum “a860e8c0b6d573d191e4ec7db1b1e4f6”. The Bios extension should be .binProject Wiki page:http://wiki.github.com/Summeli/gpSP4Symbian/Read this before posting comments: Do NOT Ask where to find ROMs / Bios. Asking about these will just get you banned!" }, { "title": "DirectScreenAccess: Adding support for SE Satio and Vivaz", "url": "/1875/", "categories": "Symbian Development", "tags": "satio, vivaz", "date": "2010-08-31 17:58:36 +0300", "snippet": "I got quite many complaints about gpsp crashing with Sony Ericsson Satio and Vivaz. I didn’t have any clue what’s wrong with gpsp, until I found this thread in the SE Support forums. http://developer.sonyericsson.com/community/thread/50103It turns out that the Sony Ericsson Satio and Vivaz seems to have similar issues with the Blit as Samsung i8910 with a twist: The Sony Ericsson phones just crashes when creating a CDirectScreenBitmap in different size than (0,0,360,640). We are in luck here, since I already have a blit fix that I can re-used for SE phones too!The SE support also says that the ScreenDevice-&amp;gt;update() must be called before the screen is actually updated. Therefore we must add that into the blit method. TAcceleratedBitmapInfo bitmapInfo; iDSBitmap-&amp;gt;BeginUpdate(bitmapInfo); bitmapdata = (TUint8*) bitmapInfo.iAddress; bitmapBlit( (TUint8*) g_screenptr, bitmapdata); iDSBitmap-&amp;gt;EndUpdate(iStatus); SetActive(); iDirectScreenAccess-&amp;gt;ScreenDevice()-&amp;gt;Update(); &amp;lt;-- Added this line to make the drawing visible!The update command is also required for Symbian^3 based devices, see the DSA Migration guide in forum.nokia. So this update might also give Symbian^3 support for the gpsp 🙂" }, { "title": "gpSP4Symbian v0.6: Experimental Audio", "url": "/1850/", "categories": "S60 5th edition", "tags": "gpsp", "date": "2010-08-27 17:17:04 +0300", "snippet": "the gpSP is a gameboy advance emulator originally written by Exophase. And now it’s ported to the Symbian OS!This version adds an experimental audio into the gpsp. The audio is pretty much behind from the action, but it still can create quite nice mood for RPG-games.How to get good audio:At least with some games it seems that the emulator can not buffer enough when the audio is set “ON” when loading a ROM. If the audio is clicking badly you should set the audio OFF and click continue. Now the emulator will have some time to buffer some audio 🙂 After a while you can switch the audio back into ON position again.What’s new: Experimental audioknow issues: It’s a gpsp port, so see the gpsp compatibility list before complaining about non-working ROMs Audio is not yet implemented (I’m waiting for new Qt release with QAudio implementation) loading the state freezes the emulator in some games ( don’t worry, the batterysave still works) the emulator crashes if you try to load a ROM without setting the BIOS there are some limitations in the ZIP file support, so maybe you have to upzipt the ROMs The ZIP files seem to be eating quite a lot of RAM, so If ROM doesn’t work, try extracting it. Samsung blit fails when “keep aspect ratio” is ticked off The audio is quite much behind from the actionZIP limitations WinZip Roms ziped in the WinZip Maximum (PPMd) format WILL NOT work. Roms ziped in the WinZip Maximum (bzip2) format WILL NOT work Roms ziped in the WinZip Maximum (Enhanced Deflate) format WILL NOT run Roms ziped in the WinZip Normal format WILL run Roms ziped in the WinZip Fast format WILL run. Roms ziped in the WinZip Super Fast format WILL run. Roms ziped in the WinZip None format WILL run.Installation:Same process as with the AntSnes:1. First Install Qt 4.6.3 binaries into your phone Nokia users can just download and install this Download Qt installation package Samsung users: There’s really no official Qt installation package yet. You can get working Qt libraries by installing wikitude i8910 version: http://www.wikitude.org/ Check out faenil’s QT installation instructions 2. Download the gpsp4symbian.sis3. gpsp4Symbian requires the SWEvent capability. The SwEvent is required for key mapping: Now you can map call/end call etc. buttons for the gpsp usage. Therefore the following step is required to install the SW.Go to SymbianSigned and sign the gpsp4Symbian.sis for your own phone IMEIusing free Open Signed Online option https://www.symbiansigned.com/app/page/public/openSignedOnline.do this operation should be free of any charge.Read carefully the instructions on the SymbianSigned site.You must give them Your Phone IMEI (you can obtain it digiting *#06# on your phone) Your EMAIL Address gpsp4Symbian SIS PackageAnd then the symbiansigned should email you the signed gpsp4Symbianfor your phone. This package will be installable ONLY on your phone. This procedure works for all Symbian S60V5 Phones. I had also to change to date on the phone into yesterday to get it working..The alternative method is to hack your phone! You can find pretty good instructions from MameXM download site. (scroll to the bottom of page: Signing &amp;amp; Installing).[ad]Download:Download the gpsp4Symbian: gpsp4Symbian_v0.6.1.sis (52803 downloads) Sources are available on Github: https://github.com/Summeli/gpSP4CuteThe Bios:Remember to set the correct bios before loading ROMs. Make sure to get an authentic one , it’ll be exactly 16384 bytes large and should have the following md5sum “a860e8c0b6d573d191e4ec7db1b1e4f6”. The Bios extension should be .binProject Wiki page:http://wiki.github.com/Summeli/gpSP4Symbian/Read this before posting comments: Do NOT Ask where to find ROMs / Bios. Asking about these will just get you banned!" }, { "title": "PSX4All proof of concept now running on Nokia N97", "url": "/1840/", "categories": "Video", "tags": "ps, psx4all, psx4symbian", "date": "2010-08-10 22:35:39 +0300", "snippet": "I just took the psx4all stuff from S60 3rd edition port and put that running on my N97 with my Qt stuff, which I have previously used for AntSnes and gpsp4Symbian.It’s really slow as I expected, but I think that it was worth of couple of hours work. Now I have pretty nice benchmarking SW for the N8 😉Here’s the psx4all running Final Fantasy VII on my old N97. The video runs in 4x speed after I click the new game button. Notice how well the 320×240 original psx resolution scales up to the N97’s 640×360.Update: I’ll probably abandon this work in favor for a new psx-dynarec emu called pcsx4all. It seems to be a lot better than psx4all. See this forum thread for more info http://www.gp32x.com/board/index.php?/topic/55665-pcsx4all/http://www.gp32x.com/board/index.php?/topic/55665-pcsx4all/" }, { "title": "gpSP4Symbian v0.5.1: Support for Samsung i8910", "url": "/1790/", "categories": "S60 5th edition", "tags": "gpsp", "date": "2010-07-21 10:55:38 +0300", "snippet": "the gpSP is a gameboy advance emulator originally written by Exophase. And now it’s ported to the Symbian OS!This is a small patch for the previous version, so no real need to update for Nokia users. However Samsung users might want to test this one 😉I have been a bit lazy in gpsp development. I’m currently waiting for more stuff from Qt Mobility project. The current version give only 8khz mono audio, while I would like to have at least 22100hz stereo. I still might implement the audio with standard Symbian API’s. I just would like to wait for the Qt API stuff, since then I would keep the maximum compatibility to Symbian^4 and even to the upcoming Meego. Bot of them should fully support all Qt mobility APIs according to Nokia.What’s new: Support for Samsung i8910 Polished mainview fixed the common settings bug with AntSnesQt few other minor bugs fixesknow issues: It’s a gpsp port, so see the gpsp compatibility list before complaining about non-working ROMs Audio is not yet implemented (I’m waiting for new Qt release with QAudio implementation) loading the state freezes the emulator in some games ( don’t worry, the batterysave still works) the emulator crashes if you try to load a ROM without setting the BIOS there are some limitations in the ZIP file support, so maybe you have to upzipt the ROMs The ZIP files seem to be eating quite a lot of RAM, so If ROM doesn’t work, try extracting it. Samsung blit fails when “keep aspect ratio” is ticked offZIP limitations** WinZip Roms ziped in the WinZip Maximum (PPMd) format WILL NOT work. Roms ziped in the WinZip Maximum (bzip2) format WILL NOT work Roms ziped in the WinZip Maximum (Enhanced Deflate) format WILL NOT run Roms ziped in the WinZip Normal format WILL run Roms ziped in the WinZip Fast format WILL run. Roms ziped in the WinZip Super Fast format WILL run. Roms ziped in the WinZip None format WILL run.Installation:**Same process as with the AntSnes:1. First Install Qt 4.6.3 binaries into your phone Nokia users can just download and install this Download Qt installation package Samsung users: There’s really no official Qt installation package yet. You can get working Qt libraries by installing wikitude i8910 version: http://www.wikitude.org/ Check out faenil’s QT installation instructions 2. Download the gpsp4symbian.sis3. gpsp4Symbian requires the SWEvent capability. The SwEvent is required for key mapping: Now you can map call/end call etc. buttons for the gpsp usage. Therefore the following step is required to install the SW.Go to SymbianSigned and sign the gpsp4Symbian.sis for your own phone IMEIusing free Open Signed Online option https://www.symbiansigned.com/app/page/public/openSignedOnline.do this operation should be free of any charge.Read carefully the instructions on the SymbianSigned site.You must give them Your Phone IMEI (you can obtain it digiting *#06# on your phone) Your EMAIL Address gpsp4Symbian SIS PackageAnd then the symbiansigned should email you the signed gpsp4Symbianfor your phone. This package will be installable ONLY on your phone. This procedure works for all Symbian S60V5 Phones. I had also to change to date on the phone into yesterday to get it working..The alternative method is to hack your phone! You can find pretty good instructions from MameXM download site. (scroll to the bottom of page: Signing &amp;amp; Installing).Download:Download the gpsp4Symbian: gpsp4Symbian_v0.5 (85566 downloads) Sources are available on Github: https://github.com/Summeli/gpSP4CuteThe Bios:Remember to set the correct bios before loading ROMs. Make sure to get an authentic one , it’ll be exactly 16384 bytes large and should have the following md5sum “a860e8c0b6d573d191e4ec7db1b1e4f6”. The Bios extension should be .binProject Wiki page:http://wiki.github.com/Summeli/gpSP4Symbian/Read this before posting comments: Do NOT Ask where to find ROMs / Bios. Asking about these will just get you banned!" }, { "title": "Fixing the blit for Samsung i8910", "url": "/1800/", "categories": "Symbian Development", "tags": "i8910, Samsung, scaling, Symbian", "date": "2010-07-20 19:01:54 +0300", "snippet": "I got lot’s of complaints about the broken blit in gpsp4Symbian with Samsung i8910.The root cause for this problem is that the following code doesn’t set the ScreenBuffer in samsung into Landscape orientation, while it does work just fine on Nokia’s phones. I heard that there are some other Qt applications ( at least AntSnesQt 😉 that have the same problem, so I felt this worth of sharing. CAknAppUi* appUi = dynamic_cast&amp;lt;CAknAppUi*&amp;gt; (CEikonEnv::Static()-&amp;gt;AppUi()); TRAPD(error, if (appUi) { // Lock application orientation into landscape appUi-&amp;gt;SetOrientationL(CAknAppUi::EAppUiOrientationLandscape); appUi-&amp;gt;SetKeyEventFlags(CAknAppUi::EDisableSendKeyShort|CAknAppUi::EDisableSendKeyLong); }The screen is still in portrait mode, and therefore it looks like this:rotated screen with samsungFixing the blit comes in two phases:First you must fix the coordinates of the DirectScreenBitmap ( the coordinates are different in landscape/portait mode) iDSBitmap-&amp;gt;Create( // This is an easy case: just change places of x and y coordinates. // in most cases you&#39;ll have to calculate these values by yourself //TRect(160,0,640,360), CDirectScreenBitmap::EDoubleBuffer); TRect(0,160,360,640), CDirectScreenBitmap::EDoubleBuffer);After this you must write the pixels into the bitmap in modified order. The Samsung framebuffer is illustrated on below. filling the framebufferSince the bitmap is orientated in different position the distance between the black and red pixels is 320 pixels. Therefore the buffer should be filled like this:for( TInt i=0; i&amp;lt;240; i++){copyPixel16MU( bitmap, screen );bitmap += 320;//simple interpolation from 240 into 480 pixels, each pixel is just actually copied twicecopyPixel16MU( bitmap, screen );bitmap += 320;screen++;}There’s a minor fix coming to gpsp in few days with fixed blit for Samsung i8910 (I fixed only the “keep aspect ratio” mode). This fix was debugged by email with faenil (thanks again faenil, you have been a great help in here): I sent away a sis file, and received a photo of the screen 🙂 This way of developing it further is too time consuming for me, and I’m hoping that someone with Samsung phone could continue fixing these blits 🙂I don’t want to scare anyone away with my mingw build, so I decided to share the gpsp static libarary file that is required to build the gpsp4symbianhere’s gpsp debug binaries. Just copy them into epoc32\\release\\armv5\\udeb http://dl.dropbox.com/u/2936915/gpsp/gpsp_debug/gpSP4Symbian.LIB http://dl.dropbox.com/u/2936915/gpsp/gpsp_debug/gpSP4Symbian.LIB.mapAnd here’s the release binary of that lib: copy it into epoc32\\release\\armv5\\urel http://dl.dropbox.com/u/2936915/gpsp/gpsp_release/gpsp4symbian.LIB" }, { "title": "Download-Feed: my first WordPress plugin", "url": "/1769/", "categories": "WordPress", "tags": "download-feed, wordpress", "date": "2010-06-07 20:08:37 +0300", "snippet": "Download-Feed is a plugin for creating a XML feed from downloads created with Download-Monitor WordPress plugin.The XML feed could be used for integrating a mobile client into the download-interface, so any WordPress powered blog could be turn into “appstore” type of application delivery system, without payments.Here’s an example of a donwload entry from the XML-feed.&amp;lt;entry&amp;gt; &amp;lt;title&amp;gt;AntSnes_v071.sis&amp;lt;/title&amp;gt; &amp;lt;version&amp;gt;0.71&amp;lt;/version&amp;gt; &amp;lt;description&amp;gt;&amp;lt;/description&amp;gt; &amp;lt;category&amp;gt; &amp;lt;title&amp;gt;AntSnes&amp;lt;/title&amp;gt; &amp;lt;ID&amp;gt;1&amp;lt;/ID&amp;gt; &amp;lt;/category&amp;gt; &amp;lt;hits&amp;gt;6784&amp;lt;/hits&amp;gt; &amp;lt;thumbnail&amp;gt;http://www.summeli.com/wp-content/plugins/download-monitor/img/download.gif&amp;lt;/thumbnail&amp;gt; &amp;lt;link href=&quot;&amp;lt;a href=&quot;view-source:http://www.summeli.com/wp-content/plugins/download-monitor/download.php?id=5&quot;&amp;gt;http://www.summeli.com/wp-content/plugins/download-monitor/download.php?id=5&amp;lt;/a&amp;gt;&quot;/&amp;gt; &amp;lt;/entry&amp;gt;The Downloads can be queried by category, and there’s an option to limit how many items should be requested, and what’s the offset. So it could be used even with very big list of entries (like appstore :))The feed.php uses following url-parametersn: an integer value of how many entries should be queriedi: an iteger and will offset the returned entries by that number. e.g. offset of 1 would not return the first entrycat: category id, which should be returned.here’s an example request:http://www.summeli.com/wp-content/plugins/downloadfeed/feed.php?i=2&amp;amp;n=3&amp;amp;cat=1As usual, this plugin is open source, and it can be downloaded from my github page github.com/Summeli/download-feed" }, { "title": "gpSP4Symbian v0.5: first beta", "url": "/1674/", "categories": "S60 5th edition", "tags": "gpsp", "date": "2010-05-18 16:43:46 +0300", "snippet": "the gpSP is a gameboy advance emulator originally written by Exophase. And now it’s ported to the Symbian OS!The first gpSP4Symbian release is now ready for the testing. It already has some of the fixes that I’m taking with the AntSnes as well. This kind of sums up my Qt development strategy, since now I can use the same UI with all my emulators, so the porting process should be quicker. Also taking new updates to the UI should be a lot faster this way, since I can share UI updates between projects.cool stuff: 30fps on N97! cool UI with Qt supports a lot of ROMsknow issues: It’s a gpsp port, so see the gpsp compatibility list before complaining about non-working ROMs Audio is not yet implemented (I’m waiting for new Qt release with QAudio implementation) loading the state freezes the emulator in some games ( don’t worry, the batterysave still works) Qt and SwEvent works together only on Nokia’s phones the emulator crashes if you try to load a ROM without setting the BIOS there are some limitations in the ZIP file support, so maybe you have to upzipt the ROMs The ZIP files seem to be eating quite a lot of RAM, so If ROM doesn’t work, try extracting it.ZIP limitations WinZip Roms ziped in the WinZip Maximum (PPMd) format WILL NOT work. Roms ziped in the WinZip Maximum (bzip2) format WILL NOT work Roms ziped in the WinZip Maximum (Enhanced Deflate) format WILL NOT run Roms ziped in the WinZip Normal format WILL run Roms ziped in the WinZip Fast format WILL run. Roms ziped in the WinZip Super Fast format WILL run. Roms ziped in the WinZip None format WILL run.Installation:Same process as with the AntSnes:1. First Install Qt 4.6.2 binaries into your phone: Download Qt installation package2. Download the gpsp4symbian.sis3. gpsp4Symbian requires the SWEvent capability. The SwEvent is required for key mapping: Now you can map call/end call etc. buttons for the gpsp usage. Therefore the following step is required to install the SW.Go to SymbianSigned and sign the gpsp4Symbian.sis for your own phone IMEIusing free Open Signed Online option https://www.symbiansigned.com/app/page/public/openSignedOnline.do this operation should be free of any charge.Read carefully the instructions on the SymbianSigned site.You must give them Your Phone IMEI (you can obtain it digiting *#06# on your phone) Your EMAIL Address gpsp4Symbian SIS PackageAnd then the symbiansigned should email you the signed gpsp4Symbianfor your phone. This package will be installable ONLY on your phone. This procedure works for all Symbian S60V5 Phones. I had also to change to date on the phone into yesterday to get it working..The alternative method is to hack your phone! You can find pretty good instructions from MameXM download site. (scroll to the bottom of page: Signing &amp;amp; Installing).Download:Download the gpsp4Symbian: gpsp4Symbian_v0.5 (85566 downloads) Notice that there’s also newer gpsp4Symbian version available: gpsp4Symbian v. 0.6.5 (with audio)Sources are available on Github: https://github.com/Summeli/gpSP4CuteThe Bios:Remember to set the correct bios before loading ROMs. Make sure to get an authentic one , it’ll be exactly 16384 bytes large and should have the following md5sum “a860e8c0b6d573d191e4ec7db1b1e4f6”. The Bios extension should be .binProject Wiki page:http://wiki.github.com/Summeli/gpSP4Symbian/Read this before posting comments: Do NOT Ask where to find ROMs / Bios. Asking about these will just get you banned!" }, { "title": "AntSnesQt V. 0.6: new graphics", "url": "/1685/", "categories": "S60 5th edition", "tags": "AntSnes", "date": "2010-05-12 22:26:00 +0300", "snippet": "The new AntSnesQt comes with Big D-pad, which is optimized for resistive touchscreen.I had some help for the new graphics for this release: Thanks for Saiyaku for the new D-pad graphics and UI graphics. Thaks for Jasper Terveer for the small d-pad and button graphics.What’s new Improved compatibility? (the code is much better aligned with drPocketSnes) Big D-PAD The new AntSnes has more realistic snes style graphics. See it yourself Know issues: Audio isn’t implemented Qt with SwEvent works only on Nokia phones, other S60 users should use the AntSnes 0.72. PAL ROMs do not workInstallation:1. First Install Qt 4.6.2 binaries into your phone: Download Qt installation package2. Download the AntSnesQt.sis3. AntSnesQt requires the SWEvent capability. The SwEvent is required for key mapping: Now you can map call/end call etc. buttons for the AntSnes usage. Therefore a new step is required to install the SW.Go to SymbianSigned and sign the AntSnesQt sis for your own phone IMEIusing free Open Signed Online option https://www.symbiansigned.com/app/page/public/openSignedOnline.do this operation should be free of any charge.Read carefully the instructions on the SymbianSigned site.You must give them Your Phone IMEI (you can obtain it digiting *#06# on your phone) Your EMAIL Address AntSnesQt SIS PackageAnd then the symbiansigned should email you the signed AntSnesQt for your phone. This package will be installable ONLY on your phone. This procedure works for all Symbian S60V5 Phones.The alternative method is to hack your phone! You can find pretty good instructions from MameXM download site. (scroll to the bottom of page: Signing &amp;amp; Installing).Download:Download the AntSnesQt: AntSnesQt_v06 (38978 downloads) Sources are available on Github: http://github.com/Summeli/AntSnes" }, { "title": "AntSnes v. 0.72: final release for S60 5th edition", "url": "/1699/", "categories": "S60 5th edition, Symbian^3", "tags": "AntSnes", "date": "2010-05-12 22:24:04 +0300", "snippet": "I decided to make one more release for the 5th edition since the Qt + SwEvent is only working on Nokia’s phones. I’ll be using Qt from now on, and I recommend all Nokia users to take the Qt version, not this one.Thanks for Saiyaku for the new D-pad graphics.What’s new Improved compatibility? (the code is much better aligned with drPocketSnes) In this update the d-pad is now optimized for resistive screen, and the red/green/menu buttons can be mapped as buttons in the key config digalog.know issues:- Audio isn’t working PAL ROMs do not work It’s final realease without QtInstallation:1. Download the AntSnes.sis2. The AntSnes requires the SWEvent capability. The SwEvent is required for key mapping: Now you can map call/end call etc. buttons for the AntSnes usage. Therefore a new step is required to install the SW.Go to SymbianSigned and sign the AntSnesQt sis for your own phone IMEIusing free Open Signed Online option https://www.symbiansigned.com/app/page/public/openSignedOnline.do this operation should be free of any charge.Read carefully the instructions on the SymbianSigned site.You must give them Your Phone IMEI (you can obtain it digiting *#06# on your phone) Your EMAIL Address AntSnesQt SIS PackageAnd then the symbiansigned should email you the signed AntSnes for your phone. This package will be installable ONLY on your phone. This procedure works for all Symbian S60V5 Phones.The alternative method is to hack your phone! You can find pretty good instructions from MameXM download site. (scroll to the bottom of page: Signing &amp;amp; Installing).[ad]Download:Download the AntSnesQt: AntSnes_V072 (29716 downloads) Sources are available on Github: http://github.com/Summeli/AntSnes" }, { "title": "gpsp running on Symbian", "url": "/1681/", "categories": "Video", "tags": "gpsp", "date": "2010-04-29 08:44:38 +0300", "snippet": "I have the gpsp port already running on my N97, and it looks really promising. Take a look at the video 🙂The dynarec isn’t stable yet. I can run one track with mario kart, and then it freezes. It’s same with all other games too. I hope to solve this freeze/crash issue soon, so I can make the release." }, { "title": "Memory Mapping solution for Dynamic Recompilation in Symbian OS", "url": "/1384/", "categories": "ARM, Symbian Development", "tags": "ARM, dynarec, gpsp, porting", "date": "2010-04-27 19:57:45 +0300", "snippet": "The gpsp was my first emulator port with dynamic recompilation. The problem in memory mapping and dynarec is that local data in Symbian OS is too far away from the user area, where we the new memory chunk for the dynamic area was created. My first solution was the memory trampoline pattern.However I got an optimal solution from Olli Hinkka. The solution is called dynamic text segment relocation routine. Basically the relocator is relocating the process into the user memory are in Symbian. With this approach no memory trampoline is required, since the static side is close enough to the dynamic side.How to use it:You’ll need Olli Hinkka’s relocator code. You can find it at least from gpsp github. relocutils.h relocator.cpp and relocator_glue.SFirst you’ll have to relocate your process on the user area in the Symbian. The user local data area is between 0x04000000-0x38000000, see the Symbian OS memory map.I’m using 0x10000000 in this example.#include &quot;relocutils.h&quot;int main(int argc, char** argv){ BEGIN_RELOCATED_CODE(0x10000000); // all code from the code section of this process is run in the specified address END_RELOCATED_CODE(); // return to the original code section}The next step is to create a new memory chunk for the dynamic recompiler and move it close to the newly relocated code. The new code chunk has to be in 32Mb range from our process memory area.void createDynamicMemoryArea(){ TInt error = process.GetMemoryInfo( info ); if( error ) return error; TUint32 programAddr = 0x10000000;//(TUint32) info.iCodeBase; programAddr += info.iCodeSize; //the distance must be less than 32Mb TUint32 destAddr = programAddr - KDistanceFromCodeSection; g_code_chunk = new RChunk(); TInt err = CreateChunkAt(destAddr,minsize, maxsize );}//Creates a chunk into addrTInt CreateChunkAt(TUint32 addr,TInt minsize, TInt maxsize ){ TInt err = g_code_chunk-&amp;gt;CreateLocalCode( minsize, maxsize ); if( err ) return err; if ((TUint32)g_code_chunk-&amp;gt;Base() != addr) { TUint offset = (TInt)g_code_chunk-&amp;gt;Base(); offset = addr-offset; g_code_chunk-&amp;gt;Close(); RChunk temp; if( offset &amp;gt; 0x7FFFFFFF ) { //shit, offset too big :( return KErrNoMemory; } TInt chunkoffset = (TInt) offset; err = temp.CreateLocal(0,chunkoffset); if( err ) { temp.Close(); return err; } err = g_code_chunk-&amp;gt;CreateLocalCode(minsize,maxsize); temp.Close(); } return err;}We have now transferred our process into new memory area, which means that our code section runs in different memory address now. However the code relocation didn’t affect to the data section at all. Therefore we must update all function pointers used from the dynamic side of the code.TUint addr = &amp;amp;my_old_funck;ddr+=relocated_code_offset;generatejump(addr); generate immediate b/bl" }, { "title": "AntSnesQt 0.5 : first beta", "url": "/1604/", "categories": "S60 5th edition", "tags": "AntSnes", "date": "2010-04-24 00:10:27 +0300", "snippet": "The AntSnes Qt is ready for first testing round. The whole UI is now working on top of Qt, so I expect there to be some new bugs compared to the older AntSnes version. The good news is that this installation won’t overwrite the older AntSnes. I also heard the the D-pad doesn’t suck anymore, so you should be able to use this emu with touch only phones too.I didn’t even try to get the Audio working, since the QAudio is not yet working in the Qt 4.6.2. I’ll continue with that after the QAudio is finalized by Nokia.Know issues:1. The audio is not yet implemented.2. Save states are now found in different slots than in the previous AntSnes release.3. The installation is now a bit more complicated, since the SWEvent capability is required.Installation:*1. First Install Qt 4.6.2 binaries into your phone: Download Qt installation package2. Download the AntSnesQt.sis3. AntSnesQt requires the SWEvent capability. The SwEvent is required for key mapping: Now you can map call/end call etc. buttons for the AntSnes usage. Therefore a new step is required to install the SW.Go to SymbianSigned and sign the AntSnesQt sis for your own phone IMEIusing free Open Signed Online option https://www.symbiansigned.com/app/page/public/openSignedOnline.do this operation should be free of any charge.Read carefully the instructions on the SymbianSigned site.You must give them Your Phone IMEI (you can obtain it digiting *#06# on your phone) Your EMAIL Address AntSnesQt SIS PackageAnd then the symbiansigned should email you the signed AntSnesQt for your phone. This package will be installable ONLY on your phone. This procedure works for all Symbian S60V5 Phones.The alternative method is to hack your phone! You can find pretty good instructions from MameXM download site. (scroll to the bottom of page: Signing &amp;amp; Installing).sDownload:Download the AntSnesQt: AntSnesQt_v05 (3529 downloads) Sources are available on Github: http://github.com/Summeli/AntSnes" }, { "title": "Running the AntSnesQt", "url": "/1615/", "categories": "Video", "tags": "AntSnes", "date": "2010-04-17 20:08:11 +0300", "snippet": "I have been working with the new Qt UI that I’m going to use with my all emus in the future. The AntSnes Qt is quite close to be ready for first beta release, and the gpsp emu is on pretty good shape too. Here’s a short video of the new AntSnesQt running on my N97.You can read my AntSnes qt development posts at AntSnesQt Dev" }, { "title": "Implementing AntSnes with Qt part 6: Final touch, using stylesheets", "url": "/1568/", "categories": "Qt Development, Symbian Development", "tags": "AntSnesQtDev, Symbian", "date": "2010-04-14 19:35:11 +0300", "snippet": "The Qt’s default style tries to look as much your original S60 theme as possible. The big problem is that each phone can have very different theme, and then your application might look really bad.The good news is that you can write your own style, and use it in your own application.Here’s a “before image” with my Symbian foundation default theme and AntSnes:The default theme has a lot of problems. For example the default blue color is used, when Qt doesn’t know what color to use. The donw arrow is also way too big in the default Qt theme.AntSnes with style sheetThe Style sheet makes a huge difference in here. Now I can add some nice application logo’s etc, and I know that the color fits the application style. For example using that black and green AntSnes text wouldn’t really work with my default theme 😉The Qt style sheets syntax is really close to css. It’s really easy for anyone to modify these. Here’s couple of really good links for creating new style sheets with Qt: Qt 4.6.2 Stylesheet Qt 4.6.2 Styleseet ExamplesCreating the style sheets is also very easy, since the Qt Editor will update all of your controls immediately after you have modified the style sheet. The application looks a bit different on actual Symbian phone, but it’s close enough to do the editing with the Qt Editor only.I could make different style sheet for different environments. For example I could have different styles for Maemo and for Symbian. Here’s a short code clip how to load and set a style sheet to application. QFile file(&quot;:/style/summelistyle.qss&quot;); if(!file.open(QFile::ReadOnly)) { __DEBUG1(&quot;Unable to open file&quot;); } QString styleSheet = QLatin1String(file.readAll()); qApp-&amp;amp;amp;amp;amp;gt;setStyleSheet(styleSheet);The AntSnes is now pretty close to complete. I hope that I can post a youtube video soon, and also to make the first release." }, { "title": "What&amp;#8217;s up with the releases", "url": "/1584/", "categories": "Symbian Development", "tags": "AntSnes, gpsp, psx4all, psx4symbian, symbian^3", "date": "2010-04-07 22:41:58 +0300", "snippet": "This blog has been pretty quiet lately, and maybe you’re wondering why there has been no releases lateley 🙂 Well, I have been snowboarding the last month, so I really haven’t made any progress. I still have a lot of photo’s and videos to edit, which will keep me away from my emulator projects for a while.. But soon the releases will be coming at the usual speed 🙂As I said earlier the future of my emulators is in the Qt. The works is proceeding really well. The AntSnesQt is only missing style sheet, and then I could release it. Actually I already have started the gpsp port with the same Qt based UI. The gpsp requires few SDL-alike functions to be mapped into the UI, but I can mostly reuse the stuff I made for the AntSnes.I haven’t abandoned the psx4symbian port, but I’m really not working on it neither. The proof of concept was made in couple of hours after the gpsp port, and my plan is to reuse all the gpsp stuff again to make that one. This should be quite fast to thing to do after I have the gpsp running on Qt.Why not to make the psx4all port at first, and then work with gpsp and AntSnes? The psx4all video has already over 10 000 views on youtube, and it seems like a pretty popular project. My reasoning here is that I don’t believe that current S60 5th edition phones could emulate the psx4all with decent speed. There’s no technical issued preventing you to run the upcoming psx4all port with current 5th edition phones too, but my personal goal is to run the psx4all with Symbian^3 phones.The Symbian^3 phones will be a lot better for gaming/emulation because of the new graphics architecture (NGA) . The basic idea in the NGA is that now you can draw into the screen more directly and with graphic accelerations (opengl es 2.0, openvg, etc.) . See the graphics architecture evolution in Symbian wiki page: http://developer.symbian.org/wiki/index.php/Graphics/Component_Architecture_Evolution. I expect that with the new graphics architecture The AntSnes and the gpsp emulator should be able to run at full speed (60 fps). This would also give a huge performance boost for the psx4all 🙂Here’s a summary how I’m planning to proceed with my emulators projects." }, { "title": "Implementing AntSnes with Qt part 5: Implementing the Blit", "url": "/1457/", "categories": "Qt Development, Symbian Development", "tags": "AntSnesQtDev, Qt Development", "date": "2010-03-03 19:15:40 +0200", "snippet": "The current Qt version is implemented on top of the old Avkon layer, and it really doesn’t have fast blitting methods available. Therefore I Implemented the blit with Symbian’s Anti-Tearing API, which should be the fastest available method to draw on the screen. Forum.nokia has a very good example how to use the Anti-tearing API.There’s a ton of Qt blog posts about graphics performance, so I’m not going though all that stuff again. Here’s one really good post about the performance: http://labs.trolltech.com/blogs/2009/12/16/qt-graphics-and-performance-an-overview/ I’ll make an update for the fast blit, when there’s real hardware acceleration for Qt in Symbian available, so I can make some benchmarking as well. Until then I’m going with the Anti-Tearing API.For the blitting I’m using the scaling function I described in the my earlier blog post fast image scaling. The render function is implemented as Qt slot, so I can call it from another thread, see also my post about the worker thread.Here’s the rendering function.void QBlitterWidget::render() { if (IsActive()) { Cancel(); } TAcceleratedBitmapInfo bitmapInfo; iDSBitmap-&amp;gt;BeginUpdate(bitmapInfo); bitmapdata = (TUint8*) bitmapInfo.iAddress; //blit the data bitmapBlit( g_screenptr, bitmapInfo.iAddress); iDSBitmap-&amp;gt;EndUpdate(iStatus); SetActive(); }" }, { "title": "Implementing AntSnes with Qt part 4: using special keys", "url": "/1488/", "categories": "Qt Development, Symbian Development", "tags": "AntSnesQtDev, buttons, Qt Development, SwEvent, Symbian", "date": "2010-02-01 22:15:29 +0200", "snippet": "Support for green, red, menu, and camera keys:Current S60 v. 5.0 phones really don’t have that much keys, so I decided to add support for all keys that I can find from the phone. This will require the SwEvent capability. The downside is that SwEvent requires signing by user. The signing can be made at Symbian signed website.Here’s a trick how to catch these special button events from the phone.&amp;lt;pre class=&quot;brush: cpp; title: ; notranslate&quot; title=&quot;&quot;&amp;gt;CAknAppUi* appUi = dynamic_cast&amp;lt;CAknAppUi*&amp;gt; (CEikonEnv::Static()-&amp;gt;AppUi());TRAPD(error, if (appUi) { // disable other green key functionality to be able to use it appUi-&amp;gt;SetKeyEventFlags(CAknAppUi::EDisableSendKeyShort|CAknAppUi::EDisableSendKeyLong); }//capturing menukeys, redkey (no), and camera keysiMenuKeyHandle = CEikonEnv::Static()-&amp;gt;RootWin().CaptureKeyUpAndDowns(EStdKeyApplication0, 0,0);iNoKeyHandle = CEikonEnv::Static()-&amp;gt;RootWin().CaptureKeyUpAndDowns(EStdKeyNo, 0, 0);iNoKeyHandle2 = CEikonEnv::Static()-&amp;gt;RootWin().CaptureKey( EKeyNo, 0, 0 );iCameraKeyHandle = CEikonEnv::Static()-&amp;gt;RootWin().CaptureKey( EKeyDevice7, 0, 0 );There are limitations in these keys also. The green and red button are sending the KeyUp events, even if I would hold the button down. So these keys shouldn’t be mapped into keys that require long key presses.Adding support for multimedia buttons:There’s are very good forum.nokia article about how to utilize multimedia keys: http://wiki.forum.nokia.com/index.php/TSS000432_-_Utilising_media_keys. I utilized the multimedia keys in similar ways, and after that I’ll make a KeyEvent with Qt’s Event:QKeyEvent *event = NULL;event =  QKeyEvent::createExtendedKeyEvent( QEvent::KeyPress, KPlayButtonPress, Qt::NoModifier, KPlayButtonPress, KPlayButtonPress,Qt::NoModifier);QCoreApplication::postEvent (receiver, event);These event’s can be sent to the receiver object, which can use the key events as any other normal keys. However multimedia keys also have some limitations 🙂 The play and stop keys are not sending the keyup events at all. Therefore I had to set a initial time how much it takes until the keyup event is generated. Initially I set the timeout to 80ms. It seems to be working quite well 🙂Summary about button limitations:For red/green keys the user must sign the application in symbian signed, or I have to buy a cert and get the applicaiton signed. I’m probably not going to do that, so it’s more work for the user.Currently there are four buttons that doesn’t support long key presses. I tested these only with my N97. Other phones might behave differently.green/red buttons: automatic keyup event after some timeplay/stop button: automatic keyup event after 80ms." }, { "title": "Implementing AntSnes with Qt part 3: Running the emulation in worker thread", "url": "/1475/", "categories": "Qt Development, Symbian Development", "tags": "AntSnesQtDev, Qt Development, Symbian", "date": "2010-01-26 20:16:43 +0200", "snippet": "I decided to build a two threaded application. The main thread is for the UI, and the worker thread if for the emulator. This makes all porting easier in general, since now we can have a UI thread to handle all rendering, key I/O etc, and run the emulator thread as worker thread, which can emit the new processed frames to the UI thread etc.The Qt makes the threading extra easy:In my application I just inherited the emulator controller class from QThread, then I just call start() to start the thread. The QThread will guarantee that all slots will be executed in the context of that QThread after start has been called.Another nice trick is to use Qt::BlockingQueuedConnection as connection type when the signal must be prosessed before the emitting thread can continue.I’m really excited that all this communication between threads was so easy. No mutexes, or semaphores were required this time at all 🙂Here’s some code snippets how the threading was actually implemented.//starting the threadvoid QSnesController::Start(){ start( QThread::LowPriority );}//after the start() the thread will execute in the run()void QSnesController::run() { connect(this, SIGNAL(frameblit()), blitter, SLOT(render()), Qt::BlockingQueuedConnection ); gameloop(); disconnect(this, SIGNAL(frameblit()), blitter, SLOT(render()) ); }//in render frame callback functionemit( frameblit() );" }, { "title": "Implementing AntSnes with Qt part 2: Creating Settings View", "url": "/1455/", "categories": "Qt Development, Symbian Development", "tags": "AntSnesQtDev, Qt Development", "date": "2010-01-18 20:28:26 +0200", "snippet": "I’m using the Qt now, so I wanted to make a new fresh clean look to the UI. Therefore I dumped the old S60 UI style, which really wasn’t good design for touch devices.You can see my settings view in the picture below. The empty space on top of the view is for the Main/settings widget. The main widget which is empty in the picture will have a AntSnes logo, and maybe a screencapture from the currently selected saved state, which could be shown on top of the savestate box. When user click some settings button such as controls/video/audio the main widget will change to show selected settings. AtnSnes Settings viewOn upper panel there’s obious selections for “Load ROM”, reset, and continue. On application startup, you can just press continue to continue playing the previous game you were playing on last time.Implementing the settings view is really straightforward, all you have to do is to connect all the clicked signals from buttons to proper slots in you implementation class, and ask the view manager to change to the emulation view, if it’s required.Saving settings:Saving the settings is really easy in the Qt. You can save all settings as value pairs to the QSettings class. See the example below.//set version to settingsQSettings settings; settings.setValue(&quot;version&quot;, KAntSettingsVersion );//read the string backint version = settings.value(&quot;version&quot;).toInt();" }, { "title": "Implementing AntSnes with Qt part 1: Creating Views", "url": "/1451/", "categories": "Qt Development, Symbian Development", "tags": "AntSnesQtDev, Qt Development, Symbian", "date": "2010-01-15 19:46:19 +0200", "snippet": "This is first post on Qt App development series on Symbian. In this series I will describe how I made a new user interface with Qt for AntSnes. The same Ui will be later be used with gpsp and psx4all.The mobile UI should be pretty much different, than the desktop UI, so there are some challenges ahed. I’m still sure that the UI will be a lot cooler than the old AntSnes UI with Symbian Avkon layer.The UI will made with two separate views. The emulation view, and the settings view. The are both inherited from the QMainWidget, and they both are controlled by viewcontroller-class. The ViewController is only responsible to call hide() and show() functions to widgets, so there’s allways the correct view shown on the screen.Here’s an example how the app is started with the viewcontroller class.int main(int argc, char *argv[]){ QApplication a(argc, argv); ViewController* vc = new ViewController(); return a.exec();}Let’s create two views at viewcontroller’s constructorViewController::ViewController(){ emuView = new AntSnesQt(); emuView-&amp;gt;hide(); settingsView = new EmuSettings(); settingsView-&amp;gt;show();}An example how the ViewController is changing the current view:ViewController::showSettings(){ emuView-&amp;gt;hide(); settingsView-&amp;gt;show();}I decided to make the app to support only landscape orientation for 5th edition devices (for obious reasons), so I need to forse the orientaiton to the landscape mode. Here’s a tip how it’s done on Symbian. http://wiki.forum.nokia.com/index.php/CS001517_-_Lock_application_orientation_in_Qt_for_Symbian This is first Symbian dependent part of my application. There will be few more Symbian specific implementations, but my goal is to keep the application as close to the vanilla Qt, as possible. I want to keep the door open to the Maemo platform as well 🙂" }, { "title": "I&amp;#8217;ll be using Qt with gpsp and psx4all ports", "url": "/1421/", "categories": "Qt Development", "tags": "gpsp, psx4symbian, Qt Development", "date": "2009-12-08 16:58:26 +0200", "snippet": "Currently I have the dynamic recompilation running without the trampoline pattern (thanks to hinkka’s tips), so there’s no deoptimizations in the dynarec side anymore. However the speed is not nearly as good as it should be. It seems that the main issue is somewhere in the Symbian SDL port. Therefore I decided to dump the SDL port, and make my own port with Qt.The Qt will be the UI system for Symbian^4 and for future Maemo platforms, so they can easily be supported after this change. So basically I’ll be getting much better compatibility too. Actually the Qt is already working on the Current Maemo 5 and N900! The dynarecs were originally written for linux, so there really shouldn’t be any issues compiling and running the same SW with Maemo devices too.Using Qt with S60 versions from 3.1 to 5.0 is a bit more challenging. I doubt that the Qt’s blit is fast enough, so I’ll have to make old S60 blit-functions for them, but it’s OK, I’ll switch to the Qt blit later on.I’ll be using the Qt 4.6 which was released a while ago." }, { "title": "S60 5th editition doesn&amp;#8217;t have Multi-touch, you must wait untill Symbian^3", "url": "/1426/", "categories": "Symbian Development", "tags": "AntSnes, multi-touch, symbian^3", "date": "2009-12-01 17:33:21 +0200", "snippet": "I fixed the touch keys on the recent AntSnes 0.71 release. I though that I could support multi-touch in my application. I mean that there’s nothing preventing it to happen 🙂 It should just work.Well, the thing is that there’s no multi-touch in S60 5.0! So there’s also no multi-touch on Samsung i8910. Therefore I’m not wondering anymore why Nokia uses only those crappy resistive displays.According to Symbian roadmap the multi-touch is coming in Symbian^3. The Symbian^3 should come sometime at 2010. The chances of getting the multitouch to the AntSnes before that are close to 0.Before posting comments about “London Defend” take a look at this http://kgronholm.blogspot.com/2009/07/n810-multitouch-f-f-f-fun.html . So the multitouch is feasible with few keys even with resistive display and Symbian. But Snes has 12 keys plus antsnes key for the menu, so it’s really not going to work." }, { "title": "AntSnes v. 0.71: Fixed the touch keys", "url": "/1407/", "categories": "S60 5th edition", "tags": "AntSnes, n97, S60", "date": "2009-11-20 00:04:30 +0200", "snippet": "It’s really hard to test the touch with N97, but at least the d-pad seems to be working better and start/select seem to be responding too 🙂The project has now a wikipage at github. See the FAQ before asking any questions 🙂know issues: Audio doesn’t quite yet work](/wp-content/uploads/2009/10/antsnes_0.7.jpg) AntSnes for the 5th editionInstallation:Just download and install.If you got an error “unable to install”, or “certificate error” you might be having problems with the certificate. See my other blog post about two common fixes for this. Fixing self-signed certificate related problemsDownload:Sis installation file for 5th edition: AntSnes_v071.sis (16045 downloads) The S60 3rd edition should still use the old AntSnes 0.63 releasesources can be found from github: http://github.com/Summeli/AntSnes" }, { "title": "Symbian kernel is now open source: Driver developement is now possible!", "url": "/1364/", "categories": "Symbian Development", "tags": "ARM, kernel, rvct, Symbian", "date": "2009-10-28 18:19:58 +0200", "snippet": "The Symbian has released the kernel as open source! The development environment consists of: Open source kernel and other complementary packages RVCT 4.0 compiler: free for developers and companies of less than 20 employees Open source simulation environment based on QEMU Open source base support package for the low cost Beagle BoardThe kit has everything required for Symbian kernel development. I’m planning on testing the new kit and investigating if it would be possible to make my own memory driver to flush the cache for executing code without creating a special memory chunk for the code and using the IMB_Range deal.Why the this kind of driver is required, if the there’s already exist an API for self modifying code? Well, it would solve the memory mapping issue, which I explained on the post: Why Symbian is so slow compared to Linux.The driver would give significant boost for all applications relying on dynamic recompilation, or self modifying code. This would give a big performance boost for emulators such as gpsp and psx4all. I think that the psx4all would probably be playable with the special memory driver.Developing a driver:The first phase would be to implement a test software, and the driver with the QEMU. If I’ll get this far, then I could think about purchasing the BeagleBoard, which could be used for verifying the driver functionality with the actual hardware. If the driver works on the HW, then it would probably work on the actual phone too. However, the Symbian platform security will be a big problem preventing the installation of the driver into an actual phone.Symbian Signed:The Symbian signed will be a big issue for the driver. I would have to get all capabilities from device manufacturers such as nokia, samsung, and sony ericson to get a legal certificate to install the driver. We all know that’s not going to happen.I think that the user should be able to turn off the f*cking platform security if they want to. This could be even hidden under some special code, like the phone’s reset is currently implemented. Take also a look of the red pill mode on maemo. I think that Symbian needs something similar. Why not the user to bypass the platform security and let them have open devices.However, I know that there are already some hacks that can be used to install unsigned applications. You would have to do something like this to get the driver to work on an actual phone.I don’t want to get your hopes up**:As already being said: The driver development is possible, but it’s not possible to utilize that driver on you own phone. I’m not going to make any hacks for your to help you with the driver installation. I’m only interested to get more speed to the emulators with dynarec. I’ll release all the source code as usual, but I’m not sure if there ever will be a change to create a valid sis installation file for the driver. It’s just a nice thing to try out with the QEMU and the beagleboard." }, { "title": "AntSnes 0.7: Support for S60 5th edition", "url": "/1337/", "categories": "S60 5th edition", "tags": "AntSnes, n97, S60", "date": "2009-10-21 23:25:09 +0300", "snippet": "The 5th edition version is finally ready. I had N97 to test it with, and it runs really well with it 🙂 The keypad works really well! Unfortunately I didn’t have a Samsung’s I8910 to test the capacitive touch so I really can’t tell if it works, so feedback is welcome.The project has now a wikipage at github. So if you’ll find any good configs you can post them into the wiki page too.know issues: Audio doesn’t quite yet work](/wp-content/uploads/2009/10/antsnes_0.7.jpg)AntSnes for the 5th editionInstallation:Just download and install.If you got an error “unable to install”, or “certificate error” you might be having problems with the certificate. See my other blog post about two common fixes for this. Fixing self-signed certificate related problemsDownload:Sis installation file for 5th edition: AntSnes_v070.sis (5322 downloads) The S60 3rd edition should still use the old AntSnes 0.63 releasesources can be found from github: http://github.com/Summeli/AntSnes" }, { "title": "I Updated the AntSnes certificate", "url": "/1330/", "categories": "Symbian Development", "tags": "AntSnes", "date": "2009-10-20 17:12:23 +0300", "snippet": "The certificate in the last AntSnes 0.63 release got old, so I updated the certificates. The sis files should work again, cheers!" }, { "title": "Porting The AntSnes to the S60 5th edition", "url": "/1311/", "categories": "Video", "tags": "AntSnes, n97, S60", "date": "2009-10-12 20:19:44 +0300", "snippet": "I have been porting the AntSnes to the 5th edition. The reason I have been a bit lazy is that I can’t get the TRK debugger working with N97. So I have been working only with filelogger. That sucks!Here’s some video of the current state of the AntSnes to the 5th edition. I’m running only the regular c-core in the video, so the final version could be a bit faster with the asm-optimized emulator core. I just can’t get the previous asm-optimized core from 3rd edition to work with the S60 5th edition for some reason, and I’m too lazy to add all loggings to all sources.. Hopefully the next N97 firmware will help to my debugger problem.As you can see from the video I can run and jump at the same time, so it really does support 3 buttons at the same time, if the phone is capable of it (nice feature for chrono trigger).You might notice that I didn’t use menu to load the ROM, and the reason is that I can’t do it yet. The current version has some issues with the menus on the 5th edition that needs to be solved before I can really release the 5th edition version. But as you can see, I’m getting there 🙂Update:The menu problems are now solved. There’s only some small tasks before this emu is ready for you guys 🙂" }, { "title": "Generic Makefile Build Chain for Symbian OS v. 1.0", "url": "/1274/", "categories": "MinGW buidchain, Symbian Development", "tags": "Debugging, MinGW, msys, porting", "date": "2009-09-30 17:55:16 +0300", "snippet": "The build chain was originally made by Harry Li. I just continued the project and added support for static library linking, debugging etc. The 1.0 version can also build static libs, which can easily be linked from Symbian .mmp files,or Qt’s .pro files. Now we should be able to use the old already ported symbian engines(gpsp etc) with Qt too, so the porting process from the old Avkon based UI system to the Qt’s UI should be more pleasant 🙂MOTIVATION The C preprocessor can be used much better with makefile than with abld build. You can not compile a project relying heavily on c preprocessor with abld build, so the makefile build is really an essential tool for those projects. It makes porting software from linux based systems easier. The GCCE is just a GCC build for Symbian so now you can use GCC (hopefully almost same version) and same the build rules for the port in Symbian also. You can create static libs from the code that is hard to port (you need some custom compiling tricks), and then link into it from mmp-files or from Qt project files. The generic makefile build is also faster than the abld build. You could (hopefully) also make it faster with “-j” option with the future versions of GCCEINSTALLATIONHere are the instructions to use this environment. install SVG2SVGConvertter. The installation file can be found under EPOCROOT\\S60tools\\svg2svgt\\installer\\ The script should be executed from \\gms directory. The script also expects to have \\dist\\gcce and \\obj\\gcce directories under the gms directory, so you should also make these folders. The OS_HRH part doesn’t seem to work in the defines.mk. I solved this my replacing the include statement in epoc32\\gcce\\gcce.h to #if defined(__PRODUCT_INCLUDE__) #include &amp;amp;amp;lt;variant/Symbian_OS.hrh&amp;amp;amp;gt; //for MinGW //#include __PRODUCT_INCLUDE__ //quick hack #endif BUILDING WITH GENERAL MAKEFILEBuild with this “Gnu Make for Symbian”, you need three files Makefile, defines.mk and config.mk in myapp/gms path. You should also make folders myapp/gms/dist/gcce and myapp/gms/obj/gcce.Then you need to install MSYS . Also three environment parameters should be set like this: SYMBIAN_SDK_PATH = /c/symbian/9.1/s60_3rd_mr/ ACTIVE_PERL = /c/perl/bin/perl.exe CC_INSTALL_PATH = /c/Program\\Files/CSL\\ Code\\ SourceryPlease be noted the first one should contains a trailing slash like classic EPOCROOT environment variable. The second one is the ActivePerl .exe file used by some resource compiler script. The last one is the path to GCCE compiler installation path, without trailing slash. If there are spaces in any of them, please use “\\ ” backslash with a space instead.After all these done, you could change your working directory into the build home by “cd /c/myapp/gms“. Then use the following commands to build. “make debug” will do the debug build, “make release” will do the release build “make clean” will do the clean “make pack” will also do the makesis work.a sample of config.mk is shown on below. The syntax is pretty similar to the mmp file. Note that if you are creating a static library, then you don’t have to define uid’s and libraries to be linked etc (as in mmp-files).PROJECT_NAME = myproject#valid target types are EXE, DLL and LIB(static lib)TARGET_TYPE = EXEUID2 = 0UID3 = 0xDEADBABESECUREID = 0xDEADBABEEPOCSTACKSIZE = 80000EPOCHEAPSIZE = 5000000 64000000CAPABILITY = LocalServices+NetworkServicesSYSINCLUDE = $(EPOCROOT2)/include $(EPOCROOT2)/include/esdl $(EPOCROOT2)/include/libcUSERINCLUDE = ../incCXXSRCS = \\ myapp.cpp \\ myApplication.cpp \\ myAppView.cpp \\ myAppUi.cpp \\ myDocument.cpp \\ $(NULL)CSRCS = \\ main.c \\ $(NULL)ASRCS = \\ my_asm_optimized_source.S \\ $(NULL)RSS_TARGETS = $(DIST_PATH)/$(PROJECT_NAME).rsc $(DIST_PATH)/$(PROJECT_NAME)_reg.rscLANG_MACRO = SCSYSLIBRARY = euser.lib avkon.lib eikcore.lib eiksrv.lib apparc.lib estlib.lib efsrv.lib cone.libSTATICLIBRARY = mystaticlib.libCERT = /c/cert/mypro.certKEY = /c/cert/mypro.keyPASS =note that the capabilities are added with a “+” sign in between capabilties. The cert, key and pass variables are for app signing.DEBUGGINGYou have to be able to take the source files into your workspace in carbide, so you have to make a standard Symbian OS project from them. It does not have to compile, we just need to get the files into the workspace. Just make a standard bld.inf file and mmp-file where you list all the source files for the project.We are not going to build the project so we have to undo the building. Go to Window &amp;gt; Preferences &amp;gt; Run/Debug &amp;gt; Launching and then untick “Build (if required) before launching”.untick “Build (if required) before launching”.Then just right click the project and select Debug as -&amp;gt; Debug Configurations and configure the TRK and debugging stuff as you usually do. Then go into the Executables tab and select “Executables selected below” in “Load symbols for these executables and target them for debugging”. Now click add and find you executable under epoc32\\release\\gcce\\udeb folder and start debugging with TRK.KNOWN LIMITATIONS There is no build for help files, and the svg conversion is a bit limited. However the shouldn’t be any major issues, since you can build these with standard abld symbian build chain. The WINSCW build is not support, nor it never will be. The tool is made primary for porting libraries from Linux to Symbian.MODIFYING THE BUILD ENVIRONMENTModifying the build environment is quite easy, if you have any previous experience of editing Makefiles. You should take a look at Symbian OS post-linker “elf2e32” documentation if you like to change any symbian OS specific values. For example EPOCALLOWDLL data will be  “–dlldata” value to the post linker etc. The GCCE documentation can be found from the Codesourcery’s site. Here is link to the 2009q1 release documentation. &amp;lt;/br&amp;gt;GCCE UPDATEIf you also want to use newer version of GCCE you should see forum.nokia wiki page about the update process( changes in header files etc). You should make following modification to the MinGW build chain for newer GCCE. Modify the PATH variable and replace the old GCCE installation path with the new one. Change also CC_INSTALL_PATH variable into new GCCE installation path" }, { "title": "Fast image scaling with multiplier between 1-2", "url": "/1227/", "categories": "Symbian Development", "tags": "interpolate, porting, scaling", "date": "2009-09-25 17:30:19 +0300", "snippet": "I made a simple scaling function for gpsp4symbian to stretch the frames into full screen. The algorithm seems to be working quite well with scaling factors between 1-2. Thanks to AnotherGuest for tips.In this example 1.3 scaling factor is used for vertical scaling and 1.5 for horizontal scaling.Fist let’s make the scaling tables.void symb_create_interpolate_table() { TReal j = 1.33; //horizontal TReal loop = 0; TReal real_temp; for( TInt i=0; i&amp;lt;240; i++) { real_temp = i*j + 0.5; interptable_w[i] = real_temp; } j= 1.5; //vertical for( TInt i=0; i&amp;lt;160; i++) { real_temp = i*j + 0.5; interptable_h[i] = real_temp; } }Then we can use the pre-calculated tables to determinate if we have to interpolate a pixel or a line or not. There are all kinds of nice interpolation algorithms for images, but in this example I just reproduced the pixels for the speed. In theory we should also do some filtering after the interpolation, but that’s also abandoned for the speed.u16 *screenlarge_ptr = large_ptr;u16 *screengba_ptr = small_ptr;u8 i=0;u8 j =0;u16 t1;u16 t2;u16 stop;for(j=0; j&amp;lt;160;j++) { for( i=0; i&amp;lt;240; i++) { *screenlarge_ptr = *screengba_ptr; if( interptable_w[i] != (interptable_w[i+1] -1) ) { //interpolate, or reproduce the pixel screenlarge_ptr++; *screenlarge_ptr = *screengba_ptr; } screengba_ptr++; screenlarge_ptr++; } if( interptable_h[j] != (interptable_h[j+1] -1)) { //copy whole previous line screen_temp = screenlarge_ptr - 320; memcpy(screenlarge_ptr, screen_temp, 320*2); screenlarge_ptr += 320; } }" }, { "title": "Why Symbian is so slow compared to Linux", "url": "/1143/", "categories": "Symbian Development", "tags": "linux, Symbian", "date": "2009-09-16 17:25:35 +0300", "snippet": "Symbian phones are really slow compared to Linux based devices like gp2x etc. You really don’t get even near to the same performance (in frames per second) with Symbian phone compared to an open Linux device with similar ARM processor.Here’s couple of reason’s affecting my emulator ports.1. No direct access to the frame bufferSymbian doesn’t provide direct access to the frame buffer. The CDirectScreenAccess API is far from direct. All data goes through window server, so there’s cycles consumed in the sceduling (few context changes etc) and in the memcopy operations made by the Window Server. I’m assuming that the Window Server makes a transformation of the data passed to it via CDirectScreenAccess. This all makes the basic blit operation really slow in Symbian.I’m hoping that the Qt will provide faster access to the the frame buffer, which could provide significant speed increase to my emulators.2. Memory mapping and dynarecThe memory mapping affects only gpsp-emulator, but it affects to it heavily. I have to use the memory trampoline pattern to get the dynamic recompilation working in Symbian. This affects all the dynarec emulators a lot. I’m quite sure that psx4symbian would be possible with OMAP3 based devices, if Symbian memory mapping could be modified.I don’t think that Symbian is going to change their memory mapping just to get dynarec emulator to run faster. However I’m quite sure that this also slows down all self-modifiyingcode which is being run in the Symbian OS, so there might be a little hope. At least I could add an idea about modifying the memory mapping into the Symbian Foundation’s idea database." }, { "title": "gpSP4Symbian: S60 3rd edition preview", "url": "/1181/", "categories": "S60 3rd edition", "tags": "gpsp, N95", "date": "2009-09-10 20:24:49 +0300", "snippet": "This is just an initial release to gain some feedback how the port is currently working. I would like to know if you get any games running at correct speed. The first number in the fps-counter is telling how fast the emulator is running( it should be 60). If you do get something running at that speed, please also test the audio then. I have some tricks planned for the audio, but there’s really no point of doing it, if it doesn’t run fast enough.Please list some games in the comments that you got running well, so I can test the audio with those. It’s really no point of tweaking audio, if the game doesn’t run well. Tell also what phone you are using. It would be very interesting to have some results from phones with 600Mhz ARM processor.Know issues: key config is missing only one game can be loaded with each run audio may not work well. I really didn’t have a good setup to test it. You should turn audio on after a game has been loaded. Turning the audio on before loading the game will crash the emulator. The emulator requires a lot of CPU power. It really doesn’t work with my N96 or N73KEYCONFIGThere is no keyconfig yet available, so you’ll have to bear with these for a while. up/down/left/righ form the d-pad4: L5: A6: start7: R8: B9: select#: save state* :load stateleft softkey: menuInstallationInstall the emulator from the sis file, and then place the following files under E:\\GBA folder game_config.txt You should find this file with the installation package gba_bios.bin You should find this on your own. Please don’t post links to this file in the comments. Make sure to get an authentic one, it’ll be exactly 16384 bytes large and should have the following md5sum value: a860e8c0b6d573d191e4ec7db1b1e4f6 put also ROM’s under E:\\GBA folderAlso Nokia’s OpenC plugin is required. So if you don’t have it, then you should install it asap.And now you’re done. Have fun! 😉Credits:This emulator is based on gpsp originally written by Exophase. It also uses SDL port by Anotherguest. Symbian porting was made by me, Summeli.Download gpsp4Symbian_v01.sis (7403 downloads) [ad]SourcesThis is my first github project. Get my sources from http://github.com/SummeliCompatibility1. Spiderman – battle for new york (blue screen).2. Tekken advance (perfect).3. Street fighter – zero 3 upper (perfect)4. Disney magical quest starring mickey and minni (perfect)5. Dragonball Z – transformation (blue screen).6. Manic miner. (perfect).7. Harlem globetrotters – world tour (perfect).8. Super mario circuit. (perfect).9. Column Crown (perfect)10. Chu chu rocket (perfect)11. Disney piglet big game. (perfect).12. Disney sport skateboarding. (perfect).13. Denki blocks. (perfect).14. Disney extreme skate adventure. (perfect).15. Kim possible. (perfect).16. Dora the explorer – super star adventure. (perfect).17. Dexter laboratory – chess chalenge (perfect).18. Deal or no deal. (perfect).19. Dogz. (perfect).20. Dora the explorer – the search for pirate pig treasure (perfect).21. Dr.muto (bluescreen but when play perfect).22. Disney – the jungle book. (perfect).23. Demon driver – time to burn rubber. (bluescreen but when play perfect).24. Dr.mario. (perfect).25. Cartoon network – block party.26. Chessmaster. (perfect).27. Dragon quest – monster caravan heart. (perfect).28. Cartoon network – block party. (perfect).29. Yggdra union – we’ll never fight alone. (perfect but can’t save the game).30. Aggasi Tennis Generation (perfect).31. Super monkey ball Jr. (blue screen).32. Cabbage patch kid – the patch puppy rescue (perfect).33. Cabella’s big game hunter (bluescreen).34. Caesar palace advance – millenium gold edition.35. Camp lazio – leaky lake games. (perfect).36. Candy land chutes and ladders – original memory game.37. Capcom classic – mini misx. (perfect).38. Car batler joe. (perfect).39. Need for speed underground 2 (blue screen).40. Ultimate spiderman (bluescreen and when play it perfect)." }, { "title": "gpSP: Building A Memory Trampoline", "url": "/1106/", "categories": "ARM, Symbian Development", "tags": "ARM, assembler, gpsp, N95, porting, psx4symbian", "date": "2009-09-02 16:40:53 +0300", "snippet": "Thanks to the original gpSP creator Exophase for tips. I was really confused with BL instructions and the fact that the memory address was pointing into wrong memory area. The problem was in Symbian OS memory mappings. It’s a very common problem with dynarec and Symbian. I had prIn Symbian you can create memory partitions for dynamic recompilation with CreateLocalCode and IMB_Range deal, as I wrote few moths ago. The problem is the way how Symbian OS maps the memory. The pointer to the dynamic code area is too far from the ‘static code’. The BL instruction has a limit of +-32MB. The memory memory is mapped in different way, so we can not use the BL instruction to get to the static code from the dynamic code.BLX instruction would have longer range than BL, so that could be used. Using the BLX instruction would look like this.ldr reg, =addressblx regThe ldr instruction is actually meta-code and compiles into something like this:mov reg,#0xYYYorr reg,reg,#0xYY000orr reg,reg,#0xYY00000orr reg,reg,#0xY0000000bx regHowever the way the calling code skips over the bl instruction by adding a shifted bit to the pc it is impossible to replace this call with the register load plus BLX instruction. The solution is to make stubs to the ‘dynamic’ memory area for each function call instead, and then call the stub with bl, and use bx from that stub to reach out to the final destination.example stub:ldr reg, =addressbx reggenerating calls to the stub from dynamic memory area:bl #relative_offset_to_the_stubSo after branch from the actual code, we end up to the stub, and from there the code branches to the actual function. This is actually a big de-optimization to the gpsp, but it’s the only way to get it working. The memory trampoline could also be described with an image below." }, { "title": "gpSP4Symbian Teaser", "url": "/1164/", "categories": "Video", "tags": "gba, gpsp, N95", "date": "2009-08-30 18:25:33 +0300", "snippet": "I have been porting the gpPS to Symbian for a while now and it’s finally running! There is still a lot to do. For example UI, audio and some config stuff, but the actual core is now working. You can get a pretty good estimate about the speed from the video. It’s really not as fast as I hoped, but you should still be able to play some games with it. At least it should be better with newer phones and faster processors 😉" }, { "title": "PSX4All running on Symbian", "url": "/1128/", "categories": "Video", "tags": "N95, psx4all", "date": "2009-08-28 18:42:27 +0300", "snippet": "I’m currently porting gpSP to the Symbian. Psx4all uses pretty much same SDL stuff and same ARM assembly emitter as gpSP. I just took my porting tricks from gpSP and compiled them with psx4all and here is the result. It’s really not fully optimized yet, but you’ll get the idea that it’s not going to run on N95 smoothly 🙂 I still have some other tricks that would speed it up, but not enough.It’s just a proof of concept that this emu could be ported to Symbian with moderate effort, but it’s going to require a lot faster CPU. I might take a second look of this after I’ll get the gpSP port finished.See the performance by yourself." }, { "title": "Symbian patched Makekeys, now we can have self-signed certificates valid for 10 years", "url": "/1109/", "categories": "Symbian Development", "tags": "makekeys", "date": "2009-08-21 16:17:35 +0300", "snippet": "I don’t know how this got past me. Luckily I found out that Symbian has patched the makekeys.exe. The new one allows you to create self-signed certificates which can be valid for 10 years. I know that there are a lot of people like me whe are still using the old S60 3.0 MR SDK for maximium compability, which gives you certificates valid for only one year. This reminders me that the AntSnes certificate will end up soon, so I should at least sign it with the newer certificate.You should get the newer makekeys tool with new Symbian SDK’s. However, I didn’t get newer one with S60 3rd edition FP1 even when it should be using Symbian 9.2. So I guess that Nokia forgot to patch this tool into their SDK.If you didn’t get the new makekeys.exe from you new SDK you can download it from Symbian website. Enjoy!Using the new makekeys.exe:makekeys -cert \\[**-expdays |cert-expiry-in-days|**\\]\\[-password |password|\\] \\[-len \\[key-length|\\] -dname |distinguised-name-string| |priv ate-key-file| |public-key-cert| Notes:For -cert if the private-key-file does not exist it will be createdDistinguished name string format:CN – Common Name, e.g. CN=Joe BloggsCO – Country, e.g. CO=GBOR – Organisation, e.g. OR=Acme LtdOU – Organisational Unit, e.g. OU=DevelopmentEM – E-Mail address, e.g. EM=noone@nowhere.comA distinguished name strings needs at least two attributesCertificate expiry date(in days) can be specified by the user (optional) , else defaults to a year.Example Usage for creating a certificate valid for 10 years:makekeys -cert -expdays 3650 -password yourpassword -len 2048 -dname “CN=Joe Bloggs OU=Development OR=Acme Ltd CO=GB EM=noone@nowhere.com” mykey.key mycert.cerNow you don’t have to sign you app again each year!" }, { "title": "Generic Makefile Build Chain for Symbian OS With GCCE and MinGW", "url": "/1052/", "categories": "MinGW buidchain, Symbian Development", "tags": "Debugging, MinGW, msys, porting", "date": "2009-08-07 17:21:09 +0300", "snippet": "The build chain was originally made by Harry Li. I just continued the project and added support for static library linking, debugging etc.MOTIVATION The generic makefile gives you a better control of the build. You can define your own rules for each file, if you like. Therefore it’s also easier to fight against the compiler/build chain bugs. The C preprocessor can be used much better with makefile, than with abld build. You can not compile a project relying heavily on c preprocessor with abld build, so the makefile build makes the porting a lot easier. It makes porting software from linux based systems easier. The GCCE is just a GCC, build for Symbian so now you can use GCC (hopefully almost same version) and same the build rules for the project in Symbian also. The generic makefile build is also faster than the abld build.INSTALLATIONHere are the instructions to use this environment. install SVG2SVGConvertter. The installation file can be found under EPOCROOT\\S60tools\\svg2svgt\\installer\\ The script should be executed from \\gms directory. The script also expects to have \\dist\\gcce and \\obj\\gcce directories under the gms directory, so you should also make these folders. The OS_HRH part doesn’t seem to work in the defines.mk. I solved this my replacing the include statement in epoc32\\gcce\\gcce.h to #if defined(__PRODUCT_INCLUDE__)#include &amp;lt;variant/Symbian_OS.hrh&amp;gt; //for MinGW//#include __PRODUCT_INCLUDE__ //quick hack#endif&amp;lt;br /&amp;gt; BUILDING WITH GENERAL MAKEFILEBuild with this “Gnu Make for Symbian”, you need three files Makefile, defines.mk and config.mk in myapp/gms path. You should also make folders myapp/gms/dist/gcce and myapp/gms/obj/gcce.Then you need to install MSYS . Also three environment parameters should be set like this: SYMBIAN_SDK_PATH = /c/symbian/9.1/s60_3rd_mr/ ACTIVE_PERL = /c/perl/bin/perl.exe CC_INSTALL_PATH = /c/Program\\Files/CSL\\ Code\\ SourceryPlease be noted the first one should contains a trailing slash like classic EPOCROOT environment variable. The second one is the ActivePerl .exe file used by some resource compiler script. The last one is the path to GCCE compiler installation path, without trailing slash. If there are spaces in any of them, please use “\\ ” backslash with a space instead.After all these done, you could change your working directory into the build home by “cd /c/myapp/gms“. Then use the following commands to build. “make debug” will do the debug build, “make release” will do the release build “make clean” will do the clean “make pack” will also do the makesis work.a sample of config.mk is shown on below.PROJECT_NAME = myprojectTARGET_TYPE = EXEUID2 = 0UID3 = 0xDEADBABESECUREID = 0xDEADBABEEPOCSTACKSIZE = 80000EPOCHEAPSIZE = 5000000 64000000CAPABILITY = LocalServices+NetworkServicesSYSINCLUDE = $(EPOCROOT2)/include $(EPOCROOT2)/include/esdl $(EPOCROOT2)/include/libcUSERINCLUDE = ../incCXXSRCS = \\ myapp.cpp \\ myApplication.cpp \\ myAppView.cpp \\ myAppUi.cpp \\ myDocument.cpp \\ $(NULL)CSRCS = \\ main.c \\ $(NULL)ASRCS = \\ my_asm_optimized_source.S \\ $(NULL)RSS_TARGETS = $(DIST_PATH)/$(PROJECT_NAME).rsc $(DIST_PATH)/$(PROJECT_NAME)_reg.rscLANG_MACRO = SCSYSLIBRARY = euser.lib avkon.lib eikcore.lib eiksrv.lib apparc.lib estlib.lib efsrv.lib cone.libSTATICLIBRARY = mystaticlib.libCERT = /c/cert/gps60p.certKEY = /c/cert/gps60p.keyPASS =note that the capabilities are added with a “+” sign in between capabilties. The cert, key and pass variables are for app signing.DEBUGGINGYou have to be able to take the source files into your workspace in carbide, so you have to make a standard Symbian OS project from them. It does not have to compile, we just need to get the files into the workspace. Just make a standard bld.inf file and mmp-file where you list all the source files for the project.We are not going to build the project so we have to undo the building. Go to Window &amp;gt; Preferences &amp;gt; Run/Debug &amp;gt; Launching and then untick “Build (if required) before launching”. untick “Build (if required) before launching”.Then just right click the project and select Debug as -&amp;gt; Debug Configurations and configure the TRK and debugging stuff as you usually do. Then go into the Executables tab and select “Executables selected below” in “Load symbols for these executables and target them for debugging”. Now click add and find you executable under epoc32\\release\\gcce\\udeb folder and start debugging with TRK.KNOWN LIMITATIONS 1. There is no build for help files, and the svg conversion is a bit limited. However the shouldn’t be any major issues, since you can build these with standard abld symbian build chain.MODIFYING THE BUILD ENVIRONMENTModifying the build environment is quite easy, if you have any previous experience of editing Makefiles. You should take a look at Symbian OS post-linker “elf2e32” documentation if you like to change any symbian OS specific values. For example EPOCALLOWDLL data will be “–dlldata” value to the post linker etc.The GCCE documentation can be found from the Codesourcery’s site. Here is link to the 2009q1 release documentation. GCCE UPDATEIf you also want to use newer version of GCCE you should see forum.nokia wiki page about the update process( changes in header files etc). You should make following modification to the MinGW build chain for newer gcce. Modify the PATH variable and replace the old GCCE installation path with the new one. Change also CC_INSTALL_PATH variable into new GCCE installation path I modify the version numbers in scrips." }, { "title": "Degugging gpSP", "url": "/555/", "categories": "Symbian Development", "tags": "gpsp, S60", "date": "2009-08-04 18:49:36 +0300", "snippet": "The porting process of gpSP has been going forward quite well until this came up. The code behavior in debug session seems to be very strange.The following code should branch into the address located in register r0. The address 0x9cc00080 is marked as code in Symbian OS, and IMB_Range() has been called in prior to execution.bx r0  @r0 value is 0x9cc00080However, when debugging it seems that the pc is going into address 0x9b14a4a8.Here is some debug data from carbide: call stack registers during this time memory starting from 0x9cc00078. It seem to be mapped to code call stack after branch registers after branch I really can’t tell why this is behaving in such odd way. Hopefully some ARM guru is reading this and knows the cause for this problem.I’ll make a post, when i’ll get this one solved…UpdateI copyed the memory from the memory area that should be executed. I’m hoping to find some guys from gp32x to see, if they have similar memory in execute_arm_translate function before the first branch. If the memory seems different, then that would explain a lot.. here is the memory in a text. file memory.txtI originally used N96 with ARM9. I wanted to test this code also with N95 and a newer ARM11 processor. The debugger worked a lot better with N95. Here is the _real_ crash. generated memory in N95This one shows that it jumps correctly into the generated code area and it even works. However branch avay from the generated code is the problem. After this it will be in the unknown opcode. This is the point where the N96 actually crashes, the debugger just can’t handle the generated code are correctly.The lesson is to use N95 for debugging instead of crappy N96. However N96 was a great help in AntSnes porting, it helped me to point out the code that was working with ARM9 and failed with ARM11 and N95.The code is being executed inside the rom_translation_cache and it branches into the ram_translation_cache memory area. However that memory area is still null. Well, it gets easier now, since I now where to look at.. Hopefully I will be running the emulator on my next post 😉Update 2:The problem with the real crash was that the branch address weren’t inside the 32Mb limit of ARM processor. The solution was to implement a memory trampoline between the static and dynamic code blocks." }, { "title": "MinGW Symbian OS Build Chain: Debugging", "url": "/1001/", "categories": "MinGW buidchain, Symbian Development", "tags": "Debugging, GCCE, gpsp, MinGW, msys", "date": "2009-07-28 19:40:43 +0300", "snippet": "I have been developing the MinGW build chain to make the embedded open source porting easier since last spring. Now after my holidays I had some time to develop it even further. I added debugging with Carbide and TRK to the build system.At first we have are going to need to symbol files for debuggin. This is actually quite easy. Just add “-g” for the compiler, and it will compile a debug version. Then the linker will produce the .exe file with the symbols. A funny thing is that the Symbian OS Post-linker elf2e32 will rip off all debug symbols, so we have to make a copy from that executable before that. The symbol file is actually the pure .exe before the evil Symbian OS post-linker put it hands on it.The next step is to copy .sym .exe and .map files under EPOC32\\release\\GCCE\\UDEB folder so the Carbide can use them for debugging.Here is the updated Makefile for debug support: MakefileYou have to be able to take the source files into your workspace in carbide, so you have to make a standard Symbian OS project from them. It does not have to compile, we just need to get the files into the workspace. Just make a standard bld.inf file and mmp-file where you list all the source files for the project.We are not going to build the project so we have to undo the building. Go to Window &amp;gt; Preferences &amp;gt; Run/Debug &amp;gt; Launchingand then untick “Build (if required) before launching”.untick “Build (if required) before launching”.Then just right click the project and select Debug as -&amp;gt; Debug Configurations and configure the TRK and debugging stuff as you usually do. Then go into the Executables tab and select “Executables selected below” in “Load symbols for these executables and target them for debugging”. Now click add and find you executable under epoc32\\release\\gcce\\udeb folder and start debugging with TRK.This was a very nice exercise for my gpsp porting attempt. I still can’t be sure that if I got it any further, but with debugger I might be able to pinpoint some of my problems and look for the answers.I’m planning to merge all of this MinGW buildchain stuff in one complete tutorial. It’ll probably happen when I have had enough gpsp debuggin 🙂" }, { "title": "Symbian Debuggin: memory &amp;#038; register fump from exception", "url": "/755/", "categories": "Symbian Development", "tags": "exception handler", "date": "2009-07-28 19:39:47 +0300", "snippet": "I made my own Exception handler to make the memory dump into a file. The memory dumps can be used for debugging purposes.See what to do with the memory dump from NewLC article aobut tracking down the Hardware exceptions._LIT(KTestFile, &quot;C:\\\\Data\\\\myExcepption.txt&quot;);_LIT( KStackInfo, &quot;StackInfo: &quot;);void ExceptionHandler(TExcType){ RFs fs; RFile file; fs.Connect(); file.Open(fs,KTestFile,EFileWrite); RDebug::Print(_L(&quot;Exception handler&quot;)); HBufC8* buf = HBufC8::NewLC(1000); TPtr8 ptr = buf-&amp;gt;Des(); RThread().Context(ptr); file.Write(ptr); //save register info into a file RDebug::Printf( &quot;%S&quot;, buf ); CleanupStack::PopAndDestroy();}Using the Exception handler. The Exception handler can be easily set by callingSetExceptionHandler function.User::SetExceptionHandler(&amp;amp;ExceptionHandler,0xffffffff);Note that you can not use this at the same time with Carbide On device debugging, since the TRK will use the same mechanism to catch exceptions from the Hardware." }, { "title": "Fixing self-signed certificate related problems", "url": "/932/", "categories": "Symbian Development", "tags": "AntSnes, S60", "date": "2009-07-12 20:31:04 +0300", "snippet": "Currently there isn’t any freeware signing process in the Symbian signed, and I really don’t want to pay for the signing process, so that leaves only self-signing for me. The AntSnes is signed with self-signed certificate, so the user must grant the capabilities for the application (it requires none). This should all work very well with the standard installation process. The installer will ask if user allows the application to be installed etc.However sometimes there might be issues with the certificate. Then the installer will give you errors like “can not install”, or “certificate error” etc. One possibility is that your phone’s clock is set on wrong time. If the current time is less than the time was when the certificate was created, then the installer can not install the application, since the certificate does not make any sense.Fixing the timeGo to settings -&amp;gt;General Settings -&amp;gt;Date And Time settings and then set the current time right. See the images below. The menu structure is from N96, so it might be a little different in you phone.Online certificate checkAnother common problem seems to be that you have “Online certificate check” in use. The online cerificate check will only accept symbian signed certificates, which I don want to pay for. To install AntSnes or any other apps with self-signed certificate (usually freeware) you must turn it off. Go to Settings -&amp;gt; Applications -&amp;gt; App Manager -&amp;gt; Online certificate check -&amp;gt; Off. See the images below.online certificate checkdate and time" }, { "title": "The future of AntSnes", "url": "/842/", "categories": "Symbian Development", "tags": "AntSnes", "date": "2009-06-24 18:55:44 +0300", "snippet": "I’m pretty happy with the current 0.63 release. It works really with my N96. The S60 3.x platform seems to be behaving quite irrational with some functions. See my notes with 0.61 versus 0.63 release. The whole S60 dialog system seems to be able to cause some serious issues to the software. It also seems that there is little I can do to improve the emulator anymore, since every time when I fix something, it breaks something in some other S60 3.x phone.The 0.63 release will be the last major 3.x release. Well, there might be some small updates, if a new compiler comes around and produces faster code etc, but there will be no major updates. I’ll be getting the new N97 when it comes available in Finland, so the next version will be for S60 5th edition. I’m planning to add touch support for phones with capacitive touch (Samsung’s i8910). Hopefully there will be more 5th edition phones with capacitive touch in the future..[I’ll be on holiday in July, so there will be no updates durin that time 🙂" }, { "title": "Building AntSnes with GCCE 2009Q1-162", "url": "/870/", "categories": "Symbian Development", "tags": "AntSnes, GCCE", "date": "2009-06-23 17:34:19 +0300", "snippet": "I have been waiting for new GCCE patch from Nokia for ages. The old GCCE is based on GCC 3.4.3, which was originally published in November 2004. Forum.Nokia has a very good article how to hack your Symbian SDK to support newer GCCE versions. I have been testing the older version from 2008, but none of them really could build AntSnes. However the newest version can! It seems that codesourcer is going into right direction. I had to make some minor changes to the AntSnes code, but it seems to be working quite well.One modification was for switch case statements. The GCCE 2009Q1 – 162 seems to be more firm about switch case statements. For example following code isn’t allowed anymore:switch (a){ case 1: if(my cond) { int i=0; } break; case 2: //mycase break;}The switch case must be written like this:switch (a){ case 1: { if(my cond) { int i=0; } } break; case 2: //mycase break;}The new compiler doesn’t support -finline-functions optimization flag, so it might produce a bit slower code. However the compiler should have a lot of bugs fixed etc, so it could still be a lot faster.Download the Sourcery G++ Lite 2009q1-162 and try it out! It worked really well for me.I was testing the new compiler just fun, so I don’t know if anyone should use this build. If you want to try how much faster the new GCCE is, then you can try it. For all new users I would recomment the current AntSnes 0.63 release. However I think that the new GCCE build seems to be a bit faster with N96, so you are welcome to try it. Just don’t ask for bug fixes into this version, since there might be bugs caused by the unsupported compiler.AntSnes gcce 2009q1 – 162 build: AntSnes_GCCE2009Q1_build.sis" }, { "title": "AntSnes 0.63 &amp;#8211; Probably the best AntSnes release ever", "url": "/845/", "categories": "S60 3rd edition", "tags": "AntSnes, N95, N96", "date": "2009-06-17 22:42:05 +0300", "snippet": "AntSnes is a Snes9x port to S60 3.x. This is the best release since 04. Thanks to Mirek for testing 😉Changed in 0.63 vs. 0.61 The “remember last ROM directory” feature was removed, since it seems to be causing serious issues in some phones. If the “last rom directory” feature worked in your phone with previous releases, then you can download the older 0.62 release.Whats new: Battery saves New fancy icon savestate bug fixed. 0.5 users see known issues! Modified key config. All 0.5 version users must update the key config after this Release. After settings the screen to the N-gage mode the user must set keys again, since the S60 keypad doesn’t know that feature. The update was made for E75 users, who might not have the d-pad mapped for arrow keys Localization for: Danish, Hungarian, Indonesian, Brazilian Portuguese and Russian besides the English. Don’t like the localization? No prob. You can just download the English only package too.know issues: Audio still sucks! due to a bug in previous 0.5 version the save/load slot places have changed. Try to find you own correct save slot. Doesn’t affect to users who haven’t used the previous version.. There are still some issues in localizationThanks for the localization goes to following persons: Danish 07 by: Jens kikkenborg Hungarian 17 by: Attila Molnár Indonesian 59 by: Antok Brazilian Portuguese 76 by: Rodrigo Carus Russian 16 – Chepelev Anton Polish 27 – Krzysztof Urbanowicz Bulgarian 36 – Lil StenlyDid you want to make translation for your own native language, but missed AntSnes release 0.6? Don’t worry, you’ll get a new chance later when I’m making a port for the S60 5th edition.Installation:Just download and install.If you got an error “unable to install”, or “certificate error” you might be having problems with the certificate. See my other blog post about two common fixes for this. Fixing self-signed certificate related problemsVideo settings:Video Renderers: A restart is required after video renderer has been changed DirectScreenAccess -Default, works in every phone OpenGL ES 1.1 – Renders snes frames in full screen. Requires OpenGL ES 1.1, so it doesn’t work in all devices.Screen Orientatuions: A restart is required after orientation has been changed portrait – Default Landscape – Normal landscape N-Gage – landscape, but image is upside down. It’s meant for phones with “n-gage mode” like N95 and N96. The N96 can use the multimediakeys by default, but N95 users must use Magic keys to map keys 1-4 to multimediakeys.Frame skip: Auto – continually adjust the frame skip speed to make your games play as smooth as possible User define speed – some games might not run very well with Auto selection, since the frame rendering might take longer than a frame time with audio frame etc. Feel free to test different options, if you wish.Show FPS: Off – default On – Show frames per second on upper left corner.The Video settings modification takes effect, when AntSnes is started next time( a restart required).Audio Settings:The Audio isn’t probably working. If you get it working, please post you config, phone and the game 🙂Enable Audio: On/OffSample Rate: 8000Hz, 11025Hz, 16000Hz, 22050Hz and 44100Hz can be chosenStereo: On/OffVolume: Adjust volumeEnable SpeedHack: On/Off. The SpeedHack makes audio render a bit faster, but it might cause some errors with some roms.Key configStart key config to configure keys. The multimediakeys are not supported in the key config, but you can use any normal keys in here.Download:AntSnes English only: AntSnes_v063_en.sis (35635 downloads) AntSnes with localization: AntSnes_v063.sis (8720 downloads) sources: AntSnes_src_v0.63.zipUpdate: The AntSnes is not currently working with 5th edition devices, but the next release will be for the 5th edition. In the meanwhile see my blog post The future of AntSnesCompability:Here it is my new testing rom for your antsnes 0.6.3:1. alien vs predator2. bugs bunny rampage3. batman the revenge joker4. casper5. Contra 36. dino city7. mobile suit gundam w endless duel8. fatal fury 29. fifa 97 gold edition (work perect but the control freeze, can’t use the control)10. fifa 98 road to world cup (work perfect but same with fifa 97, the control freeze)11. flashback – the quest for identity12. go go ackman13. goof troop14. hook. Working fine but control doesn’t work15. jim lee wild C.A.T.S govert action team.16. jungle strike17. knight of the round.18. X-men – mutant apocalypse.19. WWF – RAW.20. WWF – wrestlemania.21. Wolvrine – adamantium rage.22. Wolf child.23. Wing commander.24. Urban strike.25. Uncharted water.26. TMNT – tournament fighter.27. Super mario world.28. Super turican 2.29. Adventure island 2.30. Sid Meier Civilization.31. Popeye – tale of teasing witch hag.32. Pilotwings.33. The ninja warrior.34. Mortal kombat.35. Mortal kombat 2.36. Megaman X 3.37. Mechwarrior 3050.38. Mechwarrior.39. Lucky Luke.40. Lion king.41. Legend.42. Zelda – a link to the past.43. Aladdin.44. Cyborg.45. Supermario kart.46. Zombie ate my neighbour.47. TMNT V" }, { "title": "AntSnes 0.62", "url": "/831/", "categories": "S60 3rd edition", "tags": "AntSnes, N95, N96, S60", "date": "2009-06-17 17:51:05 +0300", "snippet": "AntSnes is a Snes9x port to S60 3.x. This should be the best release since 0.4 😉 I want to make a good baseline, since the next release will be for S60 5th edition (I still don’t have the phone).Whats new: Battery saves New fancy icon savestate bug fixed. 0.5 users see known issues! Modified key config. All 0.5 version users must update the key config after this Release. After settings the screen to the N-gage mode the user must set keys again, since the S60 keypad doesn’t know that feature. The update was made for E75 users, who might not have the d-pad mapped for arrow keys Localization for: Danish, Hungarian, Indonesian, Brazilian Portuguese and Russian besides the English. Don’t like the localization? No prob. You can just download the English only package too.know issues: Audio still sucks! due to a bug in previous 0.5 version the save/load slot places have changed. Try to find you own correct save slot. Doesn’t affect to users who haven’t used the previous version.. There are still some issues in localization Some issues with settings with E51. Seems to work well with N95/N96 though.Thanks for the localization goes to following persons: Danish 07 by: Jens kikkenborg Hungarian 17 by: Attila Molnár Indonesian 59 by: Antok Brazilian Portuguese 76 by: Rodrigo Carus Russian 16 – Chepelev Anton Polish 27 – Krzysztof UrbanowiczDid you want to make translation for your own native language, but missed AntSnes release 0.6? Don’t worry, you’ll get a new chance later when I’m making a port for the S60 5th edition.Installation:Just download and installVideo settings:Video Renderers: A restart is required after video renderer has been changed DirectScreenAccess -Default, works in every phone OpenGL ES 1.1 – Renders snes frames in full screen. Requires OpenGL ES 1.1, so it doesn’t work in all devices.Screen Orientatuions: A restart is required after orientation has been changed portrait – Default Landscape – Normal landscape N-Gage – landscape, but image is upside down. It’s meant for phones with “n-gage mode” like N95 and N96. The N96 can use the multimediakeys by default, but N95 users must use Magic keys to map keys 1-4 to multimediakeys.Frame skip: Auto – continually adjust the frame skip speed to make your games play as smooth as possible User define speed – some games might not run very well with Auto selection, since the frame rendering might take longer than a frame time with audio frame etc. Feel free to test different options, if you wish.Show FPS: Off – default On – Show frames per second on upper left corner.The Video settings modification takes effect, when AntSnes is started next time( a restart required).Audio Settings:The Audio isn’t probably working. If you get it working, please post you config, phone and the game 🙂Enable Audio: On/OffSample Rate: 8000Hz, 11025Hz, 16000Hz, 22050Hz and 44100Hz can be chosenStereo: On/OffVolume: Adjust volumeEnable SpeedHack: On/Off. The SpeedHack makes audio render a bit faster, but it might cause some errors with some roms.Key configStart key config to configure keys. The multimediakeys are not supported in the key config, but you can use any normal keys in here.DownloadAntSnes English only: AntSnes_v062_en.sisAntSnes with localization: AntSnes_v062.sissources: AntSnes_src_v062.zip" }, { "title": "AntSnes 0.61", "url": "/810/", "categories": "S60 3rd edition", "tags": "AntSnes, N95, N96, S60", "date": "2009-06-16 17:01:35 +0300", "snippet": "AntSnes is a Snes9x port to S60 3.x.Bugs Fixed in 6.1 from 6.0 OpenGL ES SupportWhats new: Battery saves New fancy icon savestate bug fixed. 0.5 users see known issues! Modified key config. All 0.5 version users must update the key config after this Release. After settings the screen to the N-gage mode the user must set keys again, since the S60 keypad doesn’t know that feature. The update was made for E75 users, who might not have the d-pad mapped for arrow keys Localization for: Danish, Hungarian, Indonesian, Brazilian Portuguese and Russian besides the English. Don’t like the localization? No prob. You can just download the English only package too.know issues: Audio still sucks! due to a bug in previous 0.5 version the save/load slot places have changed. Try to find you own correct save slot. Doesn’t affect to users who haven’t used the previous version.. There are still some issues in localizationThanks for the localization goes to following persons: Danish 07 by: Jens kikkenborg Hungarian 17 by: Attila Molnár Indonesian 59 by: Antok Brazilian Portuguese 76 by: Rodrigo Carus Russian 16 – Chepelev Anton Polish 27 – Krzysztof UrbanowiczDid you want to make translation for your own native language, but missed AntSnes release 0.6? Don’t worry, you’ll get a new chance later when I’m making a port for the S60 5th edition.Installation:Just download and installVideo settings:Video Renderers: A restart is required after video renderer has been changed DirectScreenAccess -Default, works in every phone OpenGL ES 1.1 – Renders snes frames in full screen. Requires OpenGL ES 1.1, so it doesn’t work in all devices.Screen Orientatuions: A restart is required after orientation has been changed portrait – Default Landscape – Normal landscape N-Gage – landscape, but image is upside down. It’s meant for phones with “n-gage mode” like N95 and N96. The N96 can use the multimediakeys by default, but N95 users must use Magic keys to map keys 1-4 to multimediakeys.Frame skip: Auto – continually adjust the frame skip speed to make your games play as smooth as possible User define speed – some games might not run very well with Auto selection, since the frame rendering might take longer than a frame time with audio frame etc. Feel free to test different options, if you wish.Show FPS: Off – default On – Show frames per second on upper left corner.The Video settings modification takes effect, when AntSnes is started next time( a restart required).Audio Settings:The Audio isn’t probably working. If you get it working, please post you config, phone and the game 🙂Enable Audio: On/OffSample Rate: 8000Hz, 11025Hz, 16000Hz, 22050Hz and 44100Hz can be chosenStereo: On/OffVolume: Adjust volumeEnable SpeedHack: On/Off. The SpeedHack makes audio render a bit faster, but it might cause some errors with some roms.Key configStart key config to configure keys. The multimediakeys are not supported in the key config, but you can use any normal keys in here.DownloadAntSnes English only: AntSnes_v061_en.sisAntSnes with localization: AntSnes_v061.sissources: AntSnes_v061.zip" }, { "title": "AntSnes 0.6", "url": "/523/", "categories": "S60 3rd edition", "tags": "AntSnes, S60", "date": "2009-06-15 22:41:51 +0300", "snippet": "AntSnes is a Snes9x port to S60 3.x.Whats new: Battery saves New fancy icon savestate bug fixed. 0.5 users see known issues! Modified key config. All 0.5 version users must update the key config after this Release. After settings the screen to the N-gage mode the user must set keys again, since the S60 keypad doesn’t know that feature. The update was made for E75 users, who might not have the d-pad mapped for arrow keys Localization for: Danish, Hungarian, Indonesian, Brazilian Portuguese and Russian besides the English. Don’t like the localization? No prob. You can just download the English only package too.know issues: Audio still sucks! due to a bug in previous 0.5 version the save/load slot places have changed. Try to find you own correct save slot. Doesn’t affect to users who haven’t used the previous version.. The OpenGL ES does not work. There is a fix coming soon..Thanks for the localization goes to following persons: Danish 07 by: Jens kikkenborg Hungarian 17 by: Attila Molnár Indonesian 59 by: Antok Brazilian Portuguese 76 by: Rodrigo Caruso Russian 16 – Chepelev Anton Polish 27 – Krzysztof UrbanowiczDid you want to make translation for your own native language, but missed AntSnes release 0.6? Don’t worry, you’ll get a new chance later when I’m making a port for the S60 5th edition.Installation:Just download and installVideo settings:Video Renderers: A restart is required after video renderer has been changed DirectScreenAccess -Default, works in every phone OpenGL ES 1.1 – Renders snes frames in full screen. Requires OpenGL ES 1.1, so it doesn’t work in all devices.Screen Orientatuions: A restart is required after orientation has been changed portrait – Default Landscape – Normal landscape N-Gage – landscape, but image is upside down. It’s meant for phones with “n-gage mode” like N95 and N96. The N96 can use the multimediakeys by default, but N95 users must use Magic keys to map keys 1-4 to multimediakeys.Frame skip: Auto – continually adjust the frame skip speed to make your games play as smooth as possible User define speed – some games might not run very well with Auto selection, since the frame rendering might take longer than a frame time with audio frame etc. Feel free to test different options, if you wish.Show FPS: Off – default On – Show frames per second on upper left corner.The Video settings modification takes effect, when AntSnes is started next time( a restart required).Audio Settings:The Audio isn’t probably working. If you get it working, please post you config, phone and the game 🙂Enable Audio: On/OffSample Rate: 8000Hz, 11025Hz, 16000Hz, 22050Hz and 44100Hz can be chosenStereo: On/OffVolume: Adjust volumeEnable SpeedHack: On/Off. The SpeedHack makes audio render a bit faster, but it might cause some errors with some roms.Key configStart key config to configure keys. The multimediakeys are not supported in the key config, but you can use any normal keys in here.DownloadAntSnes with localization: AntSnes_v06.sisAntSnes English only: AntSnes_v06_en.sissources: AntSnes_v06.zip" }, { "title": "AntSnes localization &amp;#8211; help required", "url": "/726/", "categories": "Symbian Development", "tags": "AntSnes", "date": "2009-06-02 22:50:44 +0300", "snippet": "Would you rather use AntSnes in your native language? With your help it could be possible with the next AntSnes release. At least Russian translation was requested. However I can’t speak Russion, so I can’t do the localization. Now you can contribute to the AntSnes project by translating the strings used in the AntSnes to you native language.First download the Original AntSnes English Strings. There are three language files in the zip, and all of them needs to be translated for full localization.Then translate the strings, and save to files in format AngSnesGeneralStrings.lxx, where xx is the Symbian OS language code for you language. You can find the language codes on the table below. For example Russian files should be name as AntSnesGeneralStrings.l16. Test 00 Polish 27 Greek 54 Somali 81 UK English 01 Slovenian 28 Cyprus Greek 55 International Spanish 82 French 02 Chinese (Taiwan) 29 Gujarati 56 Latin American Spanish 83 German 03 Chinese (Hong Kong) 30 Hebrew 57 Swahili 84 Spanish 04 Chinese (PRC) 31 Hindi 58 Finland Swedish 85 Italian 05 Japanese 32 Indonesian 59 Tajik 86 Swedish 06 Thai 33 Irish 60 Tamil 87 Danish 07 Afrikaans 34 Swiss Italian 61 Telugu 88 Norwegian 08 Albanian 35 Kannada 62 Tibetan 89 Finnish 09 Amharic 36 Kazakh 63 Tigrinya 90 American English 10 Arabic 37 Khmer 64 Cyprus Turkish 91 Swiss French 11 Armenian 38 Korean 65 Turkmen 92 Swiss German 12 Tagalog * 39 Lao 66 Ukrainian 93 Portuguese 13 Belarussian 40 Latvian 67 Urdu 94 Turkish 14 Bengali 41 Lithuanian 68 Uzbek 95 Icelandic 15 Bulgarian 42 Macedonian 69 Vietnamese 96 Russian 16 Burmese 43 Malay 70 Welsh 97 Hungarian 17 Catalan 44 Malayalam 71 Zulu 98 Dutch 18 Croatian 45 Marathi 72 Other 99 Belgian Flemish 19 Canadian English 46 Moldavian 73 English (APAC TW) 157 Australian 20 International English 47 Mongolian 74 English (APAC PRC) 158 Belgian French 21 South African English 48 Norwegian Nynorsk 75 English (APAC HK) 160 Austrian 22 Estonian 49 Brazilian Portuguese 76 English (APAC, Japanese) 161 New Zealand 23 Farsi 50 Punjabi 77 English (APAC, Thai)   International French 24 Canadian French 51 Romanian 78     Czech 25 Scots Gaelic 52 Serbian 79     Slovak 26 Georgian 53 Sinhalese 80     Make a zip-file from you new translated language files and send an email for me to summeli @ remove spam summeli . fi. I’ll make a translation credits to the next release notes, so you can tell me a nick or an email to the translation credits, if you like.The new release in June, so you’ll have at least couple of weeks to make the translation. I’ll be on holiday at July, so don’t expect to get any updates soon after 0.6 release.Here is a current list of languages in AntSnes. UK English 01 Danish 07 by: Jens kikkenborg Hungarian 17 by: Attila Molnár Indonesian 59 by: Antok Brazilian Portuguese 76 by: Rodrigo Caruso Russian 16 by: Chepelev Anton Polish 27 by: Krzysztof UrbanowiczDon’t send me languages that I already have 😉Thanks for all translators. The new release is ready, and I don’t need any more translations for that. There might be a new localization round before next release." }, { "title": "Building AntSnes", "url": "/719/", "categories": "Symbian Development", "tags": "AntSnes", "date": "2009-06-01 13:46:29 +0300", "snippet": "I recently received a question via email how to build AntSnes. I decided to make a blog post about it, if anyone else wants to know. AntSnes build as any other S60 project, so if you are already familiar with S60 development, you already know how to build AntSnes. First you should take a peak at Forum.Nokia Getting started page. The learning curve for Symbian apps is quite steep, which means that you have to spend quite a lot of time for documentation.Required tools: S60 3.0 MR Release Carbide 2.x From Forum.Nokia GCCE – you should get a copy of GCCE with 3.0 MR Release. Remember to install it.After you have installed everything you need, you can start building. You should download the AntSnes sources under the new S60 MR release folder. Remember to set the EPOCROOT variable to point into you existing S60 installation.You can build the whole project by running these commands at the AntSnes root directory.bldmake bldfilesabld build gcce urel" }, { "title": "Using ARM Memory Barrier in Symbian OS", "url": "/632/", "categories": "ARM, Symbian Development", "tags": "ARM, gpsp", "date": "2009-05-10 00:26:02 +0300", "snippet": "Today I have been digging the methods to to make a gpSP( I think this is the best GBA emulator) port to Symbian OS.Thanks to the Exophase for developing this wonderful piece of software and for ZodTTD for the awesome ARM port! The gpSP is running “generated” ARM binary in the ARM processor’s memory, so the Memory Barrier has to be used. The next problem is to get the code running on the ARM under Symbian OS.The ARM9 reference manual tells this about Memory Barrier. Whenever code is treated as data, for example self-modifying code, or loading code intomemory, then a sequence of instructions called an Instruction Memory Barrier (IMB)operation must be used to ensure consistency between the data and instruction streamsprocessed by the ARM926EJ-S processor.Usually the instruction and data streams are considered to be completely independentby the ARM926EJ-S processor memory system, and any changes in the data side arenot automatically reflected in the instruction side. For example if code is modified inmain memory then the ICache might contain stale entries. To remove these stale entriespart or all of the ICache must be invalidated.In Symbian OS the Kernel should take care about ICache invalidation. The Symbian has User library for user side interaction with the Kernel. If we want to generate our own code and run it in specific memory are, we have to first tell to the kernel to threat this area as code. The code example for doing this is below.RChunk codechunk;TInt error = codechunk.CreateLocalCode(codechunk_size,codechunk_siz);void* codechunk_ptr = codechunk.Base();Now the codechunk is created. The ARM documentation told that ICache must be invalidated before executing the code. The Symbian should take care for invalidating the ICache, when IMB_Range is called.void CLEAR_INSN_CACHE(void* code, int size){User::IMB_Range( code, (void*)(code + size));}" }, { "title": "QT Mobile UI design", "url": "/557/", "categories": "Qt Development", "tags": "Qt4, S60", "date": "2009-05-07 15:34:34 +0300", "snippet": "I have been lately prototyping new SW with QT4 and I have some thoughts about mobile UIs. The QT was originally developed for desktops, so it doesn’t yet have all features required for mobile UI’s. The current literature about QT4 is not very well suitable for mobile development, since the books mainly focus on desktop UI programming. Phones with small screens are very different environment, and you should design the UI very carefully before implementing it.TabsTabs are widely used in desktop environment, and I’m not sure how well they fit in mobile devices. It’s already possible to do tabs in S60 Avkon UI, so it should be OK with QT too.Using different windows/viewsIn S60 we have views based architecture architecture. Using different views in mobile SW feels like a pretty good idea to me. Most of S60 software uses views, and it’s working really well with small displays. Perhaps you don’t have to create many views with devices equipped with large screen like Nokia’s tablets with Maemo, but for S60 3.x devices you definitely should use views for them.In QT4 the views can be implemented with QMainWindow, The QMainWindow can have one menu and several widgets on it. Changing the view is easy, just change the mainwindow on the screen, by deleting the old one, or calling hide() function when you want to change view.Using keys**All QT4 enabled devices doesn’t have touch screen, so you should also make it possible to use the application with keys only.Different orientationsThe S60 devices can often change orientations. For example the 5800 express music can be used in portrait or landscape mode. I’m not sure if there is a way to change orientation in current QT 4.5 release. At least I didn’t find it.Adapting into different resolutionsCurrently S60 3.x phones have 240 x 320 resolution and 5.0 phones have 640 x 360 resolution, and maemo is 800 x 480. The application should scale into all of there solutions, plus it should be usable in portrait and landscape modes. One way of handling this issue, is to make a separate ui design for each resolution, and orientation, which takes a lot of work with small application.The other solutions is to dynamically look at devices resolution and scale all the widgets according to the current resolution, but I think that UI optimization with separate UI design can provide better user experience.MenusIn S60 Qt4 version you can have one menu for each QMainWindow. However I don’t think that menus are good for touch screen devices, since it’s more intuitive just to click different objects. Checking menus in different views is not very good convenient, if you are using touch. The menu might be even confusing with touch devices, since you should press a button in each view to see what’s hidden in the menu.The menus could be very usable for games &amp;amp; emulators. You could pause the game by pressing menu, and then go into the settings etc. And there is basically only one main view in the game programs plus settings views. The settings views can even share the same menu, so they shouldn’t be too confusing.Different UI for touch screen devicesIn current S60 devices touch enabled 5th edition phones have bigger resolution than 3.x based non touch devices. I don’t know if the are going to add touch to the low resolution phones in the future, but currently it feels like you should desing two separate UI systems with QT, if you wan to run your application in both devices. One for the touch, and the other one (with menus) for phones without touch, since menu might be optimal solution in some cases for non touch devices." }, { "title": "Powerful S60 phones and Maemo tablet coming to markets this year", "url": "/576/", "categories": "Planning", "tags": "AntSnes, S60", "date": "2009-04-22 15:55:20 +0300", "snippet": "The new Samsung i8910 is coming to stores at summer. You can see a review at allaboutsymbian. Samsung i8910 will be S60 5.0 based device with capacitive touch screen and OMAP3 chipset. The OMAP3 chipset is very powerful platform with OpenGL ES 2.0 and ARM cortex processor. It will probably be a lot faster than iphone. Also a new Maemo device with OMAP3 is coming, take a look at Maemo roadmap.Long waited Nokia N97 is also coming to markets at summer, but there is no information about the CPU inside the phone. Nokia 5630 XM will have 600MHz ARM processor, so that’s also very interesting release. Unfortunately the 5630 has a small screen, so I’m really not eager to buy it. I really hope that the Nokia N97 has better processor than 5800 xpress music, so I could run AntSnes with better performance. The Nokia N97 style full qwerty keypad + OMAP3 platform would be the dream phone for gaming and emulation. The touch screen( even capacitive) isn’t so well suited for emulators, since the player want’s to use more than 1, or 2 (with capasite touch) buttons at same time.Update: The Nokia N97 will have ARM11 with only 437Mhz clock rate. There is also no sign about Opengl ES accelerated 3D graphics. I think that it should be in the speks close to the processor like it was for example with N95. I’m so disappointed. The N97 will be dissapointment for all gamers. It just doesn’t have the juice that phones should have at year 2009. How long we’ll have to wait for 5th edition device with keyboard, fast processor and 3d acceleration. Now the Samsung’s i8910 looks a lot more appealing. I hope that the prize will go down fast.Update: Nokia has also announced Nokia E52, which is a S60 3.2 phone with 600MHz ARM11 processor. The E52 will also be quite cheap, around 245 euros in Europe. It’s kind of hard to decide which phone to buy next, when there are cheap and powerfull phones with old S60 3.2 and weaker phones with new S60 5.x wiht homescreen etc.I think that the new Samsung i8910 could emulate even ps1 pretty well. See what ZodTTD did with Pandora, which is also OMAP3 based device. ZodTTD already ported the psx4all to the iphone, and I think it could probably be ported to Opengl ES 2.0 enabled S60 device, like Samsung i8910. The psx4all would be very interesting project to port, when new phones arrive.It would also be very interesting to run AntSnes with faster phone, and newest Snes9x sources. The current version of AntSnes is based on older Snes9x branch + ASM optimizations made by various GP32 developers, so it has some bugs on it. It’s hard to fix those bugs, without loosing performance.I’m also waiting for better and faster QT port to S60. I have already started the QT development with N810 Maemo platform, and now I’m waiting for official S60 release. The next maemo device will have QT and OpenGL ES 2.0, which will also be in Samsung i8910 phone, so we should be able to compile same application to Maemo and S60 phones. The QT speed shoudn’t be an issue with OpenGL ES, since the QT is used only to get a surface to draw for Opengl ES 2.0. I’m not going to spend 999 euros for new Samsung i8910 phone, but I could buy the new Maemo internet tablet, if the prize is reasonable." }, { "title": "MinGW Symbian Build Chain", "url": "/502/", "categories": "MinGW buidchain, Symbian Development", "tags": "ARM, assembler, gpsp, MinGW, msys, porting", "date": "2009-04-15 18:32:19 +0300", "snippet": "I saw harry Li’s blog post about generic symbian makefile, and I found it very interesting. The makefile seems to be a very good tool for porting software from other platforms into Symbian OS.The MinGW in also nice build solution, since it doesn’t modifiy existing environment, so it can be used in parallel with old build setup. My version of the generic makefile is using newer GCCP and it supports assembly files and static libraries. This is a nice setup for building asm optimized sources in Symbian environment. If you also want to use newer version of GCCE you should see forum.nokia wiki page about the update process( changes in header files etc).The MinGW makes it easy to modify the build, so we have a better control of the build process than mystical Symbian OS buildchain. It took less than 10 minutes to add the support for assembler. It’s also very fast to change between two GCCE versions with this.I made some small modifications for my own purposes. Here are the instructions to use this environment. install SVG2SVGConvertter. The installation file can be found under EPOCROOT\\S60tools\\svg2svgt\\installer\\ The script should be executed from \\gms directory. The script also expects to have \\dist\\gcce and \\obj\\gcce directories under the gms directory, so you should also make these folders. The OS_HRH part doesn’t seem to work in the defines.mk. I solved this my replacing the include statement in epoc32\\gcce\\gcce.h to #if defined(__PRODUCT_INCLUDE__) #include &amp;lt;variant/Symbian_OS.hrh&amp;gt; //for MinGW //#include __PRODUCT_INCLUDE__ //quick hack #endifSome modifications for newer GCCE. Modify the PATH variable and replace the old GCCE installation path with the new one. Change also CC_INSTALL_PATH variable into new GCCE installation path I modify the version numbers in scrips.Know limitations: There is no build for help files, and the svg conversion seems to be a bit limited. However the shouldn’t be any major issues, if old buildchain is still used for some builds.Download the makefile and defines.mka sample of config.mk is shown on below.PROJECT_NAME = myprojectTARGET_TYPE = EXEUID2 = 0UID3 = DEADBABESECUREID = DEADBABEEPOCSTACKSIZE = 80000EPOCHEAPSIZE = 5000000 64000000CAPABILITY = NONESYSINCLUDE = $(EPOCROOT2)/include $(EPOCROOT2)/include/esdl $(EPOCROOT2)/include/libcUSERINCLUDE = ../incCXXSRCS = \\ myapp.cpp \\ myApplication.cpp \\ myAppView.cpp \\ myAppUi.cpp \\ myDocument.cpp \\ $(NULL)CSRCS = \\ main.c \\ $(NULL)ASRCS = \\ my_asm_optimized_source.S \\ $(NULL)RSS_TARGETS = $(DIST_PATH)/$(PROJECT_NAME).rsc $(DIST_PATH)/$(PROJECT_NAME)_reg.rscLANG_MACRO = SCSYSLIBRARY = euser.lib avkon.lib eikcore.lib eiksrv.lib apparc.lib estlib.lib efsrv.lib cone.libSTATICLIBRARY = mystaticlib.libCERT = /c/cert/gps60p.certKEY = /c/cert/gps60p.keyI tested the MinGW buildchain and scripts by compiling the gpSP (probably the best GBA emulator) from GP32 platform to Symbian OS. The gpSP was also nice test, since it uses the c preprocessor (cpp) alot, and the old Symbian buildchain fails miserably building the gpSP sources. However with MinGW the build looks very promising, so I’m really temptated to continue with this port." }, { "title": "AntSnes release 0.5 : It&amp;#8217;s still silent", "url": "/391/", "categories": "S60 3rd edition", "tags": "AntSnes, S60", "date": "2009-04-02 20:40:06 +0300", "snippet": "AntSnes is taking small steps to improve quality and get the audio working. I really have no idea why the audio isn’t working with current version, but it already has some nice updated, so I decided to make another small step. The 0.5 release is ready 🙂The audio isn’t working in 0.5 release ( if you get it working with some phone/configuration please let me know too). I’m saying that I’m outsourcing the testing of this SW to the users 🙂 I did not get the audio working, so I’m hoping that someone will.However I made a special 0.4 build for you to hear that you are not missing much. The 0.4_audio version has hard coded audio, so you can listen what the audio should sound like in 0.5 version. As you can probably hear, the audio is really not high priority for current phones.Whats new: FPS counter (works currently only with direct screen access) User can adjust frame skipping remembers last rom directoryTODO’s for next release Battery saves Fix audioInstallation:Just download and installVideo settings:Video Renderers: A restart is required after video renderer has been changed DirectScreenAccess -Default, works in every phone OpenGL ES 1.1 – Renders snes frames in full screen. Requires OpenGL ES 1.1, so it doesn’t work in all devices.Screen Orientatuions: A restart is required after orientation has been changed portrait – Default Landscape – Normal landscape N-Gage – landscape, but image is upside down. It’s meant for phones with “n-gage mode” like N95 and N96. The N96 can use the multimediakeys by default, but N95 users must use Magic keys to map keys 1-4 to multimediakeys.Frame skip: Auto – continually adjust the frame skip speed to make your games play as smooth as possible User define speed – some games might not run very well with Auto selection, since the frame rendering might take longer than a frame time with audio frame etc. Feel free to test different options, if you wish.Show FPS: Off – default On – Show frames per second on upper left corner.The Video settings modification takes effect, when AntSnes is started next time( a restart required).Audio Settings:The Audio isn’t probably working. If you get it working, please post you config, phone and the game 🙂Enable Audio: On/OffSample Rate: 8000Hz, 11025Hz, 16000Hz, 22050Hz and 44100Hz can be chosenStereo: On/OffVolume: Adjust volumeEnable SpeedHack: On/Off. The SpeedHack makes audio render a bit faster, but it might cause some errors with some roms.Key configStart key config to configure keys. The multimediakeys are not supported in the key config, but you can use any normal keys in here.Download:Sis file: antsnes_v05.sis[ad]sources: antsnes_v05.zipDownload the 0.4 release with hardcoded audio supportNOTE: if you decide to try 0.4 audio version and you have already have installed 0.5 version, then you have to uninstall 0.5 before downgrading to 0.4 version.Sis file: antsnes_v04_audio.sisAs you can probably hear the audio support is working, but it’s requiring a lot of CPU as anticipated. So it is there, but it’s not usable with every game. Maybe the new 600Mhz phones will run audio smoothly…" }, { "title": "Bugs in S60 Dialogs", "url": "/440/", "categories": "Symbian Development", "tags": "CAknNoteDialog, S60", "date": "2009-03-18 22:01:36 +0200", "snippet": "I found this when trying to get AntSnes remembering the last used directory. It was actually really simple and everything worked according to S60 documentation with N96, but N95-2 had some SW bugs on dialogs.selected = AknCommonDialogs::RunSelectDlgLD(ptr,_L(E:\\\\SnesRoms\\\\),R_MEMORY_SELECTION_DIALOG, R_LOAD_ROM_DIALOG);In N95-2 the code goes to the E root, like it wouldn’t find any roms under roms directory. Maybe firmware update helps…I also had some problems in the past with CAknNoteDialog and capturing the key that was pressed to dismissing the dialog. According to S60 docs it should have worked, but it didn’t. My solution was to create my own Dialog class for the key config. It’s really hacked together in few minutes, but it’s good enough for the purpose (it’s not going into any platform, but it does what is shoud :).class CAntKeyDialog : public CAknNoteDialog{public:CAntKeyDialog(const TTone aTone, const TTimeout aTimeout); ~CAntKeyDialog(); TInt RunKeyDialogLD( const TDesC; aText);private: TKeyResponse OfferKeyEventL(const TKeyEvent aKeyEvent,TEventCode aType); TInt iKeyScanCode; CActiveSchedulerWait* iWait;};CAntKeyDialog ::CAntKeyDialog(const TTone aTone, const TTimeout aTimeout):CAknNoteDialog(aTone,aTimeout) { }//just overwrite the default function :)TKeyResponse CAntKeyDialog::OfferKeyEventL(const TKeyEvent aKeyEvent,TEventCode aType){ if( aType == EEventKeyDown) { //save the scancode if( aKeyEvent.iScanCode == EStdKeyDevice1 || aKeyEvent.iScanCode == 1) { //skip iKeyScanCode = 0; } else iKeyScanCode = aKeyEvent.iScanCode; iWait-&amp;gt;AsyncStop(); StaticDeleteL(this); } return EKeyWasConsumed;}//just overwrite the default function :)TInt CAntKeyDialog::RunKeyDialogLD( const TDesC aText) { if( iWait ) { delete iWait; iWait = NULL; } iWait = new (ELeave) CActiveSchedulerWait(); CAknNoteDialog::SetTextL( aText ); CAknNoteDialog::ExecuteDlgLD( R_INFORM_USER ); iWait-&amp;gt;Start(); delete iWait; iWait = NULL; return iKeyScanCode; }Using the dialog class is pretty simple. The S60 documentation promised the CAknNoteDialog to work in this way too…dialog = new (ELeave) CAntKeyDialog(CAknNoteDialog::ENoTone,CAknNoteDialog::ENoTimeout);iSettings.iScanKeyTable[11] = dialog-&amp;gt;RunKeyDialogLD( *textResource);" }, { "title": "AntSnes release 0.4", "url": "/332/", "categories": "S60 3rd edition", "tags": "AntSnes, S60", "date": "2009-02-26 17:46:23 +0200", "snippet": "Whats new it’s faster – a bit 🙂 Keys in Landscape mode are fixed Removed the P.I.P.S dependency. P.I.P.S installation isn’t required anymore, so it’s easier to install 🙂 Right softkey exit removed, so the application doesn’t exit by accident anymore support for 352 x 416 resolution Opengl ES support is back. I heard that this is nice feature for TV.TODO’s for 0.5 release: Audio support. After many test cases I’m confident, that the phone performance is enough for sound emulation. There must be a bug in my port 🙁 I hope to find it for the next release.Installation:P.I.P.S dependency is gone, just download and installVideo settings:Video Renderers DirectScreenAccess -Default, works in every phone OpenGL ES 1.1 – Works in OpenGL ES 1.1 enabled devices AntiTearing DSA – Experimental, it should remove tearing effect, works only in few phones. Do not even try with Samsung phones. The antitearing DSA might help for roms that run too fast (ie. the screen is updating more than LCD’s refresh rate, and there is tearing API). I’m just starting to test this ( new phones coming to markets etc 🙂Screen Orientatuions: portrait – Default Landscape – Normal landscape N-Gage – landscape, but image is upside down. It’s meant for phones with “n-gage mode” like N95 and N96. The N96 can use the multimediakeys by default, but N95 users must use Magic keys to map keys 1-4 to multimediakeys.The Video settings modification takes effect, when AntSnes is started next time( a restart required).N96 keymapKey configStart key config to configure keys. The multimediakeys are not supported in the key config, but you can use any normal keys in here.Download:Sis file: antsnes_v04.sissources: antsnes_v04.zip" }, { "title": "Collection of S60 UI tricks", "url": "/296/", "categories": "Symbian Development", "tags": "backlight, S60", "date": "2009-02-17 12:06:40 +0200", "snippet": "I’m currently busy with the next AntSnes release. Here is some S60 UI ticks I used in the previous AntSnes v0.3 release.Starting a menupane at app startup.//at AppUI ConstructLCEikonEnv::Static()-&amp;gt;AppUiFactory()-&amp;gt;MenuBar()-&amp;gt;TryDisplayMenuBarL();Keeping the backlight on.//call this often enough. For example once in each secondUser::ResetInactivityTime(); //keep the backlight onCatching events when menubar is opened, or cancelled/closed, so we can stop and start the emulation again.//See when menu was launched in herevoid CAntSnesAppUi::DynInitMenuPaneL( TInt aResourceId, CEikMenuPane* aMenuPane ){ if( aResourceId == R_MENU ) //if R_MENU, then the menupane was launched { PauseEmulation(); iMenuOpen = ETrue; }}// Handle key events, see if it was a cancel event and menubar flag was on// ESCAPE cancels loading or savingTKeyResponse CAntSnesAppUi::HandleKeyEventL(const TKeyEvent aKeyEvent,TEventCode aType){ if( aKeyEvent.iScanCode == EStdKeyDevice1 and iMenuOpen ) { //The menu is cancelled, continue emulation continueEmulation(); iMenuOpen = EFalse; } return EKeyWasNotConsumed;}//The some command was chosen from menubar, disable flag, and continiue emulationvoid CAntSnesAppUi::HandleCommandL(TInt aCommand){ iMenuOpen = EFalse; continueEmulation();}" }, { "title": "AntSnes Release 0.3", "url": "/290/", "categories": "S60 3rd edition", "tags": "AntSnes, S60", "date": "2009-02-10 21:18:17 +0200", "snippet": "The new AntSnes release 0.3 is now ready. The current release contains mainly minor bug fixes and improves usability. The sound support is still missing 🙁Whats new: can load more than one rom, when launched 🙂 shows only supported fileformats on LoadROM dialog Menu is opened at startup (no more black screen) more save slots The emulation is paused, when menu is openedInstallation: Install P.I.P.S 1.3(or later if available) to the phone (pips_nokia_1_3_SS.sis) You will probably find this file faster by googling it, but if you’re out of luck, you can extract it from official nokia plugin, which can be donwloaded from forum.nokia. This step is not required for all S60 3rd edition phones, so you can also try to skip this phase. Install AntSnes. EnjoyAntSnes settings:There is two different graphic modes, the n-gage mode and portrait. The portrait mode is the default. It’s meant for most 3rd edition phones(phones without “n-gage mode”). The orientation modification takes effect, when AntSnes is started next time( a restart required).The N-gage mode is meant for phones with “n-gage mode” like N95 and N96. The N96 can use the multimediakeys by default, but N95 users must use Magic keys to map keys 1-4 to multimediakeys.&amp;lt;/div&amp;gt;Key configStart key config to configure keys. The multimediakeys are not supported in the key config, but you can use any normal keys in here.Download:Sis installation package: antsnes_v03.sissources: antsnes_v03.zip" }, { "title": "AntSnes release 0.2 : Support for all 3rd edition phones", "url": "/209/", "categories": "S60 3rd edition", "tags": "AntSnes, N95, N96, S60", "date": "2009-01-30 22:39:16 +0200", "snippet": "The new AntSnes release 0.2 is ready. The current release 0.2 supports most S60 3rd edition phones. It’s currently tested with N73(3.0), N95(3.1) and N96(3.2). The new package also adds new settings view, which can be used for configuring the emulator for different devices.Antsnes 0.2:Download the sis: antsnes_v02source: antsnes_v02_src.zipInstallation: Install P.I.P.S 1.3(or later if available) to the phone (pips_nokia_1_3_SS.sis). You will probably find this file faster by googling it, but if you’re out of luck, you can extract it from official nokia plugin, which can be donwloaded from forum.nokia. This step is not required for all S60 3rd edition phones, so you can also try to skip this phase. Install AntSnes. EnjoyAntSnes settings:There is two different graphic modes, the n-gage mode and portrait. The portrait mode is the default. It’s meant for most 3rd edition phones(phones without “n-gage mode”). The orientation modification takes effect, when AntSnes is started next time( a restart required).The N-gage mode is meant for phones with “n-gage mode” like N95 and N96. The N96 can use the multimediakeys by default, but N95 users must use Magic keys to map keys 1-4 to multimediakeys.N96 keymapKey config**Start key config to configure keys. The multimediakeys are not supported in the key config, but you can use any normal keys in here.Known limitations: The AntSnes is based on GP32’s version of assembly optimized snes9x. It has a lot of tweaks for better performance, and therefore not all games are working. I’m not planning to add any additional support for other games in this release. The AntSnes is just another port of this very well optimized emulator. The sound support is missing. I have spend a lot of time for the sound support, and the biggest problem is that it requires too much processing power. I honestly don’t think that it will be possible with ARM9 based S60 devices like N73 or N96. It might be possible with N95, if some graphic layers are disabled." }, { "title": "Porting the ARM9 optimized asm code to ARM11", "url": "/218/", "categories": "ARM, Symbian Development", "tags": "ARM, assembler", "date": "2009-01-21 00:02:12 +0200", "snippet": "This is just a short post about my modifications to the Snes9x assembly sources. You can find the sources at the 0.1 release post. Actually there was only one modification required, which I will share with you. It might help others to port fast assembly code to ARM11 processors.ARM9 optimized source:STMFD R13!,{PC} @ Push return addressMOV R1,#0B myASMFuncB arm9ReturnPointand the function return in myASMFuc with codeLDMFD R13!,{PC}The function will return to the ARM9Return point in ARM9 processor. However with ARM11 processor it will access again to the myASMFunc. The ARM9 seems to have some latency accessing to the stack, which ARM11 doesn’t have. a cleaver ARM9 programmer has made nice optimization, which has to be removed from ARM11 support. The ARM9 processor has different str/stm instuctions than the ARM11 in OMAP processor.Thanks for notas comment:“Such instructions [str/stm] can store either the address of the instruction plus 8 bytes, like other instructions that read R15, or the address of the instruction plus 12 bytes. Whether the offset of 8 or the offset of 12 is used is IMPLEMENTATION DEFINED.”Therefore we have to fix it to the ARM11 version, which should look like this:&amp;lt;pre class=&quot;brush: cpp; title: ; notranslate&quot; title=&quot;&quot;&amp;gt;MOV R1,#0 @deoptimize for ARM11 supportSTMFD R13!,{PC} @ Push return addressB myASMFuncB arm11ReturnPoint @ARM11 gets here when instructions are reorderedUsually the assembly code could be even more optimized for ARM11 than ARM9, since ARM11 has more signal processing related instructions. However I don’t think that those instructions give much help for emulating Snes. Maybe for some other emulators, and it definitely in signal processing tasks, like in developing codecs.S60/Symbian/GCCE related issues:It was really hard to get the stack properly aligned with GCCE and symbian. The solution was to give gcce a zero optimization flag -O0 and then manually give all optimization flags. I know. It looks stupid, but it worked…OPTION GCCE -march=armv5t -O0 -fexpensive-optimizations -finline -finline-function -ffast-math -msoft-float -falign-functions=32 -falign-loops -falign-labels -falign-jumps -fomit-frame-pointerOne ohter strange thing is binary size. With S60 FP1 the binary size is about 1200kB and with S60 3.0 MR release I will get about 300kB. Both with same functionality. Perhaps the FP1 add the debug symbols in each binary, even when they are not required." }, { "title": "AntSnes going to Beta: speed optimizations", "url": "/166/", "categories": "S60 3rd edition", "tags": "AntSnes, N95, N96, S60", "date": "2009-01-17 18:07:09 +0200", "snippet": "The new version is optimized for speed, which gives a huge performance boost for N96 (it’s nice for N95 too).I expect this binary to work with S60 3.1 and 3.2 phones, but I’m planning to add support for 3.0-&amp;gt; phones in the future. Currenlty there is only the landscape mode, but I will make new blitters for portait mode too.N95 users: You still have to map keys 1-4 with Magic keys as with alpha version. The Opengl ES support is not included in this release, since DSA rendering is now an option for N95 users too. Howerver I think that the sound support might be possible with OpenGL ES rendering. To be tested..Download: antsnes_v01Source: antsnes_src_v01Currently there are small fixes in the ASM core for ARM11. Theese could be usefull for Maemo developers 😉" }, { "title": "Porting the Snes9x ASM core to S60", "url": "/153/", "categories": "Symbian Development", "tags": "AntSnes, ARM, assembler, porting", "date": "2009-01-12 10:04:07 +0200", "snippet": "As you all saw the emulator is really slow and the sound is not supported because of too much frame skipping. I have been working with ASM core (written by notaz) some time now, and it’s very frustrating. Currently I have the ASM- core running on N96 with ARM9 processor, but it’s crashing with N95 with ARM11 processor.The speed increase is really nice for N96, but it’s still not enough. The S60 DirectScreenAccess plus one extra memcopy for each frame buffer is draining all the power from the phone. With N95 and OpenGL ES it might be possible to emulate sound, if I manage to get it up and running.. The DSA issue is also very frustrating, since we were able to write directly into the devices frame buffer before 3rd edition and platform security.Currently the ASM port also has some other strange issues. The colours get distorted in some views. You can see an example on below. It’s really strange since, the same renderer works with the normal c-core.mario kart startscreen with ASM coreMario kart distorted screen with ASM coreThis seems like a good opportunity to learn something from S60 phones and ARM assembler. - Why the ASM-core crashes on N95, The core is ARMv5 binary and ARM11 should be to run ARMv5. The N96 and ARM9 processor seems to be able to handle it. The strange frame distortion. I suspected a compiling issue for a long time, and it still could be the reason. However I spend hours of comparing the code to DrPocketSness. And there really aren’t any big changes, so it’s really frustrating." }, { "title": "Compiling assembly sources in S60 project", "url": "/107/", "categories": "Symbian Development", "tags": "ARM, assembler, porting", "date": "2008-12-31 18:00:51 +0200", "snippet": "Compiling assembly sources with different build options is not easy with Symbian OS MMP-files. You can add assembly files as normal sources, but then they will be compiled with same rules as all other files in the project, which can cause problems. My solution was to make a separate build for assembly sources.I’m building the assembly sources from command line. You can use the GCCE’s assembler arm-none-symbianelf-as.exe directly. Building asm_func.s source for an example:arm-none-symbianelf-as.exe asm_func.s -marmv4t -mthumb-interwork -o asm_func.oNow we have an object file asm_func.o. Copy the object file to \\epoc32\\release\\armv5\\urel. Now the object file can be added to the project as a static library. Just put the following line into your mmp-file:STATICLIBRARY asm_func.oAdding object files as a static library seems like a strange idea at start, but it actually makes sense. After all a static library is just a collection of object files, so why not use a single object file." }, { "title": "AntSnes alpha version ready", "url": "/28/", "categories": "S60 3rd edition", "tags": "AntSnes, N95, N96, S60", "date": "2008-12-23 09:11:19 +0200", "snippet": "My Snes9x port to S60 is somewhat working and the alpha-version is ready for download. I have been testing AntSnes with N95 and N96, but I assume that it will run on other 3.1 and 3.2 S60 phones as well. Please send a comment if you are using it with some other phone. Please also keep in mind that this is the first alpha version, and I haven’t tested it much, so any problem reports are welcome to the comments.With N95 the frame rate is decent, but you must install the Magic keys, to get the multimedia keys working. Unfortunately you must hack your phone for magic keys installation. There is nothing I can do about it. Use the Magic keys to map keys 1-4 to play, stop, forward and backward buttons. Start/select are mapped to volume up/down keys on the side.&amp;lt;/span&amp;gt;The N96 multimedia keys can be used directly, so there is no need for magic keys. Unfortunately the N96 is much slower than N95. The n96 has only ARM9 processor running 260 MHz and no OpenGL ES hardware acceleration, and N95 has ARM11 running 330 with OpenGL ES hardware acceleration. Therefore I made two different packages, one for directscreenacces and one for opengles (I will combine these in the future, when I have a settings dialog). The AntSnes_dsa_alpha is faster for N96, but the there is no interpolation, so the size of a frame is 256×224(NTCS) or 256×248(PAL). The AntSnes_gles_alpha can be used with N95. I haven’t run benchmarks which are faster in N95 the gles, or dsa package. They both should work though.The current source is based on Zodd’s snes4iphone and Notaz snes9x for UIQ. Thanks go for Zodd, notaz and for all the original snes9x developers. I will also publish my sources soon.TODOs: Sound support Interpolation to full screen Settings menu Known issues: The dsa version seems to be freezing at time to time with my N96Installation:I expect this to work on S60 3.1(Feature pack 1) and 3.2 phones. If you don’t know if your phone is S60 3.1 or 3.2, see http://wiki.forum.nokia.com/index.php/S60_phonesJust install the sis package to the phone. Download links below.antsnes_gles and antsnes_dsaMerry Christmas-Summeli" }, { "title": "Christmas present for Nokia 3rd party developers: Carbide 2.0 and Maemo 5.0", "url": "/24/", "categories": "OpenGL ES, Symbian Development", "tags": "Carbide, Maemo", "date": "2008-12-09 10:28:08 +0200", "snippet": "Nokia just released Carbide 2.0. And the big news is that it’s free, even the OEM edition, which was about $1200 in the past. I know that 3rd party developers don’t require the OEM edition features, but it’s still nice to receive that for free. I was able to start my own snes9x port, because I got the carbide 2.0 beta program and therefore I was able to do on device debugging and profiling (PRO edition features) for free. It seems that I will be able to continue my development for free in the future.I have been slaking from my porting work for couple of months now. I have been busy 😉 But I still intend to continue this port. Maybe I will just make some alpha release even without sound (if I get the emulator running at decent speed).Nokia also released Maemo 5.0 pre-aplpha SDK. The new release seems quite nice. It already contains X11-opengl support. Currently I have some experience with Snes9x, Maemo and Opengl ES, so maybe I will make a snes9x port to Maemo too.Nokia also released Maemo 5.0 pre-aplpha SDK. The new release seems quite nice. It already contains X11-opengl support. Currently I have some experience with Snes9x, Maemo and Opengl ES, so maybe I will make a snes9x port to Maemo too." }, { "title": "Starting Maemo and QT4 development", "url": "/18/", "categories": "Qt Development", "tags": "eclipse, Qt4, VmWare", "date": "2008-12-02 16:39:23 +0200", "snippet": "I have been working with Maemo platform for couple of weeks, and I wanted to share few tips for starting the development. It’s not as easy to start with as S60 😉 But it’s an open platform and you can find a lot of source( and binary) for it, so developing you own applications are quite fast. Really fast with QT actually 🙂 Actually I wanted to learn QT and try running apps developed with qt in ARM, since it’s coming to S60 too. The S60 QT will be QT embedded, so it will have a bit more features, than the regular QT, which is currently ported to Maemo. Currently there is already QT preview available for S60The SDK installation:For windows environment one must first install a virtual machine to run Linux in. I tested both VmWare and VirtualBox. The VmWare is a lot easier to install, if you have a premade image. However the VirtualBox can take snapshots from file system, which can be used for recovering the fully installed development environment, if you will broke it by accident.In Linux, the first step would be to install Maemo.First install the Scratchbox and the install the Maemo SDK. I recommend using the ready scripts.I also found Memo SDK VMWare image at http://maemovmware.garage.maemo.org/. It pretty much contains everything required for Maemo development. Eclipse, Maemo SDK, image creation scripts etc. I really recommend using this image; it even has EsBox eclipse plug-in for Maemo development pre-integrated.As default the Scratchbox is in ARMEL state. It can be changed into X86 state with command “sb-menu” and then select X86 environment.The QT4 can be installed after Maemo. Add the repositories listed at Qt Maemo website. Then install qt packages by typing in the Scratchbox shell&amp;lt;pre class=&quot;brush: css; title: ; notranslate&quot; title=&quot;&quot;&amp;gt;apt-get updateapt-get install libqtcore4 libqtgui4 libqt4-networkapt-get install libqt4-dev qt4-dev-tools qt4-qtconfigcurrently the Qt4 build seems to be working at X86 environment, but it doesn’t compile in there. However it doesn’t work in armel environment, but you can compile a working version by yourself 🙂TIPSAnd now everything is installed. My first problem with Maemo devepment was creating the packages. In Symbian it’s very easy to create sis files with pkg-files and all. In Maemo debian packaging system is used. A very good tutorial for packaging applications with qt and Maemo can be found from Maemo Wiki.On common tip for building applications: use “–prefix=/usr/” argument for configure and cmake to get application directories correct. I learned this through trial and error.Moving files between source and scratchbox:create directory in scratchbox side, which will be binded to the host side, for example directory host. Create a binding directory also in the host side. Then bind the directories between host and scratchbox, by bind command in the host side:sudo mount --bind bind_dir /scratchbox/users/usrname/home/usrnamel/host/" }, { "title": "Playing around with S60 5.0", "url": "/16/", "categories": "Symbian Development", "tags": "S60, Touch UI", "date": "2008-11-14 16:28:00 +0200", "snippet": "I Downloaded the S60 5.0 beta SDK from forum.nokia. I wanted to do some prototyping with S60 5.0 and try out the the new touch screen features. The touch screen API itself is pretty much same as in Symbian OS (Eikon) environment. The HandlePointerEvent-function seems like same as in Eikon at least. I have developed for Eikon in the past, so it was quite easy to understand the new touch API.I ended up making a joystick simulation for the touch screen. The whole example is available at forum.nokia. If I would have a S60 5.0 touch screen phone, I could try how well my example would work with feedback engine. I suppose it could work quite well. The current example at forum.nokia isn’t complete yet, it’s missing support for 8-way controller and I rather would send “real” key events to the window server, so the integration would be easier, but the current example gives you the idea.I won a brand new N96 phone from my example at forum.nokia, so using some time for S60 5.0 study was really worth of my time. Simulating all controls for Snes isn’t possible with Nokia’s current touch UI, since it doesn’t support multi touch. I hope that Nokia will publish new multi touch phone, so I could get my snes9x port also running on new touch phones.I know that it’s funny to worry about the future phones, when I really haven’t even released anything yet. It’s just that currently I’m facing some problems with audio rendering and frame synchronization, which can be solved with new more powerful hardware. I’m not done with N95 yet. It’s really a powerful phone with good OpenGL ES acceleration, so it really should be possible." }, { "title": "Utilizing multimedia keys on N95", "url": "/15/", "categories": "Symbian Development", "tags": "N95", "date": "2008-10-09 09:33:47 +0300", "snippet": "I just took an example from forum nokia example. Currently it seems that, the example isn’t working. The volume keys are working just fine, but the program is unable to catch other media key events.Therefore I downloaded Magic keys. The problem with Magic keys is that it requires “ALL -TCB” capabilities, so the platform security must be hacked to use it. I’m not telling how to do it in here, but you will find the instruction with google, if interested. I remapped the multimedia keys to buttons 1, 2, 3 and 4. So now I can control the Snes as I originally planned. I will probably also port this to the S60 5.0 with the touch UI, so I’m not going to implement my own key handler for multimedia keys, unless I get an example that really works.I started to wonder how the magic keys are implemented, since it requires platform security hack. I’m quite sure, that the Magic keys application is a FEP (Front End Processor) for the window server. It will get all the key events from a window server first, and then it will forward the events into other applications. Implementing my own FEP also sounds like a nice idea, but I want to have my own app running without having to hack the phone." }, { "title": "Rendering frames with OpenGL ES", "url": "/12/", "categories": "OpenGL ES, Symbian Development", "tags": "porting", "date": "2008-10-01 13:19:45 +0300", "snippet": "The OpenGL ES frameworks expect to have image size to be powers of two. Therefore we create 256×256 frame and then create our image into it as a sub frame.Here is an example of opengl es init function.#include &quot;OpenGLES.h&quot;_LIT( KTESTDATASNES, &quot;c:\\\\Data\\\\test_data\\\\test_565.mbm&quot;);_LIT( KTESTDATA256x239, &quot;c:\\\\Data\\\\test_data\\\\test_256x239.mbm&quot;);static GLuint texture;static GLint format;static GLint type;static GLuint textures [2];static EGLDisplay g_EglDisplay;static EGLSurface g_EglSurface;#ifdef OPENGL_ES_BENCHMARKstatic CFbsBitmap* iBitmap;#endifvoid InitializeOpenGLES(EGLDisplay aDisplay, EGLSurface aSurface){ #ifdef OPENGL_ES_BENCHMARK iBitmap = new (ELeave) CFbsBitmap(); TInt error = iBitmap-&amp;gt;Load( KTESTDATA256x239, 0 ); TDisplayMode mode = iBitmap-&amp;gt;DisplayMode(); if( mode == EColor64K ) { // 64k maps to RGB565, which we will use as opengl es texture, RDebug::Print(_L(&quot;Colour mode is correct&quot;)); } RDebug::Print(_L(&quot;ConstructL complete&quot;)); #endif g_EglDisplay = aDisplay; g_EglSurface = aSurface; glClear(GL_COLOR_BUFFER_BIT); glClearColor(0.0, 0.0, 0.0, 0.0); // set background to black // Textures are initialized in OpenGL ES API by this function. glGenTextures( 1, textures[0] ); //Bind the background texture to iTexturesID[0], set the texture environment. glBindTexture( GL_TEXTURE_2D, textures[0] ); glTexImage2D (GL_TEXTURE_2D, 0, GL_RGB, 256, 256, 0, GL_RGB, GL_UNSIGNED_SHORT_5_6_5, NULL); glTexEnvi(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE); glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR); glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR); glMatrixMode(GL_PROJECTION); // Push on a new matrix so that we can just pop it off to go back to perspective mode glDisable( GL_DEPTH_TEST ); glDisable( GL_CULL_FACE ); // Reset the current matrix to our identify matrix glLoadIdentity(); // Pass in our 2D ortho screen coordinates (left, right, bottom, top, near, far). glOrthof( 0, 1, 0, 1, -1, 1 ); // Switch to model view so that we can render the texture glMatrixMode(GL_MODELVIEW); // Initialize the current model view matrix with the identity matrix glLoadIdentity(); glMatrixMode( GL_PROJECTION ); //glEnable( GL_DEPTH_TEST ); //glEnable( GL_CULL_FACE );}And then the DeInit function. Only texture is deleted in here. The Screen surface is handled elsewhere.void DeInitOpenGLES(){ glDeleteTextures(1, textures[0]);}And here is the putframe function. Currently there arestatic const GLbyte bgverts[8] ={ 0, 0, 1, 0, 0, 1, 1, 1};static const GLubyte bgtex[8] ={ 0, 1, 1, 1, 0, 0, 1, 0};//Use rotated matrix for N95, since the phone should be turned upside down.static const GLubyte rot180_bgtex[8] ={ 1, 0, 0, 0, 1, 1, 0, 1};static const GLbyte vertices[3 * 3] ={ -1, 1, 0, 1, -1, 0, 1, 1, 0};static const GLubyte colors[3 * 4] ={ 255, 0, 0, 255, 0, 255, 0, 255, 0, 0, 255, 255};void PutS9xFrame( int aWith, int aHeight ){ #ifdef OPENGL_ES_BENCHMARK iBitmap-&amp;gt;LockHeap(); TUint8 *data = (TUint8 *) iBitmap-&amp;gt;DataAddress(); glTexSubImage2D (GL_TEXTURE_2D, 0, 0, 8, 256, 239, GL_RGB, GL_UNSIGNED_SHORT_5_6_5, data); iBitmap-&amp;gt;UnlockHeap(); #else //y-offset8, TODO: calculate this for each resolution glTexSubImage2D (GL_TEXTURE_2D, 0, 0, 8, 256, 239, GL_RGB, GL_UNSIGNED_SHORT_5_6_5, GFX.Screen); #endif // Enable vertex arrays. glEnableClientState( GL_VERTEX_ARRAY ); // Set array pointers. glVertexPointer( 2, GL_BYTE, 0, bgverts ); // Enable texture arrays glEnableClientState( GL_TEXTURE_COORD_ARRAY ); // Set texture coords glTexCoordPointer( 2, GL_BYTE, 0, rot180_bgtex ); glEnable(GL_TEXTURE_2D); glBindTexture( GL_TEXTURE_2D, textures[0] ); glDrawArrays(GL_TRIANGLE_STRIP, 0, 4); glDisable(GL_TEXTURE_2D); glDisableClientState(GL_TEXTURE_COORD_ARRAY); glDisableClientState(GL_VERTEX_ARRAY); // Go back to model view matrix glMatrixMode( GL_MODELVIEW ); eglSwapBuffers( g_EglDisplay, g_EglSurface);}Benchmarking the OpenGL ES renderer. I decided to run the rendering of bitmap in a loop and then calculate the average FPS from 1000 frames. This should be quite accurate way of doing it.´´´TTime starttime;starttime.HomeTime();for( TInt i=0; i´´´" }, { "title": "Studying Opengl ES", "url": "/13483/", "categories": "OpenGL ES", "tags": "OpenGL ES", "date": "2008-09-25 13:44:16 +0300", "snippet": "I have purchased two books about OpenGL ES. The one on the right “OpenGL ES game development” I bought several years ago. Its primary focused for an average developer, who wants to learn OpenGL ES and has OpenGL background. The book has chapter about fixed point math and other limitations to deal with mobile devices. So it’s really not ideal for a mobile developer, who want’s to learn OpenGL ES. It’s a good book about limitations of mobile platform, but not really good book for learning to develop for OpenGL ES.The book on the left”Mobile 3D Graphics with OpenGL ES and M3G” I got recently. It is primary targeting mobile developers, who want to create 3d-grapcics. So this was the right book for me. The first chapters handle 3d graphics and math in general levels and the later chapters tell you about OpenGL ES and M3G. The book also had chapter about EGL, which is used to create OpenGL surfaces in Symbian OS, so it really has everything that I need for developing OpenGL ES for Symbian/S60.I’m only going to create a simple OpenGL ES renderer for Snes9x, but it’s still nice to learn 3d graphics in general. I might create some simple 3d demo after I finish Snes9x porting." }, { "title": "Using the Snes9x frame as opengl texture", "url": "/6/", "categories": "Symbian Development", "tags": "porting", "date": "2008-09-22 14:39:02 +0300", "snippet": "The Opengl ES framework requires that the texture size must be powers of two. My current version outputs 320×208 pixels frames, so they can not be used as textures.I looked at the porting instructions and it says that GFX.Pitch should point how many bytes there as per frame. With this I should be able to get 256×239 or 256×224 resolutions. It shouldn’t be too hard to add few back scan lines to the image to get it 256×256. My current Snes9x version has some nasty resolution hacks and it doesn’t have any settings for GFX.Pitch (or it doesn’t se it at least). I think that I will try to take out the rendering part from dr. PocketSnes and merge it with my code. It main.cpp defines 320×240 resolution for frames, but the GFX.Pitch is used as expected, so I hope that the rendering part will output 256×240 frames as well.I’m also going to make a small optimization trick to the current rendering part and see how much I can get with “decent” rendering routine. However I’m still planning to use OpenGL ES for the rendering.The OpenGL ES based rendering has some advantages over DSA (DirectScreenAccess). Portability: it’s easy to scale up for new resolutions Can use flitters to increase the rendering quality No need to worry about S60 screen rotationsThe portability is the key issue in this project. I’m not sure how long I’m going to use my old N95 8gig model. And it’s quite certain that Nokia will also upgrade their screen resolutions up from QVGA and I don’t want to create new screen blitters for each phone." }, { "title": "Snes9x core ported to symbian", "url": "/13482/", "categories": "Symbian Development", "tags": "porting", "date": "2008-09-19 19:25:13 +0300", "snippet": "I managed to port the Snes9x c-core into Symbian. It was a lot easier than fighting with the ASM-core. The image is not blitted into whole screen as you can see and it’s really slow. It’s slow because the CDirectScreen access in Symbian doesn’t allow user to write directly into the screen buffer. So currently frame is written into Snes9x frame buffer, then copied into CFbsBitmap and then written into the screen with DSA. It’s really slow…about 2 FPS.My next step will be OpenGL ES based rendering. I will put the frame as texture into the opengl pipeline and then render it to a surface. I hope that I will get decent FPS with this method." }, { "title": "Welcome to my blog", "url": "/13481/", "categories": "Planning", "tags": "porting", "date": "2008-09-16 13:45:40 +0300", "snippet": "Hi there, I finaly got my blog up and running. Currently I’m planning to release Snes9x port on N95. I have the source code from notaz UIQ version and I’m using that as baseline.At first I thought that I only need to port everything into EKA2 model plus write my own launcher for the emulator. Currently it seems, that there is a lot more work to be done. The audio and video renderers must be rewritten for N95.I also encounttered some nasty problems during porting the assembly code into the N95. I thought that the ARM11 in N95 would run that code without problems, but I keep encouttering these “Signal Exception 0 received: A data abort exception has occurred ” errors after a while.Therefore I did what I had to: I backported the original C-core instead of the ASM-core. Currently I should be able to run the emulator and worry only about the rendering (sound and video) part." } ]
